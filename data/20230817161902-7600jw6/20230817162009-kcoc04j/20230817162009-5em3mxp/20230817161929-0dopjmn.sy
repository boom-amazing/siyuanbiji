{"ID":"20230817161929-0dopjmn","Spec":"1","Type":"NodeDocument","Properties":{"id":"20230817161929-0dopjmn","title":"FlinkDataStreamApi","updated":"20230817161929"},"Children":[{"ID":"20230817161930-b4ragkf","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230817161930-b4ragkf","updated":"20230817161930"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"FlinkDataStreamApi"}]},{"ID":"20230817161931-ppe55gy","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230817161931-ppe55gy","updated":"20230817161931"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"DataSource"}]},{"ID":"20230817161932-tpf9leu","Type":"NodeParagraph","Properties":{"id":"20230817161932-tpf9leu","updated":"20230817161932"},"Children":[{"Type":"NodeText","Data":"DataSource是程序的输入数据源，Flink提供了大量内置的DataSource，也支持自定义DataSource，不过目前Flink提供的这些已经足够我们正常使用了。"}]},{"ID":"20230817161933-0udmhkv","Type":"NodeParagraph","Properties":{"id":"20230817161933-0udmhkv","updated":"20230817161933"},"Children":[{"Type":"NodeText","Data":"Flink提供的内置输入数据源：包括基于socket、基于Collection"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"还有就是Flink还提供了一批Connectors，可以实现读取第三方数据源，"}]},{"ID":"20230817161934-cojkyc6","Type":"NodeTable","Data":"| Flink 内置            | Apache Bahir |\n| :-------------------- | :----------- |\n| Kafka                 | ActiveMQ     |\n| Kinesis Streams       | Netty        |\n| RabbitMQ              |              |\n| NiFi                  |              |\n| Twitter Streaming API |              |\n| Google PubSub         |              |","TableAligns":[1,1],"Properties":{"id":"20230817161934-cojkyc6","updated":"20230817161934"},"Children":[{"Type":"NodeTableHead","Properties":{"id":""},"Children":[{"Type":"NodeTableRow","Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"Flink 内置"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"Apache Bahir"}]}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"Kafka"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"ActiveMQ"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"Kinesis Streams"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"Netty"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"RabbitMQ"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""}}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"NiFi"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""}}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"Twitter Streaming API"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""}}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"Google PubSub"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""}}]}]},{"ID":"20230817161935-rrlyidb","Type":"NodeParagraph","Properties":{"id":"20230817161935-rrlyidb","updated":"20230817161935"},"Children":[{"Type":"NodeText","Data":"Flink 内置：表示Flink中默认自带的。"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"Apache Bahir：表示需要添加这个依赖包之后才能使用的。"}]},{"ID":"20230817161936-d7jjlue","Type":"NodeParagraph","Properties":{"id":"20230817161936-d7jjlue","updated":"20230817161936"},"Children":[{"Type":"NodeText","Data":"针对source的这些Connector，我们在实际工作中最常用的就是Kafka"}]},{"ID":"20230817161937-q59nofd","Type":"NodeParagraph","Properties":{"id":"20230817161937-q59nofd","updated":"20230817161937"},"Children":[{"Type":"NodeText","Data":"当程序出现错误的时候，Flink的容错机制能恢复并继续运行程序，这种错误包括机器故障、网络故障、程序故障等"}]},{"ID":"20230817161938-kmmtght","Type":"NodeParagraph","Properties":{"id":"20230817161938-kmmtght","updated":"20230817161938"},"Children":[{"Type":"NodeText","Data":"针对Flink提供的常用数据源接口，如果程序开启了checkpoint快照机制，Flink可以提供这些容错性保证"}]},{"ID":"20230817161939-jv83diq","Type":"NodeTable","Data":"| DataSource | 容错保证     | 备注                   |\n| :--------- | :----------- | :--------------------- |\n| Socket     | at most once |                        |\n| Collection | exactly once |                        |\n| Kafka      | exactly once | 需要使用0.10及以上版本 |","TableAligns":[1,1,1],"Properties":{"id":"20230817161939-jv83diq","updated":"20230817161939"},"Children":[{"Type":"NodeTableHead","Properties":{"id":""},"Children":[{"Type":"NodeTableRow","Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"DataSource"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"容错保证"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"备注"}]}]}]},{"Type":"NodeTableRow","TableAligns":[1,1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"Socket"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"at most once"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""}}]},{"Type":"NodeTableRow","TableAligns":[1,1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"Collection"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"exactly once"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""}}]},{"Type":"NodeTableRow","TableAligns":[1,1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"Kafka"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"exactly once"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"需要使用0.10及以上版本"}]}]}]},{"ID":"20230817161940-9fmmwpd","Type":"NodeParagraph","Properties":{"id":"20230817161940-9fmmwpd","updated":"20230817161940"},"Children":[{"Type":"NodeText","Data":"自定义source："}]},{"ID":"20230817161941-gnaj8vm","Type":"NodeParagraph","Properties":{"id":"20230817161941-gnaj8vm","updated":"20230817161941"},"Children":[{"Type":"NodeText","Data":"mysql工具类"}]},{"ID":"20230817161942-4g0kz09","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161942-4g0kz09","updated":"20230817161942"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package com.pyy.flink.stream.utils;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\n\npublic class MysqlUtils {\n    public  static Connection getCon(){\n        Connection connection=null;\n        try {\n            Class.forName(\"com.mysql.cj.jdbc.Driver\");\n             connection = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/test?serverTimezone=GMT\", \"root\", \"pyy\");\n        } catch (ClassNotFoundException | SQLException e) {\n            e.printStackTrace();\n        }\n        return connection;\n    }\n    public  static  void closeCon(Connection connection, PreparedStatement preparedStatement)  {\n        if(connection!=null){\n            try {\n                connection.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n        if(preparedStatement!=null){\n            try {\n                preparedStatement.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(getCon());\n    }\n\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161943-86qigqm","Type":"NodeParagraph","Properties":{"id":"20230817161943-86qigqm","updated":"20230817161943"},"Children":[{"Type":"NodeText","Data":"mysqlsource："}]},{"ID":"20230817161944-bdmd3op","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161944-bdmd3op","updated":"20230817161944"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package com.pyy.flink.stream;\n\nimport com.pyy.flink.stream.utils.MysqlUtils;\nimport org.apache.flink.configuration.Configuration;\nimport org.apache.flink.streaming.api.functions.source.RichParallelSourceFunction;\nimport org.apache.flink.streaming.api.functions.source.RichSourceFunction;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\n\npublic class MysqlStudentSource extends RichSourceFunction\u003cStudent\u003e {\n     Connection connection;\n     PreparedStatement preparedStatement;\n    @Override\n    public  void open(Configuration parameters) throws Exception {\n\n        if(connection==null)connection = MysqlUtils.getCon();\n        preparedStatement=connection.prepareStatement(\"select * from student\");\n    }\n\n    @Override\n    public void close() throws Exception {\n\n        MysqlUtils.closeCon(connection,preparedStatement);\n    }\n\n    @Override\n    public void run(SourceContext\u003cStudent\u003e ctx) throws Exception {//生命周期\n\n            ResultSet res = preparedStatement.executeQuery();\n            while (res.next()) {\n                int id = res.getInt(\"id\");\n                String name = res.getString(\"name\");\n                int age = res.getInt(\"age\");\n                ctx.collect(new Student(id, name, age));\n            }\n        }\n\n\n    @Override\n    public void cancel() {\n    }\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161945-5u1olst","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230817161945-5u1olst","updated":"20230817161945"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Transformation算子"}]},{"ID":"20230817161946-08c4dpq","Type":"NodeParagraph","Properties":{"id":"20230817161946-08c4dpq","updated":"20230817161946"},"Children":[{"Type":"NodeText","Data":"transformation是Flink程序的计算算子，负责对数据进行处理，Flink提供了大量的算子，其实Flink中的大部分算子的使用和spark中算子的使用是一样的，下面我们来看一下："}]},{"ID":"20230817161947-7jpoqjl","Type":"NodeTable","Data":"| 算子         | 解释                                       |\n| :----------- | :----------------------------------------- |\n| map          | 输入一个元素进行处理，返回一个元素         |\n| flatMap      | 输入一个元素进行处理，可以返回多个元素     |\n| filter       | 对数据进行过滤，符合条件的数据会被留下     |\n| keyBy        | 根据key分组，相同key的数据会进入同一个分区 |\n| reduce       | 对当前元素和上一次的结果进行聚合操作       |\n| aggregations | sum(),min(),max()等                        |","TableAligns":[1,1],"Properties":{"id":"20230817161947-7jpoqjl","updated":"20230817161947"},"Children":[{"Type":"NodeTableHead","Properties":{"id":""},"Children":[{"Type":"NodeTableRow","Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"算子"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"解释"}]}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"map"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"输入一个元素进行处理，返回一个元素"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"flatMap"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"输入一个元素进行处理，可以返回多个元素"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"filter"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"对数据进行过滤，符合条件的数据会被留下"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"keyBy"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"根据key分组，相同key的数据会进入同一个分区"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"reduce"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"对当前元素和上一次的结果进行聚合操作"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"aggregations"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"sum(),min(),max()等"}]}]}]},{"ID":"20230817161948-2gs0k32","Type":"NodeTable","Data":"| 算子            | 解释                                     |\n| :-------------- | :--------------------------------------- |\n| union           | 合并多个流，多个流的数据类型必须一致     |\n| connect         | 只能连接两个流，两个流的数据类型可以不同 |\n| split           | 根据规则把一个数据流切分为多个流         |\n| shuffle         | 随机分区                                 |\n| rebalance       | 对数据集进行再平衡，重分区，消除数据倾斜 |\n| rescale         | 重分区                                   |\n| partitionCustom | 自定义分区                               |","TableAligns":[1,1],"Properties":{"id":"20230817161948-2gs0k32","updated":"20230817161948"},"Children":[{"Type":"NodeTableHead","Properties":{"id":""},"Children":[{"Type":"NodeTableRow","Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"算子"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"解释"}]}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"union"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"合并多个流，多个流的数据类型必须一致"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"connect"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"只能连接两个流，两个流的数据类型可以不同"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"split"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"根据规则把一个数据流切分为多个流"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"shuffle"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"随机分区"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"rebalance"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"对数据集进行再平衡，重分区，消除数据倾斜"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"rescale"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"重分区"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"partitionCustom"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"自定义分区"}]}]}]},{"ID":"20230817161949-i3qr7pe","Type":"NodeParagraph","Properties":{"id":"20230817161949-i3qr7pe","updated":"20230817161949"},"Children":[{"Type":"NodeText","Data":"合并以及分流代码："}]},{"ID":"20230817161950-0a78iz3","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"c2NhbGE=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161950-0a78iz3","updated":"20230817161950"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c2NhbGE=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package com.pyy.flink.stream\n\nimport org.apache.flink.api.scala._\nimport org.apache.flink.streaming.api.functions.ProcessFunction\nimport org.apache.flink.streaming.api.functions.co.CoMapFunction\nimport org.apache.flink.streaming.api.scala.{ConnectedStreams, DataStream, OutputTag, StreamExecutionEnvironment}\nimport org.apache.flink.util.Collector\n\nobject UnionOp {\n  def main(args: Array[String]): Unit = {\n    val env = StreamExecutionEnvironment.getExecutionEnvironment\n    //    val source1 = env.fromCollection(Array(1, 2, 3, 4, 5, 6))\n    //    val source2= env.fromCollection(Array( 2, 3, 4, 5, 6))\n    //    val sourceUnion = source1.union(source2)\n    //UnionOp(sourceUnion)\n    //   val sc1 = env.fromElements(\"asc-wl\")\n    //    val sc2 = env.fromElements(1)\n    //    val consc = sc1.connect(sc2)\n    //    connectOp(consc)\n    //split不能继续切分流 所以我演示可以继续切分流的sideoutput\n//    val source = env.fromCollection(Array(1,2,3,4,5,6,7,8,9,10));\n//    sideOutput(source)\n\n\n    env.execute(\"UnionOp\")\n  }\n\n  private def sideOutput(source: DataStream[Int]) = {\n    val output1 = new OutputTag[Int](\"ji\")\n    val output2 = new OutputTag[Int](\"ou\")\n    val outputStream = source.process(new ProcessFunction[Int, Int] {\n      override def processElement(value: Int, ctx: ProcessFunction[Int, Int]#Context, out: Collector[Int]): Unit = {\n        if (value % 2 == 0) {\n          ctx.output(output1, value)\n        } else {\n          ctx.output(output2, value)\n        }\n      }\n    })\n    val ji = outputStream.getSideOutput(output1)\n    val ou = outputStream.getSideOutput(output2)\n    val over = new OutputTag[Int](\"over5\")\n    val lower = new OutputTag[Int](\"lower5\")\n    val outpustream1 = ji.process(new ProcessFunction[Int, Int] {\n      override def processElement(value: Int, ctx: ProcessFunction[Int, Int]#Context, out: Collector[Int]): Unit =\n        if (value \u003e 5) {\n          ctx.output(over, value)\n        } else {\n          ctx.output(lower, value)\n        }\n    })\n    val overfive = outpustream1.getSideOutput(over)\n    overfive.print().setParallelism(1)\n  }\n\n  private def connectOp(consc: ConnectedStreams[String, Int]) = {\n    consc.map(new CoMapFunction[String, Int, String] {\n      override def map1(value: String): String = {\n        val str = value.replace('-', ',')\n        str\n      }\n\n      override def map2(value: Int): String = {\n        val str = String.valueOf(value)\n        str\n      }\n    }).print().setParallelism(1)\n  }\n\n  private def UnionOp(sourceUnion: DataStream[Int]) = {\n    sourceUnion.map(num =\u003e num).setParallelism(2).\n      rebalance.print().setParallelism(4)\n  }\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161951-gjdiclc","Type":"NodeParagraph","Properties":{"id":"20230817161951-gjdiclc","updated":"20230817161951"},"Children":[{"Type":"NodeText","Data":"java代码："}]},{"ID":"20230817161952-im9tpzg","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161952-im9tpzg","updated":"20230817161952"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package com.pyy.flink.stream;\n\nimport org.apache.flink.streaming.api.datastream.DataStream;\nimport org.apache.flink.streaming.api.datastream.DataStreamSource;\nimport org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\nimport org.apache.flink.streaming.api.functions.ProcessFunction;\nimport org.apache.flink.util.Collector;\nimport org.apache.flink.util.OutputTag;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Comparator;\n\npublic class StreamSideOutPut {\n    public static void main(String[] args) throws Exception {\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        DataStreamSource\u003cInteger\u003e source = env.fromCollection(Arrays.asList(1, 2, 3, 4, 5));\n        OutputTag\u003cInteger\u003e even = new OutputTag\u003cInteger\u003e(\"even\"){};//偶数\n        OutputTag\u003cInteger\u003e odd = new OutputTag\u003cInteger\u003e(\"odd\"){};// 奇数\n        SingleOutputStreamOperator\u003cInteger\u003e outputstream = source.process(new ProcessFunction\u003cInteger, Integer\u003e() {\n            @Override\n            public void processElement(Integer value, Context ctx, Collector\u003cInteger\u003e out) throws Exception {\n                if (value % 2 == 0) {\n                    ctx.output(even, value);\n                } else {\n                    ctx.output(odd, value);\n                }\n            }\n        });\n        DataStream\u003cInteger\u003e stream = outputstream.getSideOutput(even);\n        OutputTag\u003cInteger\u003e lower = new OutputTag\u003cInteger\u003e(\"lower\"){};\n        SingleOutputStreamOperator\u003cInteger\u003e outputStream2 = stream.process(new ProcessFunction\u003cInteger, Integer\u003e() {\n            @Override\n            public void processElement(Integer value, Context ctx, Collector\u003cInteger\u003e out) throws Exception {\n                if (value \u003c 5) {\n                    ctx.output(lower, value);\n                }\n            }\n        });\n        DataStream\u003cInteger\u003e lowerfive = outputStream2.getSideOutput(lower);\n        lowerfive.print().setParallelism(1);\n      env.execute(\"StreamSideOutPut\");\n    }\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161953-3l1h9jf","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20230817161953-3l1h9jf","updated":"20230817161953"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"##### ","Properties":{"id":""}},{"Type":"NodeText","Data":"flink的分区规则：从图中即可看出区别"}]},{"ID":"20230817161954-l9vbrk1","Type":"NodeParagraph","Properties":{"id":"20230817161954-l9vbrk1","updated":"20230817161954"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"图片描述","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://img.mukewang.com/wiki/5f8062ad0948cce217880689.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230817161955-kzaxpfv","Type":"NodeParagraph","Properties":{"id":"20230817161955-kzaxpfv","updated":"20230817161955"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"图片描述","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://img.mukewang.com/wiki/5f8062bb09a0f3fa12660487.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230817161956-db1jz3v","Type":"NodeParagraph","Properties":{"id":"20230817161956-db1jz3v","updated":"20230817161956"},"Children":[{"Type":"NodeText","Data":"代码："}]},{"ID":"20230817161957-topqj9o","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161957-topqj9o","updated":"20230817161957"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package com.pyy.flink.stream\nimport org.apache.flink.api.scala._\nimport org.apache.flink.streaming.api.scala.{DataStream, StreamExecutionEnvironment}\nobject StreamPatitionOpScala {\n  def main(args: Array[String]): Unit = {\n    val env = StreamExecutionEnvironment.getExecutionEnvironment\n    val source = env.fromCollection(Array(1, 2, 3, 4, 5, 6))\n    //shuffle是随机分区 大概率保证每个分区都有数据\n//    shuffleOP(source)\n    //rebalance是全量分区 保证每个分区都有数据\n    //rebalance(source)\n    //broadcast是将所有数据给每个分区发送一份\n//    broadcast(source)\n    //不是全量分配的重分区 而是局部均匀\n\n//    rescale(source)\n//    customPartition(source)\n    env.execute(\"StreamPatitionOpScala\")\n  }\n\n  private def customPartition(source: DataStream[Int]) = {\n    source.map(num =\u003e num).setParallelism(2).\n      partitionCustom(new PartitionScala, num =\u003e num)\n      .print().setParallelism(4) //虽然并行度为4 但我们可以自定义并行度指定分区\n  }\n\n  private def broadcast(source: DataStream[Int]) = {\n    source.map(num =\u003e num).setParallelism(2).\n      broadcast.\n      print().setParallelism(4)\n  }\n\n  private def rescale(source: DataStream[Int]) = {\n    source.map(num =\u003e num).setParallelism(5).\n      rescale.\n      print().setParallelism(2)\n  }\n\n  private def rebalance(source: DataStream[Int]) = {\n    source.map(num =\u003e num).setParallelism(2).\n      rebalance.\n      print().setParallelism(4)\n  }\n\n  private def shuffleOP(source: DataStream[Int]) = {\n    source.map(num =\u003e num).setParallelism(2).\n      shuffle.\n      print().setParallelism(4)\n  }\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161958-aqbvfnz","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161958-aqbvfnz","updated":"20230817161958"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package com.pyy.flink.stream\n\nimport org.apache.flink.api.common.functions.Partitioner\n\nclass PartitionScala  extends  Partitioner[Int]{\n  override def partition(k: Int, numspartiton: Int): Int = {\n    if(k%2==0){\n      1\n    }else{\n      2\n    }\n  }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161959-79klvys","Type":"NodeParagraph","Properties":{"id":"20230817161959-79klvys","updated":"20230817161959"},"Children":[{"Type":"NodeText","Data":"java代码类似："}]},{"ID":"20230817161960-eqaqrd0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161960-eqaqrd0","updated":"20230817161960"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package com.pyy.flink.stream;\n\nimport org.apache.flink.api.common.functions.MapFunction;\nimport org.apache.flink.streaming.api.datastream.DataStreamSource;\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.Collections;\n\npublic class StreamPatition {\n    public static void main(String[] args) throws Exception {\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        DataStreamSource\u003cInteger\u003e source = env.fromCollection(Arrays.asList(1, 2, 3, 4, 5));\n//        shuffle(source);\n//        customPartition(source);\n        env.execute(\"StreamPatition\");\n\n\n    }\n\n    private static void customPartition(DataStreamSource\u003cInteger\u003e source) {\n        source.map(new MapFunction\u003cInteger, Integer\u003e() {\n            @Override\n            public Integer map(Integer integer) throws Exception {\n                return integer;\n            }\n        }).setParallelism(2).partitionCustom(new PartitionerJava(), num-\u003enum).\n                print().setParallelism(4);\n    }\n\n    private static void shuffle(DataStreamSource\u003cInteger\u003e source) {\n        source.map(new MapFunction\u003cInteger, Integer\u003e() {\n            @Override\n            public Integer map(Integer integer) throws Exception {\n                return integer;\n            }\n        }).setParallelism(2).shuffle().print().setParallelism(4);\n    }\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161961-9oax1h6","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230817161961-9oax1h6","updated":"20230817161961"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"DataSink"}]},{"ID":"20230817161962-sdnng4p","Type":"NodeParagraph","Properties":{"id":"20230817161962-sdnng4p","updated":"20230817161962"},"Children":[{"Type":"NodeText","Data":"自定义的sink"}]},{"ID":"20230817161963-rm0x126","Type":"NodeParagraph","Properties":{"id":"20230817161963-rm0x126","updated":"20230817161963"},"Children":[{"Type":"NodeText","Data":"mysqlsink 主要是实现了richsinkfunction 加了rich字段的会实现生命周期来处理链接 sink function主要是来处理业务逻辑"}]},{"ID":"20230817161964-l9d0t66","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161964-l9d0t66","updated":"20230817161964"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package com.pyy.flink.stream;\n\nimport com.pyy.flink.stream.utils.MysqlUtils;\nimport org.apache.flink.api.java.tuple.Tuple2;\nimport org.apache.flink.configuration.Configuration;\nimport org.apache.flink.streaming.api.functions.sink.RichSinkFunction;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\n\npublic class MysqlSinkFunction extends RichSinkFunction\u003cTuple2\u003cString,Double\u003e\u003e {\n    Connection connection;\n    PreparedStatement insertStatement;\n    PreparedStatement updateStatement;\n\n    @Override\n    public void open(Configuration parameters) throws Exception {\n         connection = MysqlUtils.getCon();\n         insertStatement=connection.prepareStatement(\"insert into tb_traffic(domain ,traffic) values(?,?)\");\n         updateStatement=connection.\n                 prepareStatement(\"update tb_traffic set traffic=? where domain=? \");\n\n    }\n\n    @Override\n    public void close() throws Exception {\n        super.close();\n        if(insertStatement!=null)insertStatement.close();\n        if(updateStatement!=null)updateStatement.close();\n        if(connection!=null)connection.close();\n    }\n\n    @Override\n    public void invoke(Tuple2\u003cString, Double\u003e value, Context context) throws Exception {\n        System.out.println(\"Domain:\"+value.f0+\"traffic:\"+value.f1);\n        updateStatement.setDouble(1,value.f1);\n        updateStatement.setString(2,value.f0);\n         updateStatement.execute();\n\n         if(updateStatement.getUpdateCount()==0){\n             System.out.println(\"updateStatement:\"+updateStatement.getUpdateCount());\n             insertStatement.setString(1,value.f0);\n             insertStatement.setDouble(2,value.f1);\n             insertStatement.execute();\n         }\n    }\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161965-tmy9a28","Type":"NodeParagraph","Properties":{"id":"20230817161965-tmy9a28","updated":"20230817161965"},"Children":[{"Type":"NodeText","Data":"自定义Redissink："}]},{"ID":"20230817161966-rcudh2n","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161966-rcudh2n","updated":"20230817161966"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package com.pyy.flink.stream;\n\nimport org.apache.flink.api.java.tuple.Tuple2;\nimport org.apache.flink.configuration.Configuration;\nimport org.apache.flink.streaming.api.functions.sink.RichSinkFunction;\nimport redis.clients.jedis.Jedis;\n\npublic class RedisSinkFunction extends RichSinkFunction\u003cTuple2\u003cString,Double\u003e\u003e {\n    private Jedis jedis;\n    @Override\n    public void open(Configuration parameters) throws Exception {\n        super.open(parameters);\n        jedis=new Jedis(\"192.168.93.103\",6379);\n    }\n\n    @Override\n    public void close() throws Exception {\n        super.close();\n        if(jedis!=null)jedis.close();\n    }\n\n    @Override\n    public void invoke(Tuple2\u003cString, Double\u003e value, Context context) throws Exception {\n        jedis.hset(\"traffic\",value.f0,value.f1+\"\");\n    }\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161967-ih2vr39","Type":"NodeParagraph","Properties":{"id":"20230817161967-ih2vr39","updated":"20230817161967"},"Children":[{"Type":"NodeText","Data":"主方法："}]},{"ID":"20230817161968-svvyq9d","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161968-svvyq9d","updated":"20230817161968"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public static void main(String[] args) throws Exception {\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n        DataStreamSource\u003cString\u003e source = env.readTextFile(\"data/access.log\");\n        SingleOutputStreamOperator\u003cAccess\u003e mapstream = source.map(new MapFunction\u003cString, Access\u003e() {\n            @Override\n            public Access map(String value) throws Exception {\n                String[] strings = value.split(\",\");\n                Long time = Long.parseLong(strings[0].trim());\n                String domain = strings[1].trim();\n                Double traffic = Double.parseDouble(strings[2].trim());\n                return new Access(time, domain, traffic);\n            }\n        }).keyBy(x -\u003e x.getDomain()).sum(\"traffic\");\n        SingleOutputStreamOperator\u003cTuple2\u003cString, Double\u003e\u003e trafficstream = mapstream.map(new MapFunction\u003cAccess, Tuple2\u003cString, Double\u003e\u003e() {\n            @Override\n            public Tuple2\u003cString, Double\u003e map(Access value) throws Exception {\n                return Tuple2.of(value.getDomain(), value.getTraffic());\n            }\n        });\n        trafficstream.addSink(new RedisSinkFunction());\n        env.execute(\"Test\");\n    }\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]}]}