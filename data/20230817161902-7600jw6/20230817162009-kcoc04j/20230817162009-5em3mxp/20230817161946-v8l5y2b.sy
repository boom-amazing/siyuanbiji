{"ID":"20230817161946-v8l5y2b","Spec":"1","Type":"NodeDocument","Properties":{"id":"20230817161946-v8l5y2b","title":"FlinkDataSetApi","updated":"20230817161946"},"Children":[{"ID":"20230817161947-tp30imc","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230817161947-tp30imc","updated":"20230817161947"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"FlinkDataSetApi"}]},{"ID":"20230817161948-k97em9w","Type":"NodeParagraph","Properties":{"id":"20230817161948-k97em9w","updated":"20230817161948"},"Children":[{"Type":"NodeText","Data":"source常见的就是读取hdfs的文件"}]},{"ID":"20230817161949-p1sz995","Type":"NodeParagraph","Properties":{"id":"20230817161949-p1sz995","updated":"20230817161949"},"Children":[{"Type":"NodeText","Data":"transformation算子"}]},{"ID":"20230817161950-mpwaof5","Type":"NodeParagraph","Properties":{"id":"20230817161950-mpwaof5","updated":"20230817161950"},"Children":[{"Type":"NodeText","Data":"1、mappartition"}]},{"ID":"20230817161951-uq83npr","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"c2NhbGE=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161951-uq83npr","updated":"20230817161951"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c2NhbGE=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package com.pyy.flink.batch\n\nimport org.apache.flink.api.scala.ExecutionEnvironment\n\nimport scala.collection.mutable.ListBuffer\n\nobject BatchMapPartitionOp {\n  def main(args: Array[String]): Unit = {\n    val env = ExecutionEnvironment.getExecutionEnvironment\n    import  org.apache.flink.api.scala._\n    val source=env.fromCollection(Array(\"hello you \",\"hello me\"))\n    //每次处理一个分区的数据 传入的是个迭代器 传出去是个list\n     source.mapPartition(it =\u003e {\n       //可以在这里创建数据库连接 提高效率\n       val res = ListBuffer[String]()\n       it.foreach(line=\u003e{\n         val words=line.split(\" \")\n         for(word\u003c-words){\n           res.append(word)\n         }\n       })\n       res\n       //这里关闭数据库连接\n     }\n     ).print()\n   //批处理这里不用写\n//    env.execute(\"BatchMapPartitionOp\")\n  }\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161952-1odt9n2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161952-1odt9n2","updated":"20230817161952"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package com.pyy.flink.batch;\n\nimport org.apache.flink.api.common.functions.MapPartitionFunction;\nimport org.apache.flink.api.java.ExecutionEnvironment;\nimport org.apache.flink.api.java.operators.DataSource;\nimport org.apache.flink.util.Collector;\n\nimport java.util.Arrays;\nimport java.util.Iterator;\n\npublic class BatchMappartitionJava {\n    public static void main(String[] args) {\n        ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n        DataSource\u003cString\u003e source = env.fromCollection(Arrays.asList(\"hello you\", \"hello me\"));\n        source.mapPartition(new MapPartitionFunction\u003cString, String\u003e() {\n            @Override\n            public void mapPartition(Iterable\u003cString\u003e values, Collector\u003cString\u003e out) throws Exception {\n                Iterator\u003cString\u003e it = values.iterator();\n              //这里可以创建链接\n                while(it.hasNext()){\n                    String next = it.next();\n                    String[] s = next.split(\" \");\n                    for(String str:s){\n                        out.collect(str);\n                    }\n                }\n                //这里可以关闭连接\n            }\n        });\n    }\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161953-o4eadsj","Type":"NodeParagraph","Properties":{"id":"20230817161953-o4eadsj","updated":"20230817161953"},"Children":[{"Type":"NodeText","Data":"join"}]},{"ID":"20230817161954-mcaigua","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161954-mcaigua","updated":"20230817161954"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package com.pyy.flink.batch\n\nimport org.apache.flink.api.scala.ExecutionEnvironment\nimport  org.apache.flink.api.scala._\nobject BatchJoinScala {\n  def main(args: Array[String]): Unit = {\n    val env = ExecutionEnvironment.getExecutionEnvironment\n    val source1 = env.fromCollection(Array((1, \"jack\"), (2, \"yom\"), (3, \"pyy\")))\n    val source2 = env.fromCollection(Array((1, \"bj\"), (2, \"sh\"), (4, \"gz\")))\n   source1.join(source2)\n      .where(0)//类似于On field a=field b\n      .equalTo(0){\n        (first,second)=\u003e{\n          (first._1,first._2,second._2)\n        }\n      }.print()\n  }\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161955-oywmh50","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161955-oywmh50","updated":"20230817161955"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package com.pyy.flink.batch;\n\nimport org.apache.flink.api.common.functions.JoinFunction;\nimport org.apache.flink.api.java.ExecutionEnvironment;\nimport org.apache.flink.api.java.operators.DataSource;\nimport org.apache.flink.api.java.operators.JoinOperator;\nimport org.apache.flink.api.java.tuple.Tuple2;\nimport org.apache.flink.api.java.tuple.Tuple3;\n\nimport java.util.ArrayList;\n\npublic class BatchJoinJava {\n    public static void main(String[] args) throws Exception {\n        ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n        ArrayList\u003cTuple2\u003cInteger, String\u003e\u003e arrayList = new ArrayList\u003c\u003e();\n        arrayList.add(new Tuple2\u003cInteger, String\u003e(1,\"jack\"));\n        arrayList.add(new Tuple2\u003cInteger, String\u003e(2,\"top\"));\n        arrayList.add(new Tuple2\u003cInteger, String\u003e(3,\"pyy\"));\n        DataSource\u003cTuple2\u003cInteger, String\u003e\u003e source = env.fromCollection(arrayList);\n        ArrayList\u003cTuple2\u003cInteger, String\u003e\u003e arrayList1 = new ArrayList\u003c\u003e();\n        arrayList1.add(new Tuple2\u003cInteger, String\u003e(1,\"sh\"));\n        arrayList1.add(new Tuple2\u003cInteger, String\u003e(2,\"bj\"));\n        arrayList1.add(new Tuple2\u003cInteger, String\u003e(4,\"gz\"));\n        DataSource\u003cTuple2\u003cInteger, String\u003e\u003e source1 = env.fromCollection(arrayList1);\n        JoinOperator.EquiJoin\u003cTuple2\u003cInteger, String\u003e, Tuple2\u003cInteger, String\u003e, Tuple3\u003cInteger, String, String\u003e\u003e ans = source.join(source1).\n                where(0).\n                equalTo(0).with(new JoinFunction\u003cTuple2\u003cInteger, String\u003e, Tuple2\u003cInteger, String\u003e, Tuple3\u003cInteger, String, String\u003e\u003e() {\n            @Override\n            public Tuple3\u003cInteger, String, String\u003e join(Tuple2\u003cInteger, String\u003e first, Tuple2\u003cInteger, String\u003e second) throws Exception {\n                return new Tuple3\u003c\u003e(first.f0, first.f1, second.f1);\n            }\n        });\n        ans.print();\n    }\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161956-c8fcvqj","Type":"NodeParagraph","Properties":{"id":"20230817161956-c8fcvqj","updated":"20230817161956"},"Children":[{"Type":"NodeText","Data":"outerjoin"}]},{"ID":"20230817161957-bmeuwm6","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"c2NhbGE=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161957-bmeuwm6","updated":"20230817161957"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c2NhbGE=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package com.pyy.flink.batch\n\nimport org.apache.flink.api.scala.ExecutionEnvironment\nimport org.apache.flink.api.scala._\n\nobject BatchOuterJoin {\n  def main(args: Array[String]): Unit = {\n    val env = ExecutionEnvironment.getExecutionEnvironment\n    val source1 = env.fromCollection(Array((1, \"jack\"), (2, \"yom\"), (3, \"pyy\")))\n    val source2 = env.fromCollection(Array((1, \"bj\"), (2, \"sh\"), (4, \"gz\")))\n    source1.leftOuterJoin(source2)\n      .where(0).equalTo(0) {\n      (first, second) =\u003e {\n        if (second == null) {\n          (first._1, first._2, null)\n        } else {\n          (first._1, first._2, second._2)\n        }\n      }\n    }.print()\n    println(\"--------------\")\n\n    source1.rightOuterJoin(source2)\n      .where(0).equalTo(0) {\n      (first, second) =\u003e {\n        if (first == null) {\n          (second._1, null,second._2)\n        } else {\n          (first._1, first._2, second._2)\n        }\n      }\n    }.print()\n  println(\"------------\")\n    source1.fullOuterJoin(source2)\n      .where(0).equalTo(0) {\n      (first, second) =\u003e {\n        if (first == null) {\n          (second._1, null,second._2)\n        } else if(second==null){\n          (first._1, first._2, null)\n        }else{\n          (first._1, first._2, second._2)\n        }\n      }\n    }.print()\n  }\n\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161958-e0uzyhv","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161958-e0uzyhv","updated":"20230817161958"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package com.pyy.flink.batch;\n\nimport org.apache.flink.api.common.functions.JoinFunction;\nimport org.apache.flink.api.java.ExecutionEnvironment;\nimport org.apache.flink.api.java.operators.DataSource;\nimport org.apache.flink.api.java.tuple.Tuple2;\nimport org.apache.flink.api.java.tuple.Tuple3;\n\nimport java.util.ArrayList;\n\npublic class OuterJoinJava {\n    public static void main(String[] args) throws Exception {\n        ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n        ArrayList\u003cTuple2\u003cInteger, String\u003e\u003e arrayList = new ArrayList\u003c\u003e();\n        arrayList.add(new Tuple2\u003cInteger, String\u003e(1,\"jack\"));\n        arrayList.add(new Tuple2\u003cInteger, String\u003e(2,\"top\"));\n        arrayList.add(new Tuple2\u003cInteger, String\u003e(3,\"pyy\"));\n        DataSource\u003cTuple2\u003cInteger, String\u003e\u003e source = env.fromCollection(arrayList);\n        ArrayList\u003cTuple2\u003cInteger, String\u003e\u003e arrayList1 = new ArrayList\u003c\u003e();\n        arrayList1.add(new Tuple2\u003cInteger, String\u003e(1,\"sh\"));\n        arrayList1.add(new Tuple2\u003cInteger, String\u003e(2,\"bj\"));\n        arrayList1.add(new Tuple2\u003cInteger, String\u003e(4,\"gz\"));\n        DataSource\u003cTuple2\u003cInteger, String\u003e\u003e source1 = env.fromCollection(arrayList1);\n\n        source.leftOuterJoin(source1).where(0).equalTo(0)\n                .with(new JoinFunction\u003cTuple2\u003cInteger, String\u003e, Tuple2\u003cInteger, String\u003e, Tuple3\u003cInteger,String,String\u003e\u003e() {\n                    @Override\n                    public Tuple3\u003cInteger, String, String\u003e join(Tuple2\u003cInteger, String\u003e first, Tuple2\u003cInteger, String\u003e second) throws Exception {\n                        if(second==null){\n                            return new Tuple3\u003c\u003e(first.f0,first.f1,null);\n                        }else{\n                            return new Tuple3\u003c\u003e(first.f0,first.f1,first.f1);\n                        }\n                    }\n                }).print();\n        System.out.println();\n    }\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161959-dadb8zx","Type":"NodeParagraph","Properties":{"id":"20230817161959-dadb8zx","updated":"20230817161959"},"Children":[{"Type":"NodeText","Data":"cross:"}]},{"ID":"20230817161960-8c8z2ae","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"c2NhbGE=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161960-8c8z2ae","updated":"20230817161960"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c2NhbGE=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"object BatchCross {\n  def main(args: Array[String]): Unit = {\n    val env = ExecutionEnvironment.getExecutionEnvironment\n    val source=env.fromCollection(Array(1,2))\n    val source1=env.fromCollection(Array('a','b'))\n    source.cross(source1).print()\n  }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161961-vx1b0ih","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161961-vx1b0ih","updated":"20230817161961"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package com.pyy.flink.batch;\n\nimport org.apache.flink.api.java.ExecutionEnvironment;\nimport org.apache.flink.api.java.operators.DataSource;\n\nimport java.util.Arrays;\n\npublic class BatchcrossJava {\n    public static void main(String[] args) throws Exception {\n        ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n        DataSource\u003cInteger\u003e source1 = env.fromCollection(Arrays.asList(1, 2));\n        DataSource\u003cCharacter\u003e source2 = env.fromCollection(Arrays.asList('a','b'));\n        source1.cross(source2).print();\n    }\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161962-hjcxwe6","Type":"NodeParagraph","Properties":{"id":"20230817161962-hjcxwe6","updated":"20230817161962"},"Children":[{"Type":"NodeText","Data":"first-n"}]},{"ID":"20230817161963-tj3iqb0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"c2NhbGE=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161963-tj3iqb0","updated":"20230817161963"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c2NhbGE=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package com.pyy.flink.batch\n\nimport org.apache.flink.api.common.operators.Order\nimport org.apache.flink.api.scala.ExecutionEnvironment\n\nimport scala.collection.mutable.ListBuffer\nimport org.apache.flink.api.scala._\nobject FristNScala {\n  //分组取topN\n  def main(args: Array[String]): Unit = {\n    val env = ExecutionEnvironment.getExecutionEnvironment\n     val data=ListBuffer[Tuple2[Int,String]]()\n    data.append((1,\"jack\"))\n    data.append((1,\"top\"))\n    data.append((1,\"pyy\"))\n    data.append((2,\"zx\"))\n    data.append((2,\"bf\"))\n    data.append((2,\"sdd\"))\n    val source = env.fromCollection(data)\n    source.groupBy(_._1).sortGroup(_._2,Order.DESCENDING).first(2).print()\n  }\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161964-lgnqc9i","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161964-lgnqc9i","updated":"20230817161964"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package com.pyy.flink.batch;\n\nimport org.apache.flink.api.common.operators.Order;\nimport org.apache.flink.api.java.ExecutionEnvironment;\nimport org.apache.flink.api.java.functions.KeySelector;\nimport org.apache.flink.api.java.operators.DataSource;\nimport org.apache.flink.api.java.tuple.Tuple2;\n\nimport java.util.ArrayList;\n\npublic class FirstNJava {\n    public static void main(String[] args) throws Exception {\n        ExecutionEnvironment env = ExecutionEnvironment.getExecutionEnvironment();\n        ArrayList\u003cTuple2\u003cInteger, String\u003e\u003e arr = new ArrayList\u003c\u003e();\n        arr.add(new Tuple2\u003c\u003e(1,\"jack\"));\n        arr.add(new Tuple2\u003c\u003e(1,\"b\"));\n        arr.add(new Tuple2\u003c\u003e(1,\"c\"));\n        arr.add(new Tuple2\u003c\u003e(2,\"ack\"));\n        arr.add(new Tuple2\u003c\u003e(2,\"ck\"));\n        arr.add(new Tuple2\u003c\u003e(2,\"k\"));\n\n        DataSource\u003cTuple2\u003cInteger, String\u003e\u003e source = env.fromCollection(arr);\n        source.groupBy(0).sortGroup(1,Order.DESCENDING).first(2).print();\n\n    }\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161965-k2u1xxs","Type":"NodeParagraph","Properties":{"id":"20230817161965-k2u1xxs","updated":"20230817161965"},"Children":[{"Type":"NodeText","Data":"DataSink"}]},{"ID":"20230817161966-dag0ojc","Type":"NodeParagraph","Properties":{"id":"20230817161966-dag0ojc","updated":"20230817161966"},"Children":[{"Type":"NodeText","Data":"writeastest"}]},{"ID":"20230817161967-qqd00w1","Type":"NodeParagraph","Properties":{"id":"20230817161967-qqd00w1","updated":"20230817161967"},"Children":[{"Type":"NodeText","Data":"writeascsv"}]},{"ID":"20230817161968-p0amw9d","Type":"NodeParagraph","Properties":{"id":"20230817161968-p0amw9d","updated":"20230817161968"},"Children":[{"Type":"NodeText","Data":"print"}]}]}