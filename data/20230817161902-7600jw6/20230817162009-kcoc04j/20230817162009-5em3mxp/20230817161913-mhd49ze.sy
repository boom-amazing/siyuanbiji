{"ID":"20230817161913-mhd49ze","Spec":"1","Type":"NodeDocument","Properties":{"id":"20230817161913-mhd49ze","title":"window2","updated":"20230817161913"},"Children":[{"ID":"20230817161914-qbrom40","Type":"NodeBlockquote","Properties":{"id":"20230817161914-qbrom40","updated":"20230817161914"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20230817161915-inna04y","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230817161915-inna04y","updated":"20230817161915"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"一、描述"}]},{"ID":"20230817161916-g8sdwfq","Type":"NodeParagraph","Properties":{"id":"20230817161916-g8sdwfq","updated":"20230817161916"},"Children":[{"Type":"NodeText","Data":"Window 是处理无限流的核心。Flink 认为 Batch 是 Streaming 的一个特例，所以 Flink 底层的引擎是一个流式引擎，在上面实现了流处理和批处理。"}]},{"ID":"20230817161917-gf6smmp","Type":"NodeParagraph","Properties":{"id":"20230817161917-gf6smmp","updated":"20230817161917"},"Children":[{"Type":"NodeText","Data":"而窗口（Window）就是从Streaming 到 batch 的一个桥梁。Flink 提供了非常完善的窗口机制，这是 Flink 最大的亮点之一（其他的亮点包括消息乱序处理和 Checkpoint 机制）"}]},{"ID":"20230817161918-azvi2x1","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230817161918-azvi2x1","updated":"20230817161918"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"二、窗口的生命周期"}]},{"ID":"20230817161919-66zz9gn","Type":"NodeParagraph","Properties":{"id":"20230817161919-66zz9gn","updated":"20230817161919"},"Children":[{"Type":"NodeText","Data":"窗口的生命周期，就是创建和销毁。"}]},{"ID":"20230817161920-5czalfq","Type":"NodeParagraph","Properties":{"id":"20230817161920-5czalfq","updated":"20230817161920"},"Children":[{"Type":"NodeText","Data":"窗口的开始时间和结束时间是基于自然时间创建的，比如指定一个5s的窗口，那么1分钟内就会创建12个窗口。"}]},{"ID":"20230817161921-ors2lf1","Type":"NodeParagraph","Properties":{"id":"20230817161921-ors2lf1","updated":"20230817161921"},"Children":[{"Type":"NodeText","Data":"什么时候窗口会被创建？当第一个元素进入到窗口开始时间的时候，这个窗口就被创建了。"}]},{"ID":"20230817161922-bbf042q","Type":"NodeParagraph","Properties":{"id":"20230817161922-bbf042q","updated":"20230817161922"},"Children":[{"Type":"NodeText","Data":"什么时候窗口会被销毁？当时间（ProcessTime、EventTime或者 IngestionTime）越过了窗口的结束时间，再加上用户自定义的窗口延迟时间（allowed lateness），窗口就会被销毁。"}]},{"ID":"20230817161923-59fskw2","Type":"NodeParagraph","Properties":{"id":"20230817161923-59fskw2","updated":"20230817161923"},"Children":[{"Type":"NodeText","Data":"举个例子来说，假设我们定义了一个基于事件时间的窗口，长度是5分钟，并且允许有1分钟的延迟。"}]},{"ID":"20230817161924-di01m41","Type":"NodeParagraph","Properties":{"id":"20230817161924-di01m41","updated":"20230817161924"},"Children":[{"Type":"NodeText","Data":"当第一个元素包含了一个12:00的事件时间进来时，Flink会创建一个12:00 到 12:05 的窗口；在水位到 12:06 的时候，会销毁这个窗口。"}]},{"ID":"20230817161925-89tg90b","Type":"NodeParagraph","Properties":{"id":"20230817161925-89tg90b","updated":"20230817161925"},"Children":[{"Type":"NodeText","Data":"每个窗口都会绑定一个触发器和一个执行函数。触发器定义了何时会触发窗口的执行函数的计算"}]},{"ID":"20230817161926-taefvye","Type":"NodeParagraph","Properties":{"id":"20230817161926-taefvye","updated":"20230817161926"},"Children":[{"Type":"NodeText","Data":"，比如在窗口元素数量大于等于4的时候，或者水位经过了窗口结束时间的时候。"}]},{"ID":"20230817161927-uez66e1","Type":"NodeParagraph","Properties":{"id":"20230817161927-uez66e1","updated":"20230817161927"},"Children":[{"Type":"NodeText","Data":"另外，每个窗口可以指定 驱逐器（Evictor），它的作用是在触发器触发后，执行函数执行前，移除一些元素。"}]},{"ID":"20230817161928-3x0ruki","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230817161928-3x0ruki","updated":"20230817161928"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"三、Keyed 和 Non-keyed Window"}]},{"ID":"20230817161929-rqd1u06","Type":"NodeParagraph","Properties":{"id":"20230817161929-rqd1u06","updated":"20230817161929"},"Children":[{"Type":"NodeText","Data":"在定义窗口之前，首先要指定你的流是否应该被分区，使用 keyBy(...) 后，相同的 key 会被划分到不同的流里面，每个流可以被一个单独的 task 处理。如果 不使用 keyBy ，所有数据会被划分到一个窗口里，只有一个task处理，并行度是1."}]},{"ID":"20230817161930-ryeguz0","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230817161930-ryeguz0","updated":"20230817161930"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"四、窗口的分类和选择"}]},{"ID":"20230817161931-5f86xlt","Type":"NodeParagraph","Properties":{"id":"20230817161931-5f86xlt","updated":"20230817161931"},"Children":[{"Type":"NodeText","Data":"在指定了数据流是否分区之后，下一步是要去指定窗口的类型。窗口分配器（window assigner）定义了元素如何划分到不同的窗口中。"}]},{"ID":"20230817161932-d9sxqif","Type":"NodeParagraph","Properties":{"id":"20230817161932-d9sxqif","updated":"20230817161932"},"Children":[{"Type":"NodeText","Data":"对于 keyed Streams，使用 window （...） 来定义，对于 非 keyed Streams，使用 windowAll（...）来定义。"}]},{"ID":"20230817161933-kfe3dw7","Type":"NodeParagraph","Properties":{"id":"20230817161933-kfe3dw7","updated":"20230817161933"},"Children":[{"Type":"NodeText","Data":"Flink 预定义了很多种窗口类型，可以满足大多数日常使用需求：tumbling windows（翻滚窗口）, sliding windows（滑动窗口）, session windows（会话窗口） and global windows（全局窗口）。"}]},{"ID":"20230817161934-8rgjqhu","Type":"NodeParagraph","Properties":{"id":"20230817161934-8rgjqhu","updated":"20230817161934"},"Children":[{"Type":"NodeText","Data":"所有内置的窗口（除了全局窗口）都是基于时间（ProcessTime或 EventTime）的。"}]},{"ID":"20230817161935-15y0wqe","Type":"NodeParagraph","Properties":{"id":"20230817161935-15y0wqe","updated":"20230817161935"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"1、Tumbling Windows"}]},{"ID":"20230817161936-5qpxeee","Type":"NodeParagraph","Properties":{"id":"20230817161936-5qpxeee","updated":"20230817161936"},"Children":[{"Type":"NodeText","Data":"翻滚窗口有一个固定的长度，并且不会重复。比如，下图是指定了一个5分钟的翻滚窗口的样子："}]},{"ID":"20230817161937-l4y1c1f","Type":"NodeParagraph","Properties":{"id":"20230817161937-l4y1c1f","updated":"20230817161937"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"img","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://ask.qcloudimg.com/http-save/6430184/ao609opyy9.png?imageView2/2/w/1620","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230817161938-h8goe20","Type":"NodeParagraph","Properties":{"id":"20230817161938-h8goe20","updated":"20230817161938"},"Children":[{"Type":"NodeText","Data":"（每个窗口都不重叠，每5分钟一个窗口）"}]},{"ID":"20230817161939-balzuwy","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YXNjcmlwdA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161939-balzuwy","updated":"20230817161939"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YXNjcmlwdA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 例子1：tumbling event-time windows\n// 定义一个数据流\nval input: DataStream[T] = ...\n// 这里的 key selector，如果是元组的化，可以使用_._1，如果是case class 可以使用字段名来指定\ninput\n    .keyBy(\u003ckey selector\u003e)\n// 指定了一个TumblingEventTimeWindows，窗口大小为5分钟\n    .window(TumblingEventTimeWindows.of(Time.seconds(5)))\n// 窗口的操作\n    .\u003cwindowed transformation\u003e(\u003cwindow function\u003e)\n\n// 例子2：tumbling processing-time windows\ninput\n    .keyBy(\u003ckey selector\u003e)\n    .window(TumblingProcessingTimeWindows.of(Time.seconds(5)))\n    .\u003cwindowed transformation\u003e(\u003cwindow function\u003e)\n\n// 例子3：daily tumbling event-time windows offset by -8 hours.\n// \ninput\n    .keyBy(\u003ckey selector\u003e)\n    .window(TumblingEventTimeWindows.of(Time.days(1), Time.hours(-8)))\n    .\u003cwindowed transformation\u003e(\u003cwindow function\u003e)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161940-jmx3iy6","Type":"NodeParagraph","Properties":{"id":"20230817161940-jmx3iy6","updated":"20230817161940"},"Children":[{"Type":"NodeText","Data":"复制"}]},{"ID":"20230817161941-ywxqy1n","Type":"NodeParagraph","Properties":{"id":"20230817161941-ywxqy1n","updated":"20230817161941"},"Children":[{"Type":"NodeText","Data":"在例子3中，TumblingEventTimeWindows.of 指定了第二个参数 offset，它的作用是改变窗口的时间。"}]},{"ID":"20230817161942-87j30to","Type":"NodeParagraph","Properties":{"id":"20230817161942-87j30to","updated":"20230817161942"},"Children":[{"Type":"NodeText","Data":"如果我们指定了一个15分钟的窗口，那么每个小时内，每个窗口的开始时间和结束时间为："}]},{"ID":"20230817161943-hbg7twe","Type":"NodeParagraph","Properties":{"id":"20230817161943-hbg7twe","updated":"20230817161943"},"Children":[{"Type":"NodeText","Data":"[00:00,00:15)"}]},{"ID":"20230817161944-f5gn548","Type":"NodeParagraph","Properties":{"id":"20230817161944-f5gn548","updated":"20230817161944"},"Children":[{"Type":"NodeText","Data":"[00:15,00:30)"}]},{"ID":"20230817161945-3puoh3r","Type":"NodeParagraph","Properties":{"id":"20230817161945-3puoh3r","updated":"20230817161945"},"Children":[{"Type":"NodeText","Data":"[00:30,00:45)"}]},{"ID":"20230817161946-yo8lw74","Type":"NodeParagraph","Properties":{"id":"20230817161946-yo8lw74","updated":"20230817161946"},"Children":[{"Type":"NodeText","Data":"[00:45,01:00)"}]},{"ID":"20230817161947-7g743q9","Type":"NodeParagraph","Properties":{"id":"20230817161947-7g743q9","updated":"20230817161947"},"Children":[{"Type":"NodeText","Data":"如果我们指定了一个5分钟的offset，那么每个窗口的开始时间和结束时间为："}]},{"ID":"20230817161948-m14fg5y","Type":"NodeParagraph","Properties":{"id":"20230817161948-m14fg5y","updated":"20230817161948"},"Children":[{"Type":"NodeText","Data":"[00:05,00:20)"}]},{"ID":"20230817161949-netso9q","Type":"NodeParagraph","Properties":{"id":"20230817161949-netso9q","updated":"20230817161949"},"Children":[{"Type":"NodeText","Data":"[00:20,00:35)"}]},{"ID":"20230817161950-60ttpru","Type":"NodeParagraph","Properties":{"id":"20230817161950-60ttpru","updated":"20230817161950"},"Children":[{"Type":"NodeText","Data":"[00:35,00:50)"}]},{"ID":"20230817161951-xtpew90","Type":"NodeParagraph","Properties":{"id":"20230817161951-xtpew90","updated":"20230817161951"},"Children":[{"Type":"NodeText","Data":"[00:50,01:05)"}]},{"ID":"20230817161952-erlr178","Type":"NodeParagraph","Properties":{"id":"20230817161952-erlr178","updated":"20230817161952"},"Children":[{"Type":"NodeText","Data":"一个实际的应用场景是，我们可以使用 offset 使我们的时区以0时区为准。比如我们生活在中国，时区是"}]},{"ID":"20230817161953-qoal3wu","Type":"NodeParagraph","Properties":{"id":"20230817161953-qoal3wu","updated":"20230817161953"},"Children":[{"Type":"NodeText","Data":"UTC+08:00，可以指定一个 Time.hour(-8)，使时间以0时区为准。"}]},{"ID":"20230817161954-imaemkh","Type":"NodeParagraph","Properties":{"id":"20230817161954-imaemkh","updated":"20230817161954"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"2、Slidding Windows"}]},{"ID":"20230817161955-2uhjils","Type":"NodeParagraph","Properties":{"id":"20230817161955-2uhjils","updated":"20230817161955"},"Children":[{"Type":"NodeText","Data":"滑动窗口指定了两个参数，第一个参数是窗口大小，第二个参数控制了新的窗口开始的频率。"}]},{"ID":"20230817161956-v02a6x0","Type":"NodeParagraph","Properties":{"id":"20230817161956-v02a6x0","updated":"20230817161956"},"Children":[{"Type":"NodeText","Data":"如果 滑动距离小于窗口距离的话，那么一个元素可能被分配到多个窗口中。"}]},{"ID":"20230817161957-zei4bhh","Type":"NodeParagraph","Properties":{"id":"20230817161957-zei4bhh","updated":"20230817161957"},"Children":[{"Type":"NodeText","Data":"比如，窗口大小10分钟，每5分钟滑动一次，如下图："}]},{"ID":"20230817161958-icf77k7","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YXNjcmlwdA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161958-icf77k7","updated":"20230817161958"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YXNjcmlwdA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"val input: DataStream[T] = ...\n\n// 例子1：sliding event-time windows\ninput\n    .keyBy(\u003ckey selector\u003e)\n    .window(SlidingEventTimeWindows.of(Time.seconds(10), Time.seconds(5)))\n    .\u003cwindowed transformation\u003e(\u003cwindow function\u003e)\n\n// 例子2：sliding processing-time windows\ninput\n    .keyBy(\u003ckey selector\u003e)\n    .window(SlidingProcessingTimeWindows.of(Time.seconds(10), Time.seconds(5)))\n    .\u003cwindowed transformation\u003e(\u003cwindow function\u003e)\n\n// 例子3，sliding processing-time windows offset by -8 hours\ninput\n    .keyBy(\u003ckey selector\u003e)\n    .window(SlidingProcessingTimeWindows.of(Time.hours(12), Time.hours(1), Time.hours(-8)))\n    .\u003cwindowed transformation\u003e(\u003cwindow function\u003e)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161959-227x3az","Type":"NodeParagraph","Properties":{"id":"20230817161959-227x3az","updated":"20230817161959"},"Children":[{"Type":"NodeText","Data":"复制"}]},{"ID":"20230817161960-d4n9kha","Type":"NodeParagraph","Properties":{"id":"20230817161960-d4n9kha","updated":"20230817161960"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"3、Session Windows"}]},{"ID":"20230817161961-1jx319n","Type":"NodeParagraph","Properties":{"id":"20230817161961-1jx319n","updated":"20230817161961"},"Children":[{"Type":"NodeText","Data":"会话窗口根据会话的间隔来把数据分配到不同的窗口。"}]},{"ID":"20230817161962-th9883m","Type":"NodeParagraph","Properties":{"id":"20230817161962-th9883m","updated":"20230817161962"},"Children":[{"Type":"NodeText","Data":"会话窗口不重叠，没有固定的开始时间和结束时间。"}]},{"ID":"20230817161963-ceqgh0t","Type":"NodeParagraph","Properties":{"id":"20230817161963-ceqgh0t","updated":"20230817161963"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"比如音乐 app 听歌的场景，我们想统计一个用户在一个独立的 session 中听了多久的歌曲（如果超过15分钟没听歌，那么就是一个新的 session 了）"}]},{"ID":"20230817161964-je09cxi","Type":"NodeParagraph","Properties":{"id":"20230817161964-je09cxi","updated":"20230817161964"},"Children":[{"Type":"NodeText","Data":"我们可以用 spark Streaming ，每一个小时进行一次批处理，计算用户session的数据分布，但是 spark Streaming 没有内置对 session 的支持，我们只能手工写代码来维护每个 user 的 session 状态，里面仍然会有诸多的问题。"}]},{"ID":"20230817161965-zcqaxwn","Type":"NodeParagraph","Properties":{"id":"20230817161965-zcqaxwn","updated":"20230817161965"},"Children":[{"Type":"NodeText","Data":"下一次会单独写一篇文章来讨论，如何使用flink 的 session window 来实现这个问题"}]},{"ID":"20230817161966-boppo58","Type":"NodeParagraph","Properties":{"id":"20230817161966-boppo58","updated":"20230817161966"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"4、Global Windows"}]},{"ID":"20230817161967-8ujsrwu","Type":"NodeParagraph","Properties":{"id":"20230817161967-8ujsrwu","updated":"20230817161967"},"Children":[{"Type":"NodeText","Data":"全局 window 把所有相同 key 的数据，放到一个 window 来，它没有自然的窗口结束时间，所以我们需要自己指定触发器"}]},{"ID":"20230817161968-osu8okd","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YXNjcmlwdA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161968-osu8okd","updated":"20230817161968"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YXNjcmlwdA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"val input: DataStream[T] = ...\n\ninput\n    .keyBy(\u003ckey selector\u003e)\n    .window(GlobalWindows.create())\n    .\u003cwindowed transformation\u003e(\u003cwindow function\u003e)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]}]}]}