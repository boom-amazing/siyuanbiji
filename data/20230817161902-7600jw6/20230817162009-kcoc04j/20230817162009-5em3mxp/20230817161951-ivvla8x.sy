{"ID":"20230817161951-ivvla8x","Spec":"1","Type":"NodeDocument","Properties":{"id":"20230817161951-ivvla8x","title":"FlinkTable\u0026amp;Sql","updated":"20230817161951"},"Children":[{"ID":"20230817161952-oqycbz8","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230817161952-oqycbz8","updated":"20230817161952"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"FlinkTable\u0026Sql"}]},{"ID":"20230817161953-vco530k","Type":"NodeParagraph","Properties":{"id":"20230817161953-vco530k","updated":"20230817161953"},"Children":[{"Type":"NodeText","Data":"1、执行环境创建方式"}]},{"ID":"20230817161954-j7lzbb6","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"c2NhbGE=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161954-j7lzbb6","updated":"20230817161954"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c2NhbGE=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package com.pyy.flink.table\n\nimport org.apache.flink.api.scala.ExecutionEnvironment\nimport org.apache.flink.streaming.api.scala.StreamExecutionEnvironment\nimport org.apache.flink.table.api.bridge.scala.{BatchTableEnvironment, StreamTableEnvironment}\nimport org.apache.flink.table.api.{EnvironmentSettings, TableEnvironment}\n\n/**\n * 创建tableEnvrionment\n */\nobject CreateTableEnvScala {\n  def main(args: Array[String]): Unit = {\n    //指定底层引擎为blink 流处理\n    val sSettings = EnvironmentSettings.newInstance().useBlinkPlanner().inStreamingMode().build()\n    val stableenv = TableEnvironment.create(sSettings)\n    //批处理 前提是不需要和dataset转换\n    val bSettings = EnvironmentSettings.newInstance().useBlinkPlanner().inBatchMode().build()\n    val btableenv = TableEnvironment.create(sSettings)\n  \n  //如果需要相互转换 \n    //流处理\n    val ssenv = StreamExecutionEnvironment.getExecutionEnvironment\n    val ssSettings = EnvironmentSettings.newInstance().useBlinkPlanner().inStreamingMode().build()\n    val streamTabEnv = StreamTableEnvironment.create(ssenv, ssSettings)\n  \n    //批处理\n    val benv = ExecutionEnvironment.getExecutionEnvironment\n    val bbTableEnv = BatchTableEnvironment.create(benv)\n  }\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161955-05c2rbl","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161955-05c2rbl","updated":"20230817161955"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package com.pyy.flink.table;\n\nimport org.apache.flink.api.java.ExecutionEnvironment;\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\nimport org.apache.flink.table.api.EnvironmentSettings;\nimport org.apache.flink.table.api.TableEnvironment;\nimport org.apache.flink.table.api.bridge.java.BatchTableEnvironment;\nimport org.apache.flink.table.api.bridge.java.StreamTableEnvironment;\n\npublic class CreateTableEnvJava {\n    public static void main(String[] args) {\n        EnvironmentSettings settings = EnvironmentSettings.newInstance().useBlinkPlanner().inStreamingMode().build();\n        TableEnvironment tableEnv = TableEnvironment.create(settings);\n\n        EnvironmentSettings bsettings = EnvironmentSettings.newInstance().useBlinkPlanner().\n                inBatchMode().build();\n        TableEnvironment btableEnv = TableEnvironment.create(bsettings);\n\n\n        StreamExecutionEnvironment ssenv = StreamExecutionEnvironment.getExecutionEnvironment();\n        StreamTableEnvironment streamTabEnv = StreamTableEnvironment.create(ssenv, settings);\n\n        ExecutionEnvironment  bbenv= ExecutionEnvironment.getExecutionEnvironment();\n        BatchTableEnvironment batchTabEnv = BatchTableEnvironment.create(bbenv);\n    }\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161956-clpvqyc","Type":"NodeParagraph","Properties":{"id":"20230817161956-clpvqyc","updated":"20230817161956"},"Children":[{"Type":"NodeText","Data":"2、table and sql用法"}]},{"ID":"20230817161957-33msih0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"c2NhbGE=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161957-33msih0","updated":"20230817161957"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c2NhbGE=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package com.pyy.flink.table\n\nimport org.apache.flink.table.api.{EnvironmentSettings, TableEnvironment}\nimport org.apache.flink.table.api._\n\nobject TableApiandSqlUse {\n  def main(args: Array[String]): Unit = {\n    val sSettings = EnvironmentSettings.newInstance().useBlinkPlanner().inStreamingMode().build()\n    val stableenv = TableEnvironment.create(sSettings)\n    //创建输入表\n    stableenv.executeSql(\"\" +\n      \"create table myTable(\\n\" +\n      \"id int,\\n\" +\n      \"name string\\n\" +\n      \") with(\\n\" +\n      \"'connector.type' = 'filesystem',\\n\" +\n      \"'connector.path' = 'E:\\\\source.txt',\\n\" +\n      \"'format.type' = 'csv'\\n\" +\n      \")\")\n    //    val result = stableenv.from(\"myTable\").select($\"id\", $\"name\")\n    //      .filter($\"id\" \u003e 1)\n    //     result.execute().print()\n    val result = stableenv.sqlQuery(\"select id,name from myTable where id \u003e1\")\n//    result.execute().print()\n    //创建输出表保存数据\n    stableenv.executeSql(\"\" +\n      \"create table newTable(\\n\" +\n      \"id int,\\n\" +\n      \"name string\\n\" +\n      \") with(\\n\" +\n      \"'connector.type' = 'filesystem',\\n\" +\n      \"'connector.path' = 'E:\\\\res',\\n\" +\n      \"'format.type' = 'csv'\\n\" +\n      \")\")\n    result.executeInsert(\"newTable\")\n  }\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161958-nk2zryi","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161958-nk2zryi","updated":"20230817161958"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package com.pyy.flink.table;\n\nimport org.apache.flink.table.api.EnvironmentSettings;\nimport org.apache.flink.table.api.Table;\nimport org.apache.flink.table.api.TableEnvironment;\n\nimport static org.apache.flink.table.api.Expressions.$;\n\npublic class TableApiandSqlJava {\n    public static void main(String[] args) {\n        EnvironmentSettings bsettings = EnvironmentSettings.newInstance().useBlinkPlanner().\n                inBatchMode().build();\n        TableEnvironment btableEnv = TableEnvironment.create(bsettings);\n        btableEnv.executeSql(\"\" +\n                \"create table myTable(\\n\" +\n                \"id int,\\n\" +\n                \"name string\\n\" +\n                \") with(\\n\" +\n                \"'connector.type' = 'filesystem',\\n\" +\n                \"'connector.path' = 'E:\\\\source.txt',\\n\" +\n                \"'format.type' = 'csv'\\n\" +\n                \")\");\n//        Table res = btableEnv.from(\"myTable\")\n//                .select($(\"id\"), $(\"name\"))\n//                .filter($(\"id\").isGreater(1));\n//        res.execute().print();\n\n        Table res = btableEnv.sqlQuery(\"select id,name from myTable where id \u003e1\");\n        btableEnv.executeSql(\"\" +\n                \"create table newTable(\\n\" +\n                \"id int,\\n\" +\n                \"name string\\n\" +\n                \") with(\\n\" +\n                \"'connector.type' = 'filesystem',\\n\" +\n                \"'connector.path' = 'E:\\\\res1',\\n\" +\n                \"'format.type' = 'csv'\\n\" +\n                \")\");\n        res.executeInsert(\"newTable\");\n\n    }\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161959-h5qhonq","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230817161959-h5qhonq","updated":"20230817161959"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Datastream、Dataset和Table的相互转换"}]},{"ID":"20230817161960-08760na","Type":"NodeParagraph","Properties":{"id":"20230817161960-08760na","updated":"20230817161960"},"Children":[{"Type":"NodeText","Data":"1、使用datastream 创建视图"}]},{"ID":"20230817161961-c6e2w5r","Type":"NodeParagraph","Properties":{"id":"20230817161961-c6e2w5r","updated":"20230817161961"},"Children":[{"Type":"NodeText","Data":"2、使用datastream创建table对象"}]},{"ID":"20230817161962-9fz8sk4","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"c2NhbGE=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161962-9fz8sk4","updated":"20230817161962"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c2NhbGE=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package com.pyy.flink.table\n\nimport org.apache.flink.streaming.api.scala.StreamExecutionEnvironment\nimport org.apache.flink.table.api.bridge.scala.StreamTableEnvironment\nimport org.apache.flink.table.api.{EnvironmentSettings, TableEnvironment}\nimport org.apache.flink.table.api._\n\nobject DataStreamToTableScala {\n  def main(args: Array[String]): Unit = {\n    val ssenv = StreamExecutionEnvironment.getExecutionEnvironment\n    val ssSettings = EnvironmentSettings.newInstance().useBlinkPlanner().inStreamingMode().build()\n    val streamTabEnv = StreamTableEnvironment.create(ssenv, ssSettings)\n    import org.apache.flink.api.scala._\n    val datastream = ssenv.fromCollection(Array((1, \"jack\"), (2, \"tom\"), (3, \"mack\")))\n\n//    streamTabEnv.createTemporaryView(\"mytable\", datastream, $\"id\", $\"name\")\n//    streamTabEnv.sqlQuery(\"select * from mytable where id\u003e1\").execute().print()\n\n    //将datastream转化为Table对象\n    val table = streamTabEnv.fromDataStream(datastream, $\"id\", $\"name\")\n    table.select($\"id\",$\"name\").filter($\"id\"\u003e1).execute().print()\n\n  }\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161963-2hl81fj","Type":"NodeParagraph","Properties":{"id":"20230817161963-2hl81fj","updated":"20230817161963"},"Children":[{"Type":"NodeText","Data":"dataset转table"}]},{"ID":"20230817161964-8fe1pym","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"c2NhbGE=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161964-8fe1pym","updated":"20230817161964"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c2NhbGE=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package com.pyy.flink.table\n\nimport org.apache.flink.api.scala.ExecutionEnvironment\nimport org.apache.flink.table.api.bridge.scala.BatchTableEnvironment\n\nobject DataSetToTableScala {\n  def main(args: Array[String]): Unit = {\n    val benv = ExecutionEnvironment.getExecutionEnvironment\n    val bbTableEnv = BatchTableEnvironment.create(benv)\n    import org.apache.flink.api.scala._\n    val dataset=benv.fromCollection(Array((1,\"jack\"),(2,\"tom\"),(3,\"pyy\")))\n    import org.apache.flink.table.api._\n    bbTableEnv.createTemporaryView(\"mytable\",dataset,'id,'name)\n    bbTableEnv.sqlQuery(\"select * from mytable\").execute().print()\n  }\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161965-us1y67e","Type":"NodeParagraph","Properties":{"id":"20230817161965-us1y67e","updated":"20230817161965"},"Children":[{"Type":"NodeText","Data":"table转stream"}]},{"ID":"20230817161966-3cfhuz7","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"c2NhbGE=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161966-3cfhuz7","updated":"20230817161966"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c2NhbGE=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package com.pyy.flink.table\n\nimport org.apache.flink.streaming.api.scala.StreamExecutionEnvironment\nimport org.apache.flink.table.api.EnvironmentSettings\nimport org.apache.flink.table.api.bridge.scala.StreamTableEnvironment\nimport org.apache.flink.types.Row\n\nobject TableToStream {\n  def main(args: Array[String]): Unit = {\n    val ssenv = StreamExecutionEnvironment.getExecutionEnvironment\n    val ssSettings = EnvironmentSettings.newInstance().useBlinkPlanner().inStreamingMode().build()\n    val streamTabEnv = StreamTableEnvironment.create(ssenv, ssSettings)\n\n    streamTabEnv.executeSql(\"\" +\n      \"create table myTable(\\n\" +\n      \"id int,\\n\" +\n      \"name string\\n\" +\n      \") with(\\n\" +\n      \"'connector.type' = 'filesystem',\\n\" +\n      \"'connector.path' = 'E:\\\\source.txt',\\n\" +\n      \"'format.type' = 'csv'\\n\" +\n      \")\")\n    val table = streamTabEnv.from(\"myTable\")\n    //将table转换为datastream\n    import org.apache.flink.api.scala._\n    //只能显示增加\n    val appstream = streamTabEnv.toAppendStream[Row](table)\n    appstream.map(row=\u003e(row.getField(0).toString.toInt,row.getField(1).toString))\n      .print()\n\n    //还能显示删除\n    val retStream = streamTabEnv.toRetractStream[Row](table)\n    retStream.map(tup=\u003e\n    {\n      val falg=tup._1\n      val fi=tup._2\n      val id = fi.getField(0).toString.toInt\n      val name = fi.getField(1).toString\n      (falg,id,name)\n    }).print()\n\n    ssenv.execute(\"TableToStream\")\n  }\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161967-9xq9nqi","Type":"NodeParagraph","Properties":{"id":"20230817161967-9xq9nqi","updated":"20230817161967"},"Children":[{"Type":"NodeText","Data":"表转换为dataset"}]},{"ID":"20230817161968-kgc6wfn","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"c2NhbGE=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161968-kgc6wfn","updated":"20230817161968"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c2NhbGE=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package com.pyy.flink.table\n\nimport org.apache.flink.api.scala.ExecutionEnvironment\nimport org.apache.flink.table.api.bridge.scala.BatchTableEnvironment\nimport org.apache.flink.types.Row\n\nobject TabletoDataSetScala {\n  def main(args: Array[String]): Unit = {\n    val benv = ExecutionEnvironment.getExecutionEnvironment\n    val bbTableEnv = BatchTableEnvironment.create(benv)\n    bbTableEnv.executeSql(\"\" +\n      \"create table myTable(\\n\" +\n      \"id int,\\n\" +\n      \"name string\\n\" +\n      \") with(\\n\" +\n      \"'connector.type' = 'filesystem',\\n\" +\n      \"'connector.path' = 'E:\\\\source.txt',\\n\" +\n      \"'format.type' = 'csv'\\n\" +\n      \")\")\n    val table = bbTableEnv.from(\"myTable\")\n    import org.apache.flink.api.scala._\n    val set = bbTableEnv.toDataSet[Row](table)\n    set.map(row=\u003e(row.getField(0).toString.toInt,row.getField(1).toString)).print()\n\n  }\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]}]}