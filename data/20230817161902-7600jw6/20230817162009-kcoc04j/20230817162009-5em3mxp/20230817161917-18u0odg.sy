{"ID":"20230817161917-18u0odg","Spec":"1","Type":"NodeDocument","Properties":{"id":"20230817161917-18u0odg","title":"State篇","updated":"20230817161917"},"Children":[{"ID":"20230817161918-c79frlt","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230817161918-c79frlt","updated":"20230817161918"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"State篇"}]},{"ID":"20230817161919-e9cx0zx","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230817161919-e9cx0zx","updated":"20230817161919"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"state概念"}]},{"ID":"20230817161920-g7tilsy","Type":"NodeParagraph","Properties":{"id":"20230817161920-g7tilsy","updated":"20230817161920"},"Children":[{"Type":"NodeText","Data":"在实时计算中"}]},{"ID":"20230817161921-hrd19hh","Type":"NodeParagraph","Properties":{"id":"20230817161921-hrd19hh","updated":"20230817161921"},"Children":[{"Type":"NodeText","Data":"flink中的state通俗来讲就是后面批次的计算结果依赖于前面批次 所以是有状态的"}]},{"ID":"20230817161922-nh5zvgy","Type":"NodeParagraph","Properties":{"id":"20230817161922-nh5zvgy","updated":"20230817161922"},"Children":[{"Type":"NodeText","Data":"而对于离线计算 不同批次间没有直接的联系 可以分开处理 所以是无状态的"}]},{"ID":"20230817161923-52tksdf","Type":"NodeParagraph","Properties":{"id":"20230817161923-52tksdf","updated":"20230817161923"},"Children":[{"Type":"NodeText","Data":"实时处理的过程应该为："}]},{"ID":"20230817161924-1g11r0y","Type":"NodeParagraph","Properties":{"id":"20230817161924-1g11r0y","updated":"20230817161924"},"Children":[{"Type":"NodeText","Data":"接收数据==\u003etask（1、获取状态 --计算数据-\u003e 2、更新状态） ==\u003e输出"}]},{"ID":"20230817161925-cmbiher","Type":"NodeParagraph","Properties":{"id":"20230817161925-cmbiher","updated":"20230817161925"},"Children":[{"Type":"NodeText","Data":"如果数据计算过程中 机器挂了 或者代码不健壮 那么这个时候就需要有一种机制能够记录当前的状态 然后在下次重启的时候能够继续从之前挂掉的offset继续消费 这种机制就是checkpoint 它会周期性的去把我们的state存储到某个地方去"}]},{"ID":"20230817161926-zza5ue6","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230817161926-zza5ue6","updated":"20230817161926"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"state分类"}]},{"ID":"20230817161927-ji5ig5u","Type":"NodeParagraph","Properties":{"id":"20230817161927-ji5ig5u","updated":"20230817161927"},"Children":[{"Type":"NodeText","Data":"keyedstate："}]},{"ID":"20230817161928-0b7zktx","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161928-0b7zktx","updated":"20230817161928"},"Children":[{"ID":"20230817161929-m2uz6wj","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161929-m2uz6wj","updated":"20230817161929"},"Children":[{"ID":"20230817161930-qxk7hl5","Type":"NodeParagraph","Properties":{"id":"20230817161930-qxk7hl5","updated":"20230817161930"},"Children":[{"Type":"NodeText","Data":"ValueState"}]}]},{"ID":"20230817161931-zxcg2nz","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161931-zxcg2nz","updated":"20230817161931"},"Children":[{"ID":"20230817161932-bmsme53","Type":"NodeParagraph","Properties":{"id":"20230817161932-bmsme53","updated":"20230817161932"},"Children":[{"Type":"NodeText","Data":"ListState"}]}]},{"ID":"20230817161933-pop81c9","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161933-pop81c9","updated":"20230817161933"},"Children":[{"ID":"20230817161934-hua13px","Type":"NodeParagraph","Properties":{"id":"20230817161934-hua13px","updated":"20230817161934"},"Children":[{"Type":"NodeText","Data":"ReduceState"}]}]},{"ID":"20230817161935-4m1vgd4","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161935-4m1vgd4","updated":"20230817161935"},"Children":[{"ID":"20230817161936-91up5z4","Type":"NodeParagraph","Properties":{"id":"20230817161936-91up5z4","updated":"20230817161936"},"Children":[{"Type":"NodeText","Data":"AggregatingState"}]}]},{"ID":"20230817161937-ca8eupn","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161937-ca8eupn","updated":"20230817161937"},"Children":[{"ID":"20230817161938-h807yln","Type":"NodeParagraph","Properties":{"id":"20230817161938-h807yln","updated":"20230817161938"},"Children":[{"Type":"NodeText","Data":"MapState"}]}]}]},{"ID":"20230817161939-aa0zx5d","Type":"NodeParagraph","Properties":{"id":"20230817161939-aa0zx5d","updated":"20230817161939"},"Children":[{"Type":"NodeText","Data":"opreatorstate: kafka中指定的topic的partition和groupid对应的offset信息 记录在opreatorstate里"}]},{"ID":"20230817161940-a8zukiu","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":3,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161940-a8zukiu","updated":"20230817161940"},"Children":[{"ID":"20230817161941-ie9um2p","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":3,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161941-ie9um2p","updated":"20230817161941"},"Children":[{"ID":"20230817161942-9cv67c6","Type":"NodeParagraph","Properties":{"id":"20230817161942-9cv67c6","updated":"20230817161942"},"Children":[{"Type":"NodeText","Data":"broadcast state 这是opreatorstate的一种特例"}]}]}]},{"ID":"20230817161943-zj9wwi4","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230817161943-zj9wwi4","updated":"20230817161943"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"ValueState使用"}]},{"ID":"20230817161944-552lwhg","Type":"NodeParagraph","Properties":{"id":"20230817161944-552lwhg","updated":"20230817161944"},"Children":[{"Type":"NodeText","Data":"keyedstate的使用必须作用于rich类的函数 例如richmapfunciton。。。因为这样才可以获取到生命周期 即获取上下文 从而获取当前状态 状态可以很好地描述一段时间发生的事情 这样可以很好地实现过程的业务处理 当然也可以用window"}]},{"ID":"20230817161945-widqvy6","Type":"NodeParagraph","Properties":{"id":"20230817161945-widqvy6","updated":"20230817161945"},"Children":[{"Type":"NodeText","Data":"创建state的时候需要给state描述器 记住每次计算完数据要记得更新 完成一个状态计算后需要清除状态"}]},{"ID":"20230817161946-6aukkpq","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161946-6aukkpq","updated":"20230817161946"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package com.pyy.flink.state;\n\nimport org.apache.flink.api.common.functions.RichFlatMapFunction;\nimport org.apache.flink.api.common.state.ValueState;\nimport org.apache.flink.api.common.state.ValueStateDescriptor;\nimport org.apache.flink.api.common.typeinfo.TypeHint;\nimport org.apache.flink.api.common.typeinfo.TypeInformation;\nimport org.apache.flink.api.java.tuple.Tuple2;\nimport org.apache.flink.configuration.Configuration;\nimport org.apache.flink.util.Collector;\n\npublic class CountWindowAverage  extends RichFlatMapFunction\u003cTuple2\u003cLong,Long\u003e, Tuple2\u003cLong,Long\u003e\u003e {\n   private  transient ValueState\u003cTuple2\u003cLong,Long\u003e\u003evalueState;//第一个代表总条数 第二个代表总和\n    @Override\n    public void open(Configuration parameters) throws Exception {\n        ValueStateDescriptor\u003cTuple2\u003cLong,Long\u003e\u003e stateProperties=new ValueStateDescriptor\u003cTuple2\u003cLong, Long\u003e\u003e(\n           \"average state\", TypeInformation.of(new TypeHint\u003cTuple2\u003cLong, Long\u003e\u003e(){})\n        );\n        valueState=getRuntimeContext().getState(stateProperties);\n    }\n\n    @Override\n    public void close() throws Exception {\n        super.close();\n    }\n\n    @Override\n    public void flatMap(Tuple2\u003cLong, Long\u003e value, Collector\u003cTuple2\u003cLong, Long\u003e\u003e out) throws Exception {\n        Tuple2\u003cLong, Long\u003e curstate = valueState.value();\n        if(null==curstate){\n            curstate=Tuple2.of(0L,0L);\n        }\n        curstate.f0+=1;\n        curstate.f1+=value.f1;\n        valueState.update(curstate);//当前状态需要更新\n        System.out.println(\"当前curstate的条数为==\u003e\"+curstate.f0+\",当前当前curstate的总和为==\u003e\"+curstate.f1);\n        if(curstate.f0\u003e=3){\n          out.collect(Tuple2.of(value.f0,curstate.f1/curstate.f0));\n          valueState.clear();\n        }\n    }\n}\n\n\n\npackage com.pyy.flink.state;\n\nimport org.apache.flink.api.java.tuple.Tuple2;\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\n\npublic class StateApp {\n    public static void main(String[] args) throws Exception {\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        env.fromElements(Tuple2.of(1L, 3L), Tuple2.of(1L, 5L), Tuple2.of(1L, 7L), Tuple2.of(2L, 4L), Tuple2.of(2L, 2L),Tuple2.of(2L,6L))\n                .keyBy(value -\u003e value.f0)\n                .flatMap(new CountWindowAverage())\n                .print();\n\n        env.execute(\"StateApp\");\n    }\n\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161947-z7o11wy","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230817161947-z7o11wy","updated":"20230817161947"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"checkpoint"}]},{"ID":"20230817161948-34za88t","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161948-34za88t","updated":"20230817161948"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"每一个函数或者算子，在Flink中都是有状态的。进来一个Events都需要维护状态信息，在操作过程中，状态的存储是非常重要的。为了状态能够容错，flink需要checkpoint状态。checkpoint允许Flink能恢复状态，以及在出现故障的时候，恢复到失败时的状态。\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161949-lfq7u4i","Type":"NodeParagraph","Properties":{"id":"20230817161949-lfq7u4i","updated":"20230817161949"},"Children":[{"Type":"NodeText","Data":"Restart Stragery(重启策略)"}]},{"ID":"20230817161950-54rejer","Type":"NodeParagraph","Properties":{"id":"20230817161950-54rejer","updated":"20230817161950"},"Children":[{"Type":"NodeText","Data":"可以使用默认的重新启动策略启动群集，该策略在未定义特定于作业的重新启动策略时始终使用。如果作业是使用重新启动策略提交的，则此策略将覆盖群集的默认设置。"}]},{"ID":"20230817161951-3u5dq27","Type":"NodeParagraph","Properties":{"id":"20230817161951-3u5dq27","updated":"20230817161951"},"Children":[{"Type":"NodeText","Data":"默认的重启策略是通过 Flink 的配置文件 设置的。配置参数 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"restart-strategy"},{"Type":"NodeText","Data":" 定义采用的策略。如果未启用检查点，则使用\"不重新启动\"策略。如果激活了检查点，并且尚未配置重新启动策略，则在尝试重新启动时使用固定延迟策略 即尝试重启Integer.MAX_VALUE次"}]},{"ID":"20230817161952-czc5hrv","Type":"NodeParagraph","Properties":{"id":"20230817161952-czc5hrv","updated":"20230817161952"},"Children":[{"Type":"NodeText","Data":"常用的重启设置："}]},{"ID":"20230817161953-ml8yv0n","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161953-ml8yv0n","updated":"20230817161953"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"   StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        env.enableCheckpointing(5000);\n        env.setRestartStrategy(RestartStrategies.fixedDelayRestart(\n                3, // number of restart attempts\n                Time.of(2, TimeUnit.SECONDS) // delay\n        ));\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161954-c03jtj0","Type":"NodeParagraph","Properties":{"id":"20230817161954-c03jtj0","updated":"20230817161954"},"Children":[{"Type":"NodeText","Data":"上述代码表示每隔2秒尝试重启一次 总共尝试3次"}]},{"ID":"20230817161955-4dqoftz","Type":"NodeParagraph","Properties":{"id":"20230817161955-4dqoftz","updated":"20230817161955"},"Children":[{"Type":"NodeText","Data":"FlinkStateBackEnd(state管理 即state信息存储在何处)"}]},{"ID":"20230817161956-vjmw6fc","Type":"NodeParagraph","Properties":{"id":"20230817161956-vjmw6fc","updated":"20230817161956"},"Children":[{"Type":"NodeText","Data":"MemoryStateBackend：适用于本地开发和测试  状态信息存在taskmanager的堆内存中 最后在周期性更新到jobmanager的内存中"}]},{"ID":"20230817161957-l96ik0a","Type":"NodeParagraph","Properties":{"id":"20230817161957-l96ik0a","updated":"20230817161957"},"Children":[{"Type":"NodeText","Data":"FSstatebackend：生产中所用 即将状态信息存储在文件系统中"}]},{"ID":"20230817161958-7k05wr7","Type":"NodeParagraph","Properties":{"id":"20230817161958-7k05wr7","updated":"20230817161958"},"Children":[{"Type":"NodeText","Data":"默认情况下，检查点不保留，仅用于从失败中恢复作业。当程序被取消时，它们将被删除。但是，您可以配置要保留的定期检查点。根据配置，当作业失败或取消时*，不会自动"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"清理这些"},{"Type":"NodeText","Data":"保留*的检查点。这样，如果作业失败，您将有一个检查点从中恢复。"}]},{"ID":"20230817161959-iidv4t0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161959-iidv4t0","updated":"20230817161959"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"CheckpointConfig config = env.getCheckpointConfig();\nconfig.enableExternalizedCheckpoints(ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION);\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161960-j2agrfj","Type":"NodeParagraph","Properties":{"id":"20230817161960-j2agrfj","updated":"20230817161960"},"Children":[{"Type":"NodeText","Data":"该模式配置取消作业时检查点发生的情况："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ExternalizedCheckpointCleanup"}]},{"ID":"20230817161961-mp0lg3i","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161961-mp0lg3i","updated":"20230817161961"},"Children":[{"ID":"20230817161962-saqmhcx","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161962-saqmhcx","updated":"20230817161962"},"Children":[{"ID":"20230817161963-o2zvpji","Type":"NodeParagraph","Properties":{"id":"20230817161963-o2zvpji","updated":"20230817161963"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION"},{"Type":"NodeText","Data":"：在取消作业时保留检查点。请注意，在这种情况下，您必须在取消后手动清理检查点状态。"}]}]},{"ID":"20230817161964-ui70r27","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161964-ui70r27","updated":"20230817161964"},"Children":[{"ID":"20230817161965-h93c4ju","Type":"NodeParagraph","Properties":{"id":"20230817161965-h93c4ju","updated":"20230817161965"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"ExternalizedCheckpointCleanup.DELETE_ON_CANCELLATION"},{"Type":"NodeText","Data":"：取消作业时删除检查点。仅当作业失败时，检查点状态才可用。"}]}]}]},{"ID":"20230817161966-b6fhrvd","Type":"NodeParagraph","Properties":{"id":"20230817161966-b6fhrvd","updated":"20230817161966"},"Children":[{"Type":"NodeText","Data":"rocksdbbackend：存储在rocksdb数据库中"}]},{"ID":"20230817161967-rse8dvz","Type":"NodeParagraph","Properties":{"id":"20230817161967-rse8dvz","updated":"20230817161967"},"Children":[{"Type":"NodeText","Data":"checkpoint测试代码："}]},{"ID":"20230817161968-8qqyiht","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161968-8qqyiht","updated":"20230817161968"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package com.pyy.flink.state;\n\nimport org.apache.flink.api.common.functions.FlatMapFunction;\nimport org.apache.flink.api.common.functions.MapFunction;\nimport org.apache.flink.api.common.restartstrategy.RestartStrategies;\nimport org.apache.flink.api.common.time.Time;\nimport org.apache.flink.api.java.tuple.Tuple2;\nimport org.apache.flink.runtime.state.filesystem.FsStateBackend;\nimport org.apache.flink.streaming.api.CheckpointingMode;\nimport org.apache.flink.streaming.api.datastream.DataStreamSource;\nimport org.apache.flink.streaming.api.environment.CheckpointConfig;\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\nimport org.apache.flink.util.Collector;\n\nimport java.util.concurrent.TimeUnit;\n\npublic class CheckPointDemo {\n    public static void main(String[] args) throws Exception {\n        //        System.setProperty(\"HADOOP_USER_NAME\", \"hadoop\");\n\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n\n        /**\n         * 不开启checkpoint：不重启\n         *\n         * 开启了checkpoint\n         * 1) 没有配置重启策略：Integer.MAX_VALUE\n         * 2) 如果配置了重启策略，就使用我们配置的重启策略覆盖默认的\n         *\n         * 重启策略的配置：\n         * 1) code\n         * 2) yaml\n         *\n         */\n        env.enableCheckpointing(5000);\n//        env.enableCheckpointing(5000, CheckpointingMode.EXACTLY_ONCE);\n\n        // 是否保留\n        env.getCheckpointConfig().enableExternalizedCheckpoints(CheckpointConfig.ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION);\n\n        // 设置StateBackend\n//        env.setStateBackend(new FsStateBackend(\"file:///Users/HHH/IdeaProjects/db_flink01/checkpoints\"));\n\n//        env.setStateBackend(new FsStateBackend(\"hdfs://bigdata01:9000/checkpoints\"));\n\n        // 自定义设置我们需要的重启策略\n        env.setRestartStrategy(RestartStrategies.fixedDelayRestart(\n                3, // 尝试重启的次数\n                Time.of(5, TimeUnit.SECONDS) // 间隔\n        ));\n\n        DataStreamSource\u003cString\u003e source = env.socketTextStream(\"bigdata04\", 9001);\n        source.map(new MapFunction\u003cString, String\u003e() {\n            @Override\n            public String map(String value) throws Exception {\n                if(value.contains(\"pk\")) {\n                    throw new RuntimeException(\"PK哥来了，快跑..\");\n                } else {\n                    return value.toLowerCase();\n                }\n            }\n        }).flatMap(new FlatMapFunction\u003cString, String\u003e() {\n            @Override\n            public void flatMap(String value, Collector\u003cString\u003e out) throws Exception {\n                String[] splits = value.split(\",\");\n                for (String split : splits) {\n                    out.collect(split);\n                }\n            }\n        }).map(new MapFunction\u003cString, Tuple2\u003cString,Integer\u003e\u003e() {\n            @Override\n            public Tuple2\u003cString, Integer\u003e map(String value) throws Exception {\n                return Tuple2.of(value, 1);\n            }\n        }).keyBy(x -\u003e x.f0)\n                .sum(1)\n                .print();\n\n\n        env.execute(\"CheckpointApp\");\n    }\n    }\n\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]}]}