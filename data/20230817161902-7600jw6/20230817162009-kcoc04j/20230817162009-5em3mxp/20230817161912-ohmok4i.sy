{"ID":"20230817161912-ohmok4i","Spec":"1","Type":"NodeDocument","Properties":{"id":"20230817161912-ohmok4i","title":"Flink+clickHosue实战","updated":"20230817161912"},"Children":[{"ID":"20230817161913-heg294f","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230817161913-heg294f","updated":"20230817161913"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Flink+clickHosue实战"}]},{"ID":"20230817161914-xkxwcho","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230817161914-xkxwcho","updated":"20230817161914"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"需求1：根据不同维度统计新老用户"}]},{"ID":"20230817161915-jmfwtaa","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161915-jmfwtaa","updated":"20230817161915"},"Children":[{"ID":"20230817161916-conkcz1","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161916-conkcz1","updated":"20230817161916"},"Children":[{"ID":"20230817161917-eybvc9y","Type":"NodeParagraph","Properties":{"id":"20230817161917-eybvc9y","updated":"20230817161917"},"Children":[{"Type":"NodeText","Data":"根据操作系统"}]}]},{"ID":"20230817161918-v7aka14","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161918-v7aka14","updated":"20230817161918"},"Children":[{"ID":"20230817161919-x0epaac","Type":"NodeParagraph","Properties":{"id":"20230817161919-x0epaac","updated":"20230817161919"},"Children":[{"Type":"NodeText","Data":"根据省分"}]}]}]},{"ID":"20230817161920-m3yrga7","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161920-m3yrga7","updated":"20230817161920"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package com.pyy.flink.app;\n\nimport com.alibaba.fastjson.JSON;\nimport com.pyy.flink.domain.Access;\nimport com.pyy.flink.udf.RedisFunction;\nimport org.apache.flink.api.common.functions.FilterFunction;\nimport org.apache.flink.api.common.functions.MapFunction;\nimport org.apache.flink.api.java.functions.KeySelector;\nimport org.apache.flink.api.java.tuple.Tuple2;\nimport org.apache.flink.api.java.tuple.Tuple3;\nimport org.apache.flink.streaming.api.datastream.DataStreamSource;\nimport org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\nimport org.apache.flink.table.planner.expressions.In;\n\npublic class OsUserCntAppV1 {\n    public static void main(String[] args) throws Exception {\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        DataStreamSource\u003cString\u003e stream = env.readTextFile(\"E:\\\\access.json\");\n        SingleOutputStreamOperator\u003cAccess\u003e cleanstream = stream.map(new MapFunction\u003cString, Access\u003e() {\n            @Override\n            public Access map(String value) throws Exception {\n                //TODO.. JSON==\u003eACCESS\n                try {\n                    return JSON.parseObject(value, Access.class);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                    return null;\n                }\n\n            }\n        }).filter(x -\u003e x != null)\n                .filter(new FilterFunction\u003cAccess\u003e() {\n                    @Override\n                    public boolean filter(Access value) throws Exception {\n                        return \"startup\".equals(value.event);\n                    }\n                });\n        cleanstream.map(new MapFunction\u003cAccess, Tuple3\u003cString,Integer, Integer\u003e\u003e() {\n            @Override\n            public Tuple3\u003cString, Integer, Integer\u003e map(Access value) throws Exception {\n                return Tuple3.of(value.os,value.nu,1);\n            }\n        }).keyBy(new KeySelector\u003cTuple3\u003cString, Integer, Integer\u003e, Tuple2\u003cString,Integer\u003e\u003e() {\n            @Override\n            public Tuple2\u003cString, Integer\u003e getKey(Tuple3\u003cString, Integer, Integer\u003e value) throws Exception {\n                return Tuple2.of(value.f0,value.f1);\n            }\n        }).sum(2).addSink(new RedisFunction());\n        env.execute(\" OsUserCntAppV1\");\n    }\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161921-du442yz","Type":"NodeParagraph","Properties":{"id":"20230817161921-du442yz","updated":"20230817161921"},"Children":[{"Type":"NodeText","Data":"代码缺陷：一是无法做实时的需求 二是基于不同维度的相似性太大 每次都重复开发 三是新老用户应该基于device设备来区分 而不是依据 日志信息"}]},{"ID":"20230817161922-5xw94db","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20230817161922-5xw94db","updated":"20230817161922"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"##### ","Properties":{"id":""}},{"Type":"NodeText","Data":"基于device设备来区分 而不是依据 日志信息思路实现："}]},{"ID":"20230817161923-8n2m3zx","Type":"NodeParagraph","Properties":{"id":"20230817161923-8n2m3zx","updated":"20230817161923"},"Children":[{"Type":"NodeText","Data":"state+BloomFilter 主要是采用状态加上布隆过滤器 因为就用户设备而言 要存储的量非常大 每次在更新原有状态时 使用布隆过滤器可以以o(1)的时间复杂度来判断该用户是否存在 但有一定的误判率 布隆过滤器可以判断一定不存在 但存在的可能或许会有误差 可以适当调大布隆过滤器的位图来降低误判率"}]},{"ID":"20230817161924-9ozko4a","Type":"NodeParagraph","Properties":{"id":"20230817161924-9ozko4a","updated":"20230817161924"},"Children":[{"Type":"NodeText","Data":"那为什么不采用hashset或者redis去重呢？"}]},{"ID":"20230817161925-257ug0t","Type":"NodeParagraph","Properties":{"id":"20230817161925-257ug0t","updated":"20230817161925"},"Children":[{"Type":"NodeText","Data":"redis主要成本高 需要搭建Redis服务器"}]},{"ID":"20230817161926-hi9z0ox","Type":"NodeParagraph","Properties":{"id":"20230817161926-hi9z0ox","updated":"20230817161926"},"Children":[{"Type":"NodeText","Data":"而hashset是将元素存在集合中 当数据量过大时 会占用很大的内存 不适用于大数据处理"}]},{"ID":"20230817161927-ybhmvxb","Type":"NodeParagraph","Properties":{"id":"20230817161927-ybhmvxb","updated":"20230817161927"},"Children":[{"Type":"NodeText","Data":"代码实现"}]},{"ID":"20230817161928-fwktmqh","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161928-fwktmqh","updated":"20230817161928"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"\n/**\n * 根据每个设备的device来区分新老用户\n * 我们的实现是：状态+布隆过滤器\n */\npublic class OsUserCntAppV3 {\n    public static void main(String[] args) throws Exception {\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        DataStreamSource\u003cString\u003e stream = env.readTextFile(\"E:\\\\access.json\");\n        SingleOutputStreamOperator\u003cAccess\u003e cleanstream = stream.map(new MapFunction\u003cString, Access\u003e() {\n            @Override\n            public Access map(String value) throws Exception {\n                //TODO.. JSON==\u003eACCESS\n                try {\n                    return JSON.parseObject(value, Access.class);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                    return null;\n                }\n\n            }\n        }).filter(x -\u003e x != null)\n                .filter(new FilterFunction\u003cAccess\u003e() {\n                    @Override\n                    public boolean filter(Access value) throws Exception {\n                        return \"startup\".equals(value.event);\n                    }\n                });\n        cleanstream.keyBy(x-\u003ex.device).process(new KeyedProcessFunction\u003cString, Access, Access\u003e() {\n            private  transient  ValueState\u003cBloomFilter\u003cString\u003e\u003e state;\n            @Override\n            public void open(Configuration parameters) throws Exception {\n                ValueStateDescriptor\u003cBloomFilter\u003cString\u003e\u003e descriptor= new ValueStateDescriptor(\"bloom\", TypeInformation.of(new TypeHint\u003cBloomFilter\u003cString\u003e\u003e() {}));\n                state = getRuntimeContext().getState(descriptor);\n            }\n\n            @Override\n            public void processElement(Access value, Context ctx, Collector\u003cAccess\u003e out) throws Exception {\n                String device = value.device;\n                BloomFilter\u003cString\u003e bloomFilter = state.value();\n                if(null==bloomFilter){\n                    bloomFilter=BloomFilter.create(Funnels.unencodedCharsFunnel(),100000);\n                }\n                if(!bloomFilter.mightContain(device)){\n                    bloomFilter.put(device);\n                    value.nu=1;\n                    state.update(bloomFilter);\n                }else {\n                    value.nu=0;\n                }\n                out.collect(value);\n            }\n        }).map(new MapFunction\u003cAccess, Tuple2\u003cInteger,Integer\u003e\u003e() {\n            @Override\n            public Tuple2\u003cInteger, Integer\u003e map(Access value) throws Exception {\n                return Tuple2.of(value.nu,1);\n            }\n        }).keyBy(x-\u003ex.f0).sum(1).print();\n        env.execute(\" OsUserCntAppV1\");\n    }\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161929-5u52kj4","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230817161929-5u52kj4","updated":"20230817161929"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"需求2：统计五分钟内的不同event、不同类别的商品topN的访问量"}]},{"ID":"20230817161930-yg17l98","Type":"NodeParagraph","Properties":{"id":"20230817161930-yg17l98","updated":"20230817161930"},"Children":[{"Type":"NodeText","Data":"思路框架大致分析：首先选择基于eventtime进行处理，然后watermark允许最大延迟20秒，由于是要统计五分钟内的topN 我们需要看到的是一个增长趋势 所以采用滑动窗口 滑窗的大小为5min 每隔1分钟统计一次结果"}]},{"ID":"20230817161931-t5nd4vp","Type":"NodeParagraph","Properties":{"id":"20230817161931-t5nd4vp","updated":"20230817161931"},"Children":[{"Type":"NodeText","Data":"具体分析："}]},{"ID":"20230817161932-7puj4tr","Type":"NodeParagraph","Properties":{"id":"20230817161932-7puj4tr","updated":"20230817161932"},"Children":[{"Type":"NodeText","Data":"首先我们需要基于event、category、product进行分组 求出每个商品的总量：在windowfunction中我们选择了"}]},{"ID":"20230817161933-ld9pv66","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161933-ld9pv66","updated":"20230817161933"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"aggregate(\n      AggregateFunction\u003cT, ACC, V\u003e aggFunction,\n      WindowFunction\u003cV, R, K, W\u003e windowFunction)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161934-whooxwr","Type":"NodeParagraph","Properties":{"id":"20230817161934-whooxwr","updated":"20230817161934"},"Children":[{"Type":"NodeText","Data":"函数 原因是基于reduce不能获取时间戳 基于process又不能增量处理 所以选择了两者的结合"}]},{"ID":"20230817161935-pwqpsms","Type":"NodeParagraph","Properties":{"id":"20230817161935-pwqpsms","updated":"20230817161935"},"Children":[{"Type":"NodeText","Data":"然后将抽取的结果封装成了EventCatagoryProduct 对象"}]},{"ID":"20230817161936-l7h2hlu","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161936-l7h2hlu","updated":"20230817161936"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class EventCatagoryProduct {\n    public String event;\n    public String catagory;\n    public String product;\n    public long access_cnt;\n    public long window_start_time;\n    public long window_end_time;\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161937-ak8bpq4","Type":"NodeParagraph","Properties":{"id":"20230817161937-ak8bpq4","updated":"20230817161937"},"Children":[{"Type":"NodeText","Data":"到这里 我们只完成了不同event、不同类别的商品的访问量 还没有获取topN 所以我们还要基于不同event、不同类别以及窗口的开始时间和结束时间进行二次keyby："}]},{"ID":"20230817161938-gqg6fgx","Type":"NodeParagraph","Properties":{"id":"20230817161938-gqg6fgx","updated":"20230817161938"},"Children":[{"Type":"NodeText","Data":"在这个过程中用最终答案的返回值 选择了集合 因为N是不确定的"}]},{"ID":"20230817161939-f5fh0hk","Type":"NodeParagraph","Properties":{"id":"20230817161939-f5fh0hk","updated":"20230817161939"},"Children":[{"Type":"NodeText","Data":"在process函数中 为了容错 同时也为了基于窗口的一个状态的累计 这里用到了Liststate来保存每次的状态"}]},{"ID":"20230817161940-8sli694","Type":"NodeParagraph","Properties":{"id":"20230817161940-8sli694","updated":"20230817161940"},"Children":[{"Type":"NodeText","Data":"状态的触发选择了定时器 触发动机是到达了窗口的结束时间"}]},{"ID":"20230817161941-unczg4f","Type":"NodeParagraph","Properties":{"id":"20230817161941-unczg4f","updated":"20230817161941"},"Children":[{"Type":"NodeText","Data":"最后在ontimer函数中处理最后的逻辑 也就是排序 然后取topN(我这里选择了top3)"}]},{"ID":"20230817161942-h1res42","Type":"NodeParagraph","Properties":{"id":"20230817161942-h1res42","updated":"20230817161942"},"Children":[{"Type":"NodeText","Data":"最后的代码为："}]},{"ID":"20230817161943-u2rbp4w","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161943-u2rbp4w","updated":"20230817161943"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class TopNAppV1 {\n    public static void main(String[] args) throws Exception {\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n        DataStreamSource\u003cString\u003e stream = env.readTextFile(\"E:\\\\access.json\");\n        SingleOutputStreamOperator\u003cAccess\u003e cleanstream = stream.map(new MapFunction\u003cString, Access\u003e() {\n            @Override\n            public Access map(String value) throws Exception {\n                //TODO.. JSON==\u003eACCESS\n                try {\n                    return JSON.parseObject(value, Access.class);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                    return null;\n                }\n\n            }\n        }).filter(x -\u003e x != null)\n                .assignTimestampsAndWatermarks(WatermarkStrategy.\u003cAccess\u003eforBoundedOutOfOrderness(Duration.ofSeconds(20)).withTimestampAssigner(new TimestampAssignerSupplier\u003cAccess\u003e() {\n                    @Override\n                    public TimestampAssigner\u003cAccess\u003e createTimestampAssigner(Context context) {\n                        return new TimestampAssigner\u003cAccess\u003e() {\n                            @Override\n                            public long extractTimestamp(Access element, long recordTimestamp) {\n                                return element.time;\n                            }\n                        };\n                    }\n                }))\n                .filter(new FilterFunction\u003cAccess\u003e() {\n                    @Override\n                    public boolean filter(Access value) throws Exception {\n                        return !\"startup\".equals(value.event);\n                    }\n                });\n        WindowedStream\u003cAccess, Tuple3\u003cString, String, String\u003e, TimeWindow\u003e windowstaream = cleanstream.keyBy(new KeySelector\u003cAccess, Tuple3\u003cString, String, String\u003e\u003e() {\n            @Override\n            public Tuple3\u003cString, String, String\u003e getKey(Access value) throws Exception {\n                return Tuple3.of(value.event, value.product.category, value.product.name);\n            }\n        }).window(SlidingEventTimeWindows.of(Time.minutes(5), Time.minutes(1)));\n        //作用于windowfunction\n        SingleOutputStreamOperator\u003cEventCatagoryProduct\u003e aggstream = windowstaream.aggregate(new TopNAggregateFunction(), new TopNWindowFunction());\n        aggstream.keyBy(new KeySelector\u003cEventCatagoryProduct, Tuple4\u003cString, String, Long, Long\u003e\u003e() {\n            @Override\n            public Tuple4\u003cString, String, Long, Long\u003e getKey(EventCatagoryProduct value) throws Exception {\n                return Tuple4.of(value.event, value.catagory, value.window_start_time, value.window_end_time);\n            }\n        }).process(new KeyedProcessFunction\u003cTuple4\u003cString, String, Long, Long\u003e, EventCatagoryProduct, List\u003cEventCatagoryProduct\u003e\u003e() {\n            private transient ListState\u003cEventCatagoryProduct\u003e cntstate;\n\n            @Override\n            public void open(Configuration parameters) throws Exception {\n                cntstate = getRuntimeContext().getListState(new ListStateDescriptor\u003cEventCatagoryProduct\u003e(\"cnt_state\", EventCatagoryProduct.class));\n            }\n\n            @Override\n            public void processElement(EventCatagoryProduct value, Context ctx, Collector\u003cList\u003cEventCatagoryProduct\u003e\u003e out) throws Exception {\n                cntstate.add(value);\n                //注册一个定时器 以窗口结束时间触发执行\n                ctx.timerService().registerEventTimeTimer(value.window_end_time);\n            }\n\n            @Override\n            public void onTimer(long timestamp, OnTimerContext ctx, Collector\u003cList\u003cEventCatagoryProduct\u003e\u003e out) throws Exception {\n                //处理求topN的逻辑\n                ArrayList\u003cEventCatagoryProduct\u003e list = Lists.newArrayList(cntstate.get());\n                list.sort((x, y) -\u003e Long.compare(y.access_cnt, x.access_cnt));//排序\n                List\u003cEventCatagoryProduct\u003e ans = new ArrayList\u003c\u003e();\n                for (int i = 0; i \u003c Math.min(list.size(), 3); i++) {//求top3\n                    EventCatagoryProduct bean = list.get(i);\n                    ans.add(bean);\n                }\n                out.collect(ans);\n            }\n        }).print().setParallelism(1);\n        env.execute(\"OsUserCntAppV1\");\n    }\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161944-u40krx8","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161944-u40krx8","updated":"20230817161944"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class EventCatagoryProduct {\n    public String event;\n    public String catagory;\n    public String product;\n    public long access_cnt;\n    public long window_start_time;\n    public long window_end_time;\n    @Override\n    public String toString() {\n        FastDateFormat format = FastDateFormat.getInstance(\"yyyy-MM-dd HH:mm:ss\");\n        return event + '\\t' +\n                catagory + '\\t' +\n                product + '\\t' +\n                access_cnt + '\\t' +\n                format.format(window_start_time)+ '\\t' +\n                format.format( window_end_time);\n    }\n\n    public EventCatagoryProduct() {\n    }\n\n    public EventCatagoryProduct(String event, String catagory, String product, long access_cnt, long window_start_time, long window_end_time) {\n        this.event = event;\n        this.catagory = catagory;\n        this.product = product;\n        this.access_cnt = access_cnt;\n        this.window_start_time = window_start_time;\n        this.window_end_time = window_end_time;\n    }\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161945-f89bhec","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161945-f89bhec","updated":"20230817161945"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package com.pyy.flink.udf;\n\nimport com.pyy.flink.domain.Access;\nimport org.apache.flink.api.common.functions.AggregateFunction;\n\npublic class TopNAggregateFunction implements AggregateFunction\u003cAccess,Long,Long\u003e {\n    @Override\n    public Long createAccumulator() {\n        return 0L;\n    }\n\n    @Override\n    public Long add(Access value, Long accumulator) {\n        return accumulator+1;\n    }\n\n    @Override\n    public Long getResult(Long accumulator) {\n        return accumulator;\n    }\n\n    @Override\n    public Long merge(Long a, Long b) {\n        return null;\n    }\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161946-f1ft0a9","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161946-f1ft0a9","updated":"20230817161946"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package com.pyy.flink.udf;\n\nimport org.apache.flink.api.java.tuple.Tuple3;\nimport org.apache.flink.streaming.api.functions.windowing.WindowFunction;\nimport org.apache.flink.streaming.api.windowing.windows.TimeWindow;\nimport org.apache.flink.util.Collector;\n\npublic class TopNWindowFunction implements WindowFunction\u003cLong,EventCatagoryProduct,Tuple3\u003cString, String, String\u003e, TimeWindow\u003e {\n    @Override\n    public void apply(Tuple3\u003cString, String, String\u003e value, TimeWindow window, Iterable\u003cLong\u003e input, Collector\u003cEventCatagoryProduct\u003e out) throws Exception {\n        String event = value.f0;\n        String catagory = value.f1;\n        String product = value.f2;\n        long ans = input.iterator().next();\n        long start = window.getStart();\n        long end = window.getEnd();\n        EventCatagoryProduct eventCatagoryProduct = new EventCatagoryProduct(event, catagory, product, ans, start, end);\n        out.collect(eventCatagoryProduct);\n    }\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161947-g8xqex3","Type":"NodeParagraph","Properties":{"id":"20230817161947-g8xqex3","updated":"20230817161947"},"Children":[{"Type":"NodeText","Data":"这一个需求涉及到的知识点："}]},{"ID":"20230817161948-8n1aeed","Type":"NodeParagraph","Properties":{"id":"20230817161948-8n1aeed","updated":"20230817161948"},"Children":[{"Type":"NodeText","Data":"eventtime 、watermark、slidingwindow、windowfunction(累计函数以及获取时间戳)、state、timer"}]},{"ID":"20230817161949-4gnydh3","Type":"NodeParagraph","Properties":{"id":"20230817161949-4gnydh3","updated":"20230817161949"},"Children":[{"Type":"NodeText","Data":"我觉得还可以加入checkpoint以及restart_stragery来保证容错"}]},{"ID":"20230817161950-ls07c0a","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20230817161950-ls07c0a","updated":"20230817161950"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"##### ","Properties":{"id":""}},{"Type":"NodeText","Data":"数据倾斜的解决方案："}]},{"ID":"20230817161951-3yhutk1","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161951-3yhutk1","updated":"20230817161951"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"public class TopNAppV1 {\n    public static void main(String[] args) throws Exception {\n        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n        Random random = new Random();\n        env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);\n        DataStreamSource\u003cString\u003e stream = env.readTextFile(\"E:\\\\access.json\");\n        SingleOutputStreamOperator\u003cAccess\u003e cleanstream = stream.map(new MapFunction\u003cString, Access\u003e() {\n            @Override\n            public Access map(String value) throws Exception {\n                //TODO.. JSON==\u003eACCESS\n                try {\n                    return JSON.parseObject(value, Access.class);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                    return null;\n                }\n\n            }\n        }).filter(x -\u003e x != null)\n                .assignTimestampsAndWatermarks(WatermarkStrategy.\u003cAccess\u003eforBoundedOutOfOrderness(Duration.ofSeconds(20)).withTimestampAssigner(new TimestampAssignerSupplier\u003cAccess\u003e() {\n                    @Override\n                    public TimestampAssigner\u003cAccess\u003e createTimestampAssigner(Context context) {\n                        return new TimestampAssigner\u003cAccess\u003e() {\n                            @Override\n                            public long extractTimestamp(Access element, long recordTimestamp) {\n                                return element.time;\n                            }\n                        };\n                    }\n                }))\n                .filter(new FilterFunction\u003cAccess\u003e() {\n                        @Override\n                        public boolean filter(Access value) throws Exception {\n                            return !\"startup\".equals(value.event);\n                        }\n                }).map(new MapFunction\u003cAccess, Access\u003e() {\n                    @Override\n                    public Access map(Access value) throws Exception {\n                        String str=random.nextInt(10)+\"-\"+value.product.name;\n                        value.product.name=str;\n                        return  value;\n                    };\n                });\n        WindowedStream\u003cAccess, Tuple3\u003cString, String, String\u003e, TimeWindow\u003e windowstaream = cleanstream.keyBy(new KeySelector\u003cAccess, Tuple3\u003cString, String, String\u003e\u003e() {\n            @Override\n            public Tuple3\u003cString, String, String\u003e getKey(Access value) throws Exception {\n                return Tuple3.of(value.event, value.product.category,value.product.name);\n            }\n        }).window(SlidingEventTimeWindows.of(Time.minutes(5), Time.minutes(1)));\n        //作用于windowfunction\n        SingleOutputStreamOperator\u003cEventCatagoryProduct\u003e aggstream = windowstaream.aggregate(new TopNAggregateFunction(), new TopNWindowFunction());\n\n        aggstream.keyBy(new KeySelector\u003cEventCatagoryProduct, Tuple4\u003cString, String, Long, Long\u003e\u003e() {\n            @Override\n            public Tuple4\u003cString, String, Long, Long\u003e getKey(EventCatagoryProduct value) throws Exception {\n                return Tuple4.of(value.event, value.catagory, value.window_start_time, value.window_end_time);\n            }\n        }).process(new KeyedProcessFunction\u003cTuple4\u003cString, String, Long, Long\u003e, EventCatagoryProduct, List\u003cEventCatagoryProduct\u003e\u003e() {\n            private transient ListState\u003cEventCatagoryProduct\u003e cntstate;\n\n            @Override\n            public void open(Configuration parameters) throws Exception {\n                cntstate = getRuntimeContext().getListState(new ListStateDescriptor\u003cEventCatagoryProduct\u003e(\"cnt_state\", EventCatagoryProduct.class));\n            }\n\n            @Override\n            public void processElement(EventCatagoryProduct value, Context ctx, Collector\u003cList\u003cEventCatagoryProduct\u003e\u003e out) throws Exception {\n                //cntstate.add(value);\n                String[] product = value.product.split(\"-\");\n                String productname=product[1];\n                ArrayList\u003cEventCatagoryProduct\u003e arr = Lists.newArrayList(cntstate.get());\n                value.product=productname;\n                if(!arr.contains(value)){\n                    arr.add(value);\n                }else{\n                    int ind = arr.indexOf(value);\n                    EventCatagoryProduct eventCatagoryProduct = arr.get(ind);\n                    eventCatagoryProduct.access_cnt+=value.access_cnt;\n                }\n                cntstate.update(arr);\n                //注册一个定时器 以窗口结束时间触发执行\n                ctx.timerService().registerEventTimeTimer(value.window_end_time);\n            }\n\n            @Override\n            public void onTimer(long timestamp, OnTimerContext ctx, Collector\u003cList\u003cEventCatagoryProduct\u003e\u003e out) throws Exception {\n                //处理求topN的逻辑\n                ArrayList\u003cEventCatagoryProduct\u003e list = Lists.newArrayList(cntstate.get());\n                list.sort((x, y) -\u003e Long.compare(y.access_cnt, x.access_cnt));//排序\n                List\u003cEventCatagoryProduct\u003e ans = new ArrayList\u003c\u003e();\n                for (int i = 0; i \u003c Math.min(list.size(), 3); i++) {//求top3\n                    EventCatagoryProduct bean = list.get(i);\n                    ans.add(bean);\n                }\n                out.collect(ans);\n            }\n        }).print().setParallelism(1);\n        env.execute(\"OsUserCntAppV1\");\n    }\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161952-ta3usdq","Type":"NodeParagraph","Properties":{"id":"20230817161952-ta3usdq","updated":"20230817161952"},"Children":[{"Type":"NodeText","Data":"所遇到的问题：在keyby里面加入了随机种子 导致null指针异常"}]},{"ID":"20230817161953-cgwlax0","Type":"NodeParagraph","Properties":{"id":"20230817161953-cgwlax0","updated":"20230817161953"},"Children":[{"Type":"NodeText","Data":"然后在聚合判断的时候调用了contains方法 但是结果统计不对 看源码发现contains方法调用的是index方法 index方法又调用了equals方法 但我在重写equals方法时 我把所有的字段都加入了进去 本来统计的数量就不一样 导致每次equals都不相同 最后导致所有数据全部加入了集合中"}]},{"ID":"20230817161954-8tu41g7","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230817161954-8tu41g7","updated":"20230817161954"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Flink整合kafka完成精准一次语义"}]},{"ID":"20230817161955-ctp2tdk","Type":"NodeParagraph","Properties":{"id":"20230817161955-ctp2tdk","updated":"20230817161955"},"Children":[{"Type":"NodeText","Data":"抽取flinkkafka工具类 将配置参数提取到外部的properties文件中 并且通过args动态传进来 同时用泛型来拓展该工具类的反序列化"}]},{"ID":"20230817161956-rrav0yj","Type":"NodeParagraph","Properties":{"id":"20230817161956-rrav0yj","updated":"20230817161956"},"Children":[{"Type":"NodeText","Data":"代码如下："}]},{"ID":"20230817161957-3f47ci9","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161957-3f47ci9","updated":"20230817161957"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package com.pyy.flink.kafka;\n\nimport org.apache.flink.api.common.restartstrategy.RestartStrategies;\nimport org.apache.flink.api.common.serialization.DeserializationSchema;\nimport org.apache.flink.api.common.serialization.SimpleStringSchema;\nimport org.apache.flink.api.common.time.Time;\nimport org.apache.flink.api.java.utils.ParameterTool;\nimport org.apache.flink.runtime.state.filesystem.FsStateBackend;\nimport org.apache.flink.streaming.api.datastream.DataStreamSource;\nimport org.apache.flink.streaming.api.environment.CheckpointConfig;\nimport org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;\nimport org.apache.flink.streaming.connectors.kafka.FlinkKafkaConsumer;\n\nimport java.io.IOException;\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Properties;\nimport java.util.concurrent.TimeUnit;\n\npublic class FlinkUtils {\n    static StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();\n  //泛型方法的使用\n    public static \u003cT\u003e DataStreamSource\u003cT\u003e createKafkaStreamV1(String args[], Class\u003c? extends DeserializationSchema\u003cT\u003e\u003eclazz) throws IOException, IllegalAccessException, InstantiationException {\n        ParameterTool parameterTool = ParameterTool.fromPropertiesFile(args[0]);\n        String groupid = parameterTool.get(\"group.id\", \"test\");\n        String servers = parameterTool.getRequired(\"bootstrap.servers\");\n        List\u003cString\u003e topics = Arrays.asList(parameterTool.getRequired(\"kafka.input.topics\").split(\",\"));\n        String autocommit = parameterTool.get(\"enable.auto.commit\");\n        String offsetreset = parameterTool.get(\"auto.offset.reset\");\n\n        int interval = parameterTool.getInt(\"checkpoint.interval\");\n        String checkpointpath = parameterTool.get(\"checkpoint.path\", \"file:///Users/HHH/IdeaProjects/db_flink01/state\");\n        Properties prop = new Properties();\n        prop.setProperty(\"bootstrap.servers\", servers);\n        prop.setProperty(\"group.id\", groupid);\n        prop.setProperty(\"enable.auto.commit\", autocommit);\n        prop.setProperty(\"auto.offset.reset\", offsetreset);\n\n        env.enableCheckpointing(interval);\n        env.setStateBackend(new FsStateBackend(checkpointpath));\n        env.getCheckpointConfig().enableExternalizedCheckpoints(CheckpointConfig.ExternalizedCheckpointCleanup.RETAIN_ON_CANCELLATION);\n        env.setRestartStrategy(RestartStrategies.fixedDelayRestart(2, Time.of(5, TimeUnit.SECONDS)));\n\n        FlinkKafkaConsumer\u003cT\u003e kafkaConsumer = new FlinkKafkaConsumer\u003c\u003e(topics, clazz.newInstance(), prop);\n        DataStreamSource\u003cT\u003e stream = env.addSource(kafkaConsumer);\n        return stream;\n    }\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161958-j4xejuq","Type":"NodeParagraph","Properties":{"id":"20230817161958-j4xejuq","updated":"20230817161958"},"Children":[{"Type":"NodeText","Data":"封装redissink 引入泛型 将数据导入redis"}]},{"ID":"20230817161959-f01md9f","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161959-f01md9f","updated":"20230817161959"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package com.pyy.flink.udf;\n\nimport com.pyy.flink.utils.RedisUtils;\nimport org.apache.flink.api.java.tuple.Tuple;\nimport org.apache.flink.api.java.tuple.Tuple2;\nimport org.apache.flink.api.java.tuple.Tuple3;\nimport org.apache.flink.configuration.Configuration;\nimport org.apache.flink.streaming.api.functions.sink.RichSinkFunction;\nimport org.apache.flink.table.planner.expressions.In;\nimport redis.clients.jedis.Jedis;\n\nimport java.lang.reflect.Field;\n\npublic class RedisFunction\u003cT extends Tuple \u003e extends RichSinkFunction\u003cT\u003e {\n   Jedis jedis=null;\n   String topic;\n   public RedisFunction(String topic) {\n        this.topic = topic;\n    }\n\n    @Override\n    public void open(Configuration parameters) throws Exception {\n        super.open(parameters);\n       jedis= RedisUtils.getJedisCon();\n    }\n\n    @Override\n    public void close() throws Exception {\n        super.close();\n        RedisUtils.close(jedis);\n    }\n\n    @Override\n    public void invoke(T value, Context context) throws Exception {\n        if(value instanceof  Tuple2){\n            Class\u003cTuple2\u003e clazz = Tuple2.class;\n            Field f0 = clazz.getDeclaredField(\"f0\");\n            Field f1 = clazz.getDeclaredField(\"f1\");\n            jedis.hset(topic,f0.get(value)+\"\",f1.get(value)+\"\");\n        }\n        if(value instanceof  Tuple3){\n            Class\u003cTuple3\u003e clazz = Tuple3.class;\n            Field f0 = clazz.getDeclaredField(\"f0\");\n            Field f1 = clazz.getDeclaredField(\"f1\");\n            Field f2 = clazz.getDeclaredField(\"f2\");\n            jedis.hset(topic,f0.get(value)+\"-\"+f1.get(value),f2.get(value)+\"\");\n        }\n    }\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161960-van04ke","Type":"NodeParagraph","Properties":{"id":"20230817161960-van04ke","updated":"20230817161960"},"Children":[{"Type":"NodeText","Data":"精准一次具体解析："}]},{"ID":"20230817161961-f4a7u7k","Type":"NodeParagraph","Properties":{"id":"20230817161961-f4a7u7k","updated":"20230817161961"},"Children":[{"Type":"NodeText","Data":"在kafka-\u003eflink-\u003eredis的过程中 即使在过程中redis挂掉了 flink的checkpoint机制会保留offset信息 每次运行完之后如果整个过程成功会更新状态 如果没有成功不会更新状态 下次重启时会继续从上次未提交的offset继续消费  redis保证的是at least once 但由于redis是覆盖类型的数据库 即update+insert 即有数据会更新 没有数据会提交 即使数据重复了他也会覆盖掉"}]},{"ID":"20230817161962-lbeeng8","Type":"NodeParagraph","Properties":{"id":"20230817161962-lbeeng8","updated":"20230817161962"},"Children":[{"Type":"NodeText","Data":"kafka的精准一次语义保证"}]},{"ID":"20230817161963-6mvvf8o","Type":"NodeParagraph","Properties":{"id":"20230817161963-6mvvf8o","updated":"20230817161963"},"Children":[{"Type":"NodeText","Data":"依托于flink的两阶段提交："}]},{"ID":"20230817161964-xcwo5h2","Type":"NodeParagraph","Properties":{"id":"20230817161964-xcwo5h2","updated":"20230817161964"},"Children":[{"Type":"NodeText","Data":"TwoPhaseCommitSinkFunction  2阶段提交"}]},{"ID":"20230817161965-cyb0avi","Type":"NodeParagraph","Properties":{"id":"20230817161965-cyb0avi","updated":"20230817161965"},"Children":[{"Type":"NodeText","Data":"第一阶段：数据写入kafka后 他不会提交事务"}]},{"ID":"20230817161966-czc4eb6","Type":"NodeParagraph","Properties":{"id":"20230817161966-czc4eb6","updated":"20230817161966"},"Children":[{"Type":"NodeText","Data":"第二阶段：数据写入成功后 才会提交事务 如果出现异常就回滚"}]},{"ID":"20230817161967-ohsizy4","Type":"NodeParagraph","Properties":{"id":"20230817161967-ohsizy4","updated":"20230817161967"},"Children":[{"Type":"NodeText","Data":"其实就是数据首先会预提交 然后会有一个监听器监听checkpoint的状态  如果所有状态都ok没有出现异常的话 数据才会真正的提交"}]},{"ID":"20230817161968-qgvb3yw","Type":"NodeParagraph","Properties":{"id":"20230817161968-qgvb3yw","updated":"20230817161968"},"Children":[{"Type":"NodeText","Data":"再具体点说 就是checkpoint的快照机制 假如设定了5秒钟 那么该快照机制就会将数据原有的状态连同kafka的offset一起作为状态存储 每次快照都会预提交 当所有提交都没有问题时 才会真正更新stackbackend里的状态 只要有一个过程失败了 那么就会回滚 即不会更新提交失败的状态"}]}]}