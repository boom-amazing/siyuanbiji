{"ID":"20230817162005-t2vdkz4","Spec":"1","Type":"NodeDocument","Properties":{"id":"20230817162005-t2vdkz4","title":"jvm的学习","updated":"20230817162005"},"Children":[{"ID":"20230817162006-jdu9gn3","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230817162006-jdu9gn3","updated":"20230817162006"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"java代码为何要在虚拟机中运行 是怎么运行的？"}]},{"ID":"20230817162007-k73cl81","Type":"NodeParagraph","Properties":{"id":"20230817162007-k73cl81","updated":"20230817162007"},"Children":[{"Type":"NodeText","Data":"1、之所以要在虚拟机中运行 是因为它具有可移植性 一旦java代码被编译成了java字节码 便可以在任意平台上的java虚拟机上执行 并且虚拟机还为我们提供了一个代码托管工具 代替我们处理部分冗长和容易出错的事务 例如内存管理 (java虚拟机将运行时内存区域划分为五个部分 分别为方法区 堆 pc寄存器 本地方法栈和java方法栈)"}]},{"ID":"20230817162008-fj7a3lr","Type":"NodeParagraph","Properties":{"id":"20230817162008-fj7a3lr","updated":"20230817162008"},"Children":[{"Type":"NodeText","Data":"2、 java程序生成的class文件需要先加载到方法区中 才能在虚拟机中运行 虚拟机采用一种混合执行的策略 它会解释执行java字节码 然后会将其中反复执行的热点代码 以方法为单位即时编译 然后翻译成机器码直接运行在底层硬件上"}]},{"ID":"20230817162009-x5met1u","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230817162009-x5met1u","updated":"20230817162009"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}}]}]}