{"ID":"20230817161927-aa0acag","Spec":"1","Type":"NodeDocument","Properties":{"id":"20230817161927-aa0acag","title":"红黑树","updated":"20230817161927"},"Children":[{"ID":"20230817161928-dr1wpbx","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230817161928-dr1wpbx","updated":"20230817161928"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"红黑树"}]},{"ID":"20230817161929-q2m1sas","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20230817161929-q2m1sas","updated":"20230817161929"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"##### ","Properties":{"id":""}},{"Type":"NodeText","Data":"红黑树平衡条件："}]},{"ID":"20230817161930-ez5iipn","Type":"NodeParagraph","Properties":{"id":"20230817161930-ez5iipn","updated":"20230817161930"},"Children":[{"Type":"NodeText","Data":"1、每个节点非黑即红"}]},{"ID":"20230817161931-ppk9v8j","Type":"NodeParagraph","Properties":{"id":"20230817161931-ppk9v8j","updated":"20230817161931"},"Children":[{"Type":"NodeText","Data":"2、根节点是黑色节点"}]},{"ID":"20230817161932-vuqgugg","Type":"NodeParagraph","Properties":{"id":"20230817161932-vuqgugg","updated":"20230817161932"},"Children":[{"Type":"NodeText","Data":"3、叶节点是黑节点(这里的叶节点值得是那个虚拟空节点 即NIL节点)"}]},{"ID":"20230817161933-60rnq6d","Type":"NodeParagraph","Properties":{"id":"20230817161933-60rnq6d","updated":"20230817161933"},"Children":[{"Type":"NodeText","Data":"4、如果一个节点是红色，则它的叶子节点是黑色"}]},{"ID":"20230817161934-d3d4811","Type":"NodeParagraph","Properties":{"id":"20230817161934-d3d4811","updated":"20230817161934"},"Children":[{"Type":"NodeText","Data":"5、从根节点出发到所有叶子节点的路径中 黑色节点的数目相同"}]},{"ID":"20230817161935-3i02htv","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20230817161935-3i02htv","updated":"20230817161935"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"##### ","Properties":{"id":""}},{"Type":"NodeText","Data":"平衡调整的终极法门："}]},{"ID":"20230817161936-f2ki35t","Type":"NodeParagraph","Properties":{"id":"20230817161936-f2ki35t","updated":"20230817161936"},"Children":[{"Type":"NodeText","Data":"插入调整站在祖父节点看"}]},{"ID":"20230817161937-smmfrmn","Type":"NodeParagraph","Properties":{"id":"20230817161937-smmfrmn","updated":"20230817161937"},"Children":[{"Type":"NodeText","Data":"删除调整站在父节点看"}]},{"ID":"20230817161938-hgzaqtg","Type":"NodeParagraph","Properties":{"id":"20230817161938-hgzaqtg","updated":"20230817161938"},"Children":[{"Type":"NodeText","Data":"插入和删除处理情况一共有五种"}]},{"ID":"20230817161939-3mbq0ux","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20230817161939-3mbq0ux","updated":"20230817161939"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"##### ","Properties":{"id":""}},{"Type":"NodeText","Data":"调整原则：调整之前路径上的黑色节点等于调整之后黑色节点的数量"}]},{"ID":"20230817161940-p359sb4","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20230817161940-p359sb4","updated":"20230817161940"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"##### ","Properties":{"id":""}},{"Type":"NodeText","Data":"插入调整："}]},{"ID":"20230817161941-aps7u8i","Type":"NodeParagraph","Properties":{"id":"20230817161941-aps7u8i","updated":"20230817161941"},"Children":[{"Type":"NodeText","Data":"1、出现双红 且叔叔节点是黑色"}]},{"ID":"20230817161942-l8lf3va","Type":"NodeParagraph","Properties":{"id":"20230817161942-l8lf3va","updated":"20230817161942"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"红黑树","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"E:\\红黑树调整\\红黑树.gif","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230817161943-m2fuc8z","Type":"NodeParagraph","Properties":{"id":"20230817161943-m2fuc8z","updated":"20230817161943"},"Children":[{"Type":"NodeText","Data":"调整方式就是将祖父节点变成红色 叔叔和父节点变成黑色"}]},{"ID":"20230817161944-j6p6qev","Type":"NodeParagraph","Properties":{"id":"20230817161944-j6p6qev","updated":"20230817161944"},"Children":[{"Type":"NodeText","Data":"而a图中的N节点可以在p和u的左右子树 所有总共有四种小情况 但总体调整方式都是上述调整"}]},{"ID":"20230817161945-64of8m9","Type":"NodeParagraph","Properties":{"id":"20230817161945-64of8m9","updated":"20230817161945"},"Children":[{"Type":"NodeText","Data":"2、出现双红 且叔叔节点是黑色"}]},{"ID":"20230817161946-botmigj","Type":"NodeParagraph","Properties":{"id":"20230817161946-botmigj","updated":"20230817161946"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"红黑树","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"E:\\红黑树调整\\红黑树.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230817161947-xydm88s","Type":"NodeParagraph","Properties":{"id":"20230817161947-xydm88s","updated":"20230817161947"},"Children":[{"Type":"NodeText","Data":"a图的调整方式是先大右旋 然后在进行上浮操作"}]},{"ID":"20230817161948-6pyr3gt","Type":"NodeParagraph","Properties":{"id":"20230817161948-6pyr3gt","updated":"20230817161948"},"Children":[{"Type":"NodeText","Data":"其中双红可能是LL LR RL RR四种情况 遇到 LR就是先小左旋 大右旋 而小左旋并不会影响平衡 所以其他两种调整方式(RL RR)与上面的类似"}]},{"ID":"20230817161949-hdouhbm","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20230817161949-hdouhbm","updated":"20230817161949"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"##### ","Properties":{"id":""}},{"Type":"NodeText","Data":"删除调整："}]},{"ID":"20230817161950-axfzint","Type":"NodeParagraph","Properties":{"id":"20230817161950-axfzint","updated":"20230817161950"},"Children":[{"Type":"NodeText","Data":"只有删除节点为0的黑色节点会引入双重黑 删除调整的maintain操作就是干掉双重黑"}]},{"ID":"20230817161951-zujsrzu","Type":"NodeParagraph","Properties":{"id":"20230817161951-zujsrzu","updated":"20230817161951"},"Children":[{"Type":"NodeText","Data":"而删除节点为1的黑色节点时(这个子节点只有可能是1个子红色节点) 只需要将红色节点变为黑色节点即平衡"}]},{"ID":"20230817161952-v8ny3ip","Type":"NodeHeading","HeadingLevel":6,"Properties":{"id":"20230817161952-v8ny3ip","updated":"20230817161952"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"###### ","Properties":{"id":""}},{"Type":"NodeText","Data":"干点双重黑的两大情况："}]},{"ID":"20230817161953-89lmqow","Type":"NodeList","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161953-89lmqow","updated":"20230817161953"},"Children":[{"ID":"20230817161954-b0nqfqa","Type":"NodeListItem","Data":"-","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161954-b0nqfqa","updated":"20230817161954"},"Children":[{"ID":"20230817161955-4qgm5h6","Type":"NodeParagraph","Properties":{"id":"20230817161955-4qgm5h6","updated":"20230817161955"},"Children":[{"Type":"NodeText","Data":"双重黑的兄弟节点为红色节点：解决方法是将有红色节点的那方左旋或右旋到另一方 并将原根节点变为红色 将原有的红色子节点变为黑色 此时的双重黑的兄弟节点就变成了黑色 就转化成了下面的情况进行解决"}]}]},{"ID":"20230817161956-vknb9eq","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161956-vknb9eq","updated":"20230817161956"},"Children":[{"ID":"20230817161957-sb8eo6m","Type":"NodeParagraph","Properties":{"id":"20230817161957-sb8eo6m","updated":"20230817161957"},"Children":[{"Type":"NodeText","Data":"双重黑的兄弟节点为黑色节点："}]}]}]},{"ID":"20230817161958-93x7hy7","Type":"NodeParagraph","Properties":{"id":"20230817161958-93x7hy7","updated":"20230817161958"},"Children":[{"Type":"NodeText","Data":"1、兄弟节点的左右子节点都为黑色节点"}]},{"ID":"20230817161959-hrwna5q","Type":"NodeParagraph","Properties":{"id":"20230817161959-hrwna5q","updated":"20230817161959"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"红黑树删除调整1","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"E:\\红黑树调整\\红黑树删除调整1.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230817161960-o3qmeem","Type":"NodeParagraph","Properties":{"id":"20230817161960-o3qmeem","updated":"20230817161960"},"Children":[{"Type":"NodeText","Data":"只需要将左右兄弟节点的黑色都将减去1 根节点加上1 然后回溯"}]},{"ID":"20230817161961-55yy1ln","Type":"NodeParagraph","Properties":{"id":"20230817161961-55yy1ln","updated":"20230817161961"},"Children":[{"Type":"NodeText","Data":"2、兄弟节点的子节点有红色节点 并且红色节点为右边 RR类型"}]},{"ID":"20230817161962-b97e9p8","Type":"NodeParagraph","Properties":{"id":"20230817161962-b97e9p8","updated":"20230817161962"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"红黑树删除调整2","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"E:\\红黑树调整\\红黑树删除调整2.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230817161963-1ani1qx","Type":"NodeParagraph","Properties":{"id":"20230817161963-1ani1qx","updated":"20230817161963"},"Children":[{"Type":"NodeText","Data":"将根节点进行大左旋 然后将左右子节点变为黑色节点 现根节点变为原来根节点的颜色"}]},{"ID":"20230817161964-ht2p1rh","Type":"NodeParagraph","Properties":{"id":"20230817161964-ht2p1rh","updated":"20230817161964"},"Children":[{"Type":"NodeText","Data":"3、兄弟节点的子节点有红色节点 并且红色节点为右边 RL类型"}]},{"ID":"20230817161965-oebn521","Type":"NodeParagraph","Properties":{"id":"20230817161965-oebn521","updated":"20230817161965"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"红黑树删除调整3","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"E:\\红黑树调整\\红黑树删除调整3.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230817161966-k7oy7mv","Type":"NodeParagraph","Properties":{"id":"20230817161966-k7oy7mv","updated":"20230817161966"},"Children":[{"Type":"NodeText","Data":"先经行小右旋 将原根结点的颜色变为红色 现根节点的颜色变为黑色 然后再进行上述大左旋的操作"}]},{"ID":"20230817161967-3iw35qh","Type":"NodeParagraph","Properties":{"id":"20230817161967-3iw35qh","updated":"20230817161967"},"Children":[{"Type":"NodeText","Data":"而LR LL的类型与上述RL RR类型方式对称"}]},{"ID":"20230817161968-u7okacd","Type":"NodeParagraph","Properties":{"id":"20230817161968-u7okacd","updated":"20230817161968"},"Children":[{"Type":"NodeText","Data":"完整红黑树代码"}]},{"ID":"20230817161969-hniyblc","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161969-hniyblc","updated":"20230817161969"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package com.pyy.Avl;\n\nimport java.util.Scanner;\n\n/**\n * author pyy\n * version 1.0\n */\npublic class RBTree {\n    static class Node{\n       int key=0;\n       int color=0;//0 red 1 black 2 double black 默认插入的永远是红色节点\n       Node left=NIL;\n       Node right=NIL;\n        public Node(int key) {\n            this.key = key;\n        }\n\n        public Node(int key, int color) {\n            this.key = key;\n            this.color = color;\n        }\n    }\n    static Node NIL=new Node(0,1);\n    public Node getNode(int key){\n        return  new Node(key);\n    }\n    public  Node insert(Node root,int key){\n        root=__insert(root,key);\n        root.color=1;//每次插入后将根节点更新为黑色节点\n        return root;\n    }\n    public Node __insert(Node root,int key){\n        if(root==NIL)return getNode(key);\n        if(key==root.key)return root;\n        if(key\u003croot.key){\n            root.left=__insert(root.left,key);\n        }else {\n            root.right=__insert(root.right,key);\n        }\n        return insert_maintain(root);\n    }\n    public Node preNode(Node root){\n        Node temp=root.left;\n        while (temp.right!=NIL)temp=temp.right;\n        return temp;\n    }\n    public  Node __remove(Node root,int key){\n        if(root==NIL)return root;\n        if(key\u003croot.key){\n            root.left=__remove(root.left,key);\n        }else  if(key\u003eroot.key){\n            root.right=__remove(root.right,key);\n        }else {\n            if(root.left==NIL||root.right==NIL){\n                Node temp=(root.left==NIL?root.right:root.left);\n                temp.color+=root.color;//整个调整过程的精髓所在 将原有子节点的颜色进行了更新 如果删除子节点的颜色是红色不会有影响 如果删除的是黑色且黑色子节点下有一个红色子节点 则将红色子节点加上黑色 则让原树平衡  如果删除的是黑色节点且是度为0的黑色节点 那么将空节点加上黑色 则变成了双重黑 至此双重黑引入 然后才有了后续后续的调整\n                return temp;\n            }else {\n                Node pre=preNode(root);\n                root.key=pre.key;\n                root.left=__remove(root.left,pre.key);\n            }\n        }\n       return remove_maintain(root);\n\n    }\n    public Node remove_maintain(Node root){\n        if(root.left.color!=2\u0026\u0026root.right.color!=2)return root;\n        int flag=0;\n        if(has_red_child(root)){\n            root.color=0;\n            if(root.left.color==0){\n                root=right_rotate(root);\n                flag=1;\n            }else {\n                root=left_rotate(root);\n                flag=2;\n            }\n            root.color=1;\n            if(flag==1){\n                root.right=remove_maintain(root.right);\n            }else {\n                root.left=remove_maintain(root.left);\n            }\n            return root;\n        }\n        if(root.left.color==1\u0026\u0026!has_red_child(root.left)|| root.right.color==1\u0026\u0026!has_red_child(root.right)){\n            root.left.color-=1;\n            root.right.color-=1;\n            root.color+=1;\n            return root;\n        }\n        if(root.left.color==1){\n            root.right.color=1;\n            if(root.left.left.color!=0){\n                root.left.color=0;\n                root.left=left_rotate(root.left);\n                root.left.color=1;\n            }\n            root.left.color=root.color;\n            root=right_rotate(root);\n        }else {\n            root.left.color=1;\n            if(root.right.right.color!=0){\n                root.right.color=0;\n                root.right=right_rotate(root.right);\n                root.right.color=1;\n            }\n            root.right.color=root.color;\n            root=left_rotate(root);\n        }\n        root.left.color=1;\n        root.right.color=1;\n        return root;\n\n    }\n    public Node remove(Node root,int key){\n        root=__remove(root,key);\n        root.color=1;\n        return root;\n    }\n    public  Node insert_maintain(Node root){\n        int flag=0;\n        if(root.left.color==0\u0026\u0026has_red_child(root.left))flag=1;\n        if(root.right.color==0\u0026\u0026has_red_child(root.right))flag=2;\n        if(flag==0)return root;\n        if(root.left.color==0\u0026\u0026root.right.color==0){\n            root.left.color=1;\n            root.right.color=1;\n            root.color=0;\n            return  root;\n        }\n        if(flag==1){\n            if(root.left.right.color==0){\n                root.left=left_rotate(root.left);\n            }\n           root= right_rotate(root);\n\n        }else {\n            if(root.right.left.color==0){\n                root.right=right_rotate(root.right);\n\n            }\n            root=left_rotate(root);\n        }\n        root.color=0;\n        root.left.color=1;\n        root.right.color=1;\n        return root;\n\n    }\n    public  Node left_rotate(Node root){\n       Node temp=root.right;\n       root.right=temp.left;\n       temp.left=root;\n       return temp;\n    }\n    public  Node right_rotate(Node root){\n        Node temp=root.left;\n        root.left=temp.right;\n        temp.right=root;\n        return temp;\n    }\n    public boolean has_red_child(Node root){\n       return root.left.color==0||root.right.color==0;\n    }\n    public  static void  print(Node root){\n        System.out.println(root.color+\" \"+root.key+\" \"+root.left.key+\" \"+root.right.key);\n    }\n\n public  static void  output(Node root){\n        if(root==NIL)return;\n        print(root);\n        output(root.left);\n        output(root.right);\n        return;\n }\n public  static boolean containskey(Node root,int key){\n        if(root==null)return false;\n        if(root.key==key)return true;\n        if(containskey(root.left,key))return  true;\n        if(containskey(root.right,key))return true;\n        return false;\n    }\n public static void main(String[] args) {\n        Node cur=NIL;\n        RBTree rbTree = new RBTree();\n        Scanner scanner = new Scanner(System.in);\n        while (scanner.hasNext()){\n            int op=scanner.nextInt();\n            int key=scanner.nextInt();\n            switch (op){\n                case 1:cur=rbTree.insert(cur,key);break;\n                case 2:cur=rbTree.remove(cur,key);break;\n            }\n            System.out.println(\"---rbtree--\");\n            output(cur);\n            System.out.println(\"--rbtree print done --\");\n        }\n    }\n\n\n}\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]}]}