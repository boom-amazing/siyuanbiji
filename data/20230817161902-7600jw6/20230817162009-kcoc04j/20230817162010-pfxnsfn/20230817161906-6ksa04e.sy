{"ID":"20230817161906-6ksa04e","Spec":"1","Type":"NodeDocument","Properties":{"id":"20230817161906-6ksa04e","title":"回溯","updated":"20230817161906"},"Children":[{"ID":"20230817161907-5nj7ew8","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230817161907-5nj7ew8","updated":"20230817161907"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"回溯"}]},{"ID":"20230817161908-yvh4380","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230817161908-yvh4380","updated":"20230817161908"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://leetcode-cn.com/problems/increasing-subsequences/","TextMarkTextContent":"491. 递增子序列"}]},{"ID":"20230817161909-7h9gmv6","Type":"NodeParagraph","Properties":{"id":"20230817161909-7h9gmv6","updated":"20230817161909"},"Children":[{"Type":"NodeText","Data":"难度中等403"}]},{"ID":"20230817161910-5jpbxy1","Type":"NodeParagraph","Properties":{"id":"20230817161910-5jpbxy1","updated":"20230817161910"},"Children":[{"Type":"NodeText","Data":"给你一个整数数组 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"nums"},{"Type":"NodeText","Data":" ，找出并返回所有该数组中不同的递增子序列，递增子序列中 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"至少有两个元素"},{"Type":"NodeText","Data":" 。你可以按 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"任意顺序"},{"Type":"NodeText","Data":" 返回答案。"}]},{"ID":"20230817161911-nbkl0ig","Type":"NodeParagraph","Properties":{"id":"20230817161911-nbkl0ig","updated":"20230817161911"},"Children":[{"Type":"NodeText","Data":"数组中可能含有重复元素，如出现两个整数相等，也可以视作递增序列的一种特殊情况。"}]},{"ID":"20230817161912-pruzyir","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161912-pruzyir","updated":"20230817161912"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"class Solution {\n   public void dfs(int start,int []nums,List\u003cInteger\u003e temp,List\u003cList\u003cInteger\u003e\u003eans){\n    if(temp.size()\u003e1){\n      ans.add(new ArrayList(temp));\n      }\n       HashSet\u003cInteger\u003e set= new HashSet();\n      for(int i=start;i\u003cnums.length;i++){\n         if(!set.add(nums[i]))continue;\n         if(!temp.isEmpty()\u0026\u0026nums[i]\u003ctemp.get(temp.size()-1))continue;\n         temp.add(nums[i]);\n         dfs(i+1,nums,temp,ans);\n         temp.remove(temp.size()-1);\n      }\n       return ;\n}\n    public List\u003cList\u003cInteger\u003e\u003e findSubsequences(int[] nums) {\n      List\u003cInteger\u003e temp=new ArrayList();\n      List\u003cList\u003cInteger\u003e\u003e ans= new ArrayList();\n      dfs(0,nums,temp,ans);\n      return ans;\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161913-dd06ukd","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230817161913-dd06ukd","updated":"20230817161913"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://leetcode-cn.com/problems/subsets/","TextMarkTextContent":"78. 子集"}]},{"ID":"20230817161914-8nhqmd2","Type":"NodeParagraph","Properties":{"id":"20230817161914-8nhqmd2","updated":"20230817161914"},"Children":[{"Type":"NodeText","Data":"难度中等1521"}]},{"ID":"20230817161915-t4tbmjp","Type":"NodeParagraph","Properties":{"id":"20230817161915-t4tbmjp","updated":"20230817161915"},"Children":[{"Type":"NodeText","Data":"给你一个整数数组 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"nums"},{"Type":"NodeText","Data":" ，数组中的元素 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"互不相同"},{"Type":"NodeText","Data":" 。返回该数组所有可能的子集（幂集）。"}]},{"ID":"20230817161916-9mmlfcy","Type":"NodeParagraph","Properties":{"id":"20230817161916-9mmlfcy","updated":"20230817161916"},"Children":[{"Type":"NodeText","Data":"解集 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"不能"},{"Type":"NodeText","Data":" 包含重复的子集。你可以按 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"任意顺序"},{"Type":"NodeText","Data":" 返回解集。"}]},{"ID":"20230817161917-o5wln35","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161917-o5wln35","updated":"20230817161917"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"class Solution {\n    public List\u003cList\u003cInteger\u003e\u003e subsets(int[] nums) {\n     List\u003cList\u003cInteger\u003e\u003e ans=new ArrayList();\n     List\u003cInteger\u003e temp=new ArrayList();\n     dfs(0,nums,temp,ans);\n     return ans;\n    }\n    public void dfs(int start,int []nums,List\u003cInteger\u003e temp,List\u003cList\u003cInteger\u003e\u003e ans){\n      ans.add(new ArrayList(temp));//貌似都不需要回溯 因为下面的for循环已经限制了选择的数量不会超过nums的大小\n      for(int i=start;i\u003cnums.length;i++){\n        temp.add(nums[i]);\n        dfs(i+1,nums,temp,ans);\n        temp.remove(temp.size()-1);\n      }\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161918-zsw01sp","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230817161918-zsw01sp","updated":"20230817161918"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://leetcode-cn.com/problems/subsets-ii/","TextMarkTextContent":"90. 子集 II"}]},{"ID":"20230817161919-h7fejv5","Type":"NodeParagraph","Properties":{"id":"20230817161919-h7fejv5","updated":"20230817161919"},"Children":[{"Type":"NodeText","Data":"难度中等764"}]},{"ID":"20230817161920-y8365dz","Type":"NodeParagraph","Properties":{"id":"20230817161920-y8365dz","updated":"20230817161920"},"Children":[{"Type":"NodeText","Data":"给你一个整数数组 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"nums"},{"Type":"NodeText","Data":" ，其中可能包含重复元素，请你返回该数组所有可能的子集（幂集）。"}]},{"ID":"20230817161921-qszkd9l","Type":"NodeParagraph","Properties":{"id":"20230817161921-qszkd9l","updated":"20230817161921"},"Children":[{"Type":"NodeText","Data":"解集 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"不能"},{"Type":"NodeText","Data":" 包含重复的子集。返回的解集中，子集可以按 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"任意顺序"},{"Type":"NodeText","Data":" 排列。"}]},{"ID":"20230817161922-r8wyiv4","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161922-r8wyiv4","updated":"20230817161922"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"class Solution {\n    public List\u003cList\u003cInteger\u003e\u003e subsetsWithDup(int[] nums) {\n        List\u003cInteger\u003e temp=new ArrayList();\n        List\u003cList\u003cInteger\u003e\u003e ans=new ArrayList();\n         Arrays.sort(nums);//必须要有这一步 即使你加了hashset去重 但是只能去除同一层不选择重复得节点 但是由于有重复的元素\n        //可能存在多个 那么可能会在其它层回溯的时候 导致一样出现相同的答案 比如[4,4,4,1,4]可能会出现4441 和  4414 以及\n        //441 414 如果排序了 就可能能让相同的元素出现在同一层 这个时候hashset就可以去重了\n        dfs(0,nums,temp,ans);\n        return ans;\n    }\n    public void dfs(int start,int []nums,List\u003cInteger\u003e temp,List\u003cList\u003cInteger\u003e\u003e ans){\n      ans.add(new ArrayList\u003cInteger\u003e(temp));\n      HashSet\u003cInteger\u003e h= new HashSet();\n      for(int i=start;i\u003cnums.length;i++){\n        if(!h.add(nums[i]))continue;\n        temp.add(nums[i]);\n        dfs(i+1,nums,temp,ans);\n        temp.remove(temp.size()-1);\n      }\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161923-h4x8vp1","Type":"NodeParagraph","Properties":{"id":"20230817161923-h4x8vp1","updated":"20230817161923"},"Children":[{"Type":"NodeText","Data":"没加sort结果"}]},{"ID":"20230817161924-nqnzm3g","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161924-nqnzm3g","updated":"20230817161924"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"输入\n[4,4,4,1,4]\n输出\n[[],[4],[4,4],[4,4,4],[4,4,4,1],[4,4,4,1,4],[4,4,4,4],[4,4,1],[4,4,1,4],[4,1],[4,1,4],[1],[1,4]]\n预期结果\n[[],[1],[1,4],[1,4,4],[1,4,4,4],[1,4,4,4,4],[4],[4,4],[4,4,4],[4,4,4,4]]\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161925-3oda1jx","Type":"NodeParagraph","Properties":{"id":"20230817161925-3oda1jx","updated":"20230817161925"},"Children":[{"Type":"NodeText","Data":"加了sort"}]},{"ID":"20230817161926-mjot9we","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161926-mjot9we","updated":"20230817161926"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"输入\n[4,4,4,1,4]\n输出\n[[],[1],[1,4],[1,4,4],[1,4,4,4],[1,4,4,4,4],[4],[4,4],[4,4,4],[4,4,4,4]]\n预期结果\n[[],[1],[1,4],[1,4,4],[1,4,4,4],[1,4,4,4,4],[4],[4,4],[4,4,4],[4,4,4,4]]\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161927-tsn8v2f","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230817161927-tsn8v2f","updated":"20230817161927"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://leetcode-cn.com/problems/combinations/","TextMarkTextContent":"77. 组合"}]},{"ID":"20230817161928-lbp1e5e","Type":"NodeParagraph","Properties":{"id":"20230817161928-lbp1e5e","updated":"20230817161928"},"Children":[{"Type":"NodeText","Data":"难度中等899"}]},{"ID":"20230817161929-l95xel0","Type":"NodeParagraph","Properties":{"id":"20230817161929-l95xel0","updated":"20230817161929"},"Children":[{"Type":"NodeText","Data":"给定两个整数 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"n"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"k"},{"Type":"NodeText","Data":"，返回范围 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"[1, n]"},{"Type":"NodeText","Data":" 中所有可能的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"k"},{"Type":"NodeText","Data":" 个数的组合。"}]},{"ID":"20230817161930-ro0we35","Type":"NodeParagraph","Properties":{"id":"20230817161930-ro0we35","updated":"20230817161930"},"Children":[{"Type":"NodeText","Data":"你可以按 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"任何顺序"},{"Type":"NodeText","Data":" 返回答案。"}]},{"ID":"20230817161931-i1rs53x","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161931-i1rs53x","updated":"20230817161931"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"class Solution {\n    public List\u003cList\u003cInteger\u003e\u003e combine(int n, int k) {\n      List\u003cInteger\u003e temp=new ArrayList();\n      List\u003cList\u003cInteger\u003e\u003e ans=new ArrayList();\n      dfs(1,n,k,temp,ans);\n      return ans;\n    }\n    public void dfs(int start,int n,int k,List\u003cInteger\u003etemp,List\u003cList\u003cInteger\u003e\u003e ans){\n      if(temp.size()==k) ans.add(new ArrayList(temp));\n      for(int i=start;i\u003c=n;i++){\n          temp.add(i);\n          dfs(i+1,n,k,temp,ans);\n          temp.remove(temp.size()-1);\n      }\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161932-4u1qyk6","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230817161932-4u1qyk6","updated":"20230817161932"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://leetcode-cn.com/problems/permutations/","TextMarkTextContent":"46. 全排列"}]},{"ID":"20230817161933-cnjsvyw","Type":"NodeParagraph","Properties":{"id":"20230817161933-cnjsvyw","updated":"20230817161933"},"Children":[{"Type":"NodeText","Data":"难度中等1842"}]},{"ID":"20230817161934-hfro1w3","Type":"NodeParagraph","Properties":{"id":"20230817161934-hfro1w3","updated":"20230817161934"},"Children":[{"Type":"NodeText","Data":"给定一个不含重复数字的数组 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"nums"},{"Type":"NodeText","Data":" ，返回其 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"所有可能的全排列"},{"Type":"NodeText","Data":" 。你可以 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"按任意顺序"},{"Type":"NodeText","Data":" 返回答案。"}]},{"ID":"20230817161935-bofry4a","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161935-bofry4a","updated":"20230817161935"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"class Solution {\n    public List\u003cList\u003cInteger\u003e\u003e permute(int[] nums) {\n     List\u003cInteger\u003e temp=new ArrayList();\n     List\u003cList\u003cInteger\u003e\u003e ans=new ArrayList();\n     dfs(nums,temp,ans);\n     return ans;\n    }\n    public void dfs(int []nums,List\u003cInteger\u003e temp,List\u003cList\u003cInteger\u003e\u003eans){\n      if(temp.size()==nums.length){\n        ans.add(new ArrayList(temp));\n      }\n      for(int i=0;i\u003cnums.length;i++){\n        if(temp.contains(nums[i]))continue;\n        temp.add(nums[i]);\n        dfs(nums,temp,ans);\n        temp.remove(temp.size()-1);\n      }\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161936-nanrvrs","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230817161936-nanrvrs","updated":"20230817161936"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://leetcode-cn.com/problems/permutations-ii/","TextMarkTextContent":"47. 全排列 II"}]},{"ID":"20230817161937-b5v1uop","Type":"NodeParagraph","Properties":{"id":"20230817161937-b5v1uop","updated":"20230817161937"},"Children":[{"Type":"NodeText","Data":"难度中等973"}]},{"ID":"20230817161938-16o7tuo","Type":"NodeParagraph","Properties":{"id":"20230817161938-16o7tuo","updated":"20230817161938"},"Children":[{"Type":"NodeText","Data":"给定一个可包含重复数字的序列 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"nums"},{"Type":"NodeText","Data":" ，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em strong","TextMarkTextContent":"按任意顺序"},{"Type":"NodeText","Data":" 返回所有不重复的全排列。"}]},{"ID":"20230817161939-4bbkjti","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161939-4bbkjti","updated":"20230817161939"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"class Solution {\n    public List\u003cList\u003cInteger\u003e\u003e permuteUnique(int[] nums) {\n      Arrays.sort(nums);\n     List\u003cInteger\u003e temp=new ArrayList();\n     List\u003cList\u003cInteger\u003e\u003e ans=new ArrayList();\n     boolean []vis=new boolean[nums.length];\n     Arrays.fill(vis,false);\n     dfs(nums,vis,temp,ans);\n     return ans;\n    }\n    int k=0;\n    public void dfs(int []nums,boolean []vis, List\u003cInteger\u003e temp,List\u003cList\u003cInteger\u003e\u003eans){\n      if(temp.size()==nums.length) {\n        ans.add(new ArrayList\u003c\u003e(temp));\n      }\n      HashSet\u003cInteger\u003e h=new HashSet();\n      for(int i=0;i\u003cnums.length;i++){\n        if(vis[i])continue;//注意这个一定要加载判重的前面 如果加在后面的话 每次相当于你不选择它 你也把他加入了进来 会导致\n        //下一层的元素怎么都加不进来\n        if(!h.add(nums[i])){\n          continue;\n        }\n         temp.add(nums[i]);\n         vis[i]=true;\n        dfs(nums,vis,temp,ans);\n        vis[i]=false;\n        temp.remove(temp.size()-1);\n      }\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161940-ly0bsjd","Type":"NodeParagraph","Properties":{"id":"20230817161940-ly0bsjd","updated":"20230817161940"},"Children":[{"Type":"NodeText","Data":"错误示范："}]},{"ID":"20230817161941-7znnl1f","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161941-7znnl1f","updated":"20230817161941"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"class Solution {\n    public List\u003cList\u003cInteger\u003e\u003e permuteUnique(int[] nums) {\n      Arrays.sort(nums);\n     List\u003cInteger\u003e temp=new ArrayList();\n     List\u003cList\u003cInteger\u003e\u003e ans=new ArrayList();\n     boolean []vis=new boolean[nums.length];\n     Arrays.fill(vis,false);\n     dfs(nums,vis,temp,ans);\n     return ans;\n    }\n    int k=0;\n    public void dfs(int []nums,boolean []vis, List\u003cInteger\u003e temp,List\u003cList\u003cInteger\u003e\u003eans){\n      if(temp.size()==nums.length) {\n        ans.add(new ArrayList\u003c\u003e(temp));\n      }\n      HashSet\u003cInteger\u003e h=new HashSet();\n      for(int i=0;i\u003cnums.length;i++){\n        if(!h.add(nums[i])){\n          continue;\n        }\n         if(vis[i])continue; //注意这个一定要加载判重的前面 如果加在后面的话 每次相当于你不选择它 你也把他加入了进来 会导致下一层的元素怎么都加不进来\n         temp.add(nums[i]);\n         vis[i]=true;\n        dfs(nums,vis,temp,ans);\n        vis[i]=false;\n        temp.remove(temp.size()-1);\n      }\n    }\n}\n\n结果为：\n输入\n[1,2,2]\n输出\n[]\n预期结果\n[[1,2,2],[2,1,2],[2,2,1]]\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161942-lknuwd9","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230817161942-lknuwd9","updated":"20230817161942"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://leetcode-cn.com/problems/sudoku-solver/","TextMarkTextContent":"37. 解数独"}]},{"ID":"20230817161943-2aojji1","Type":"NodeParagraph","Properties":{"id":"20230817161943-2aojji1","updated":"20230817161943"},"Children":[{"Type":"NodeText","Data":"难度困难1159"}]},{"ID":"20230817161944-2xgm4z3","Type":"NodeParagraph","Properties":{"id":"20230817161944-2xgm4z3","updated":"20230817161944"},"Children":[{"Type":"NodeText","Data":"编写一个程序，通过填充空格来解决数独问题。"}]},{"ID":"20230817161945-pit7tu9","Type":"NodeParagraph","Properties":{"id":"20230817161945-pit7tu9","updated":"20230817161945"},"Children":[{"Type":"NodeText","Data":"数独的解法需 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"遵循如下规则"},{"Type":"NodeText","Data":"："}]},{"ID":"20230817161946-xirj3mm","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20230817161946-xirj3mm","updated":"20230817161946"},"Children":[{"ID":"20230817161947-1bzcagn","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20230817161947-1bzcagn","updated":"20230817161947"},"Children":[{"ID":"20230817161948-wd2ccg7","Type":"NodeParagraph","Properties":{"id":"20230817161948-wd2ccg7","updated":"20230817161948"},"Children":[{"Type":"NodeText","Data":"数字 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"1-9"},{"Type":"NodeText","Data":" 在每一行只能出现一次。"}]}]},{"ID":"20230817161949-1ispvuy","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20230817161949-1ispvuy","updated":"20230817161949"},"Children":[{"ID":"20230817161950-y2mw7f6","Type":"NodeParagraph","Properties":{"id":"20230817161950-y2mw7f6","updated":"20230817161950"},"Children":[{"Type":"NodeText","Data":"数字 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"1-9"},{"Type":"NodeText","Data":" 在每一列只能出现一次。"}]}]},{"ID":"20230817161951-73a1oa7","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20230817161951-73a1oa7","updated":"20230817161951"},"Children":[{"ID":"20230817161952-20cgnb8","Type":"NodeParagraph","Properties":{"id":"20230817161952-20cgnb8","updated":"20230817161952"},"Children":[{"Type":"NodeText","Data":"数字 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"1-9"},{"Type":"NodeText","Data":" 在每一个以粗实线分隔的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"3x3"},{"Type":"NodeText","Data":" 宫内只能出现一次。（请参考示例图）"}]}]}]},{"ID":"20230817161953-yhqom8y","Type":"NodeParagraph","Properties":{"id":"20230817161953-yhqom8y","updated":"20230817161953"},"Children":[{"Type":"NodeText","Data":"数独部分空格内已填入了数字，空白格用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"'.'"},{"Type":"NodeText","Data":" 表示。"}]},{"ID":"20230817161954-t56vrq6","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161954-t56vrq6","updated":"20230817161954"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"class Solution {\n    public void solveSudoku(char[][] board) {\n     dfs(board);\n    }\n    public boolean dfs(char[][]board){\n     for(int i=0;i\u003cboard.length;i++){\n       for(int j=0;j\u003cboard[0].length;j++){\n         if(board[i][j]!='.')continue;\n         for(char ch='1';ch\u003c='9';ch++){\n             if(!isValid(i,j,ch,board))continue;\n               board[i][j]=ch;\n              if(dfs(board))return true;\n              board[i][j]='.'; \n         }\n         return false;\n       }\n     }\n    return true;   \n  }\n  public boolean isValid(int row,int column,char val,char[][]board){\n    for(int i=0;i\u003c9;i++){\n      if(board[row][i]==val||board[i][column]==val)return false;\n    }\n    int startRow=(row/3)*3;\n    int starColumn=(column/3)*3;\n    for(int i=startRow;i\u003cstartRow+3;i++){\n      for(int j=starColumn;j\u003cstarColumn+3;j++){\n        if(board[i][j]==val)return false;\n      }\n    }\n    return true;\n     }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161955-acg0hk2","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230817161955-acg0hk2","updated":"20230817161955"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://leetcode-cn.com/problems/valid-sudoku/","TextMarkTextContent":"36. 有效的数独"}]},{"ID":"20230817161956-gx7bra9","Type":"NodeParagraph","Properties":{"id":"20230817161956-gx7bra9","updated":"20230817161956"},"Children":[{"Type":"NodeText","Data":"难度中等794"}]},{"ID":"20230817161957-q5nce61","Type":"NodeParagraph","Properties":{"id":"20230817161957-q5nce61","updated":"20230817161957"},"Children":[{"Type":"NodeText","Data":"请你判断一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"9 x 9"},{"Type":"NodeText","Data":" 的数独是否有效。只需要 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"根据以下规则"},{"Type":"NodeText","Data":" ，验证已经填入的数字是否有效即可。"}]},{"ID":"20230817161958-rpb984h","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20230817161958-rpb984h","updated":"20230817161958"},"Children":[{"ID":"20230817161959-0rlyd4o","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20230817161959-0rlyd4o","updated":"20230817161959"},"Children":[{"ID":"20230817161960-128yss1","Type":"NodeParagraph","Properties":{"id":"20230817161960-128yss1","updated":"20230817161960"},"Children":[{"Type":"NodeText","Data":"数字 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"1-9"},{"Type":"NodeText","Data":" 在每一行只能出现一次。"}]}]},{"ID":"20230817161961-ghif259","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20230817161961-ghif259","updated":"20230817161961"},"Children":[{"ID":"20230817161962-jm3m68e","Type":"NodeParagraph","Properties":{"id":"20230817161962-jm3m68e","updated":"20230817161962"},"Children":[{"Type":"NodeText","Data":"数字 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"1-9"},{"Type":"NodeText","Data":" 在每一列只能出现一次。"}]}]},{"ID":"20230817161963-pzut5gf","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20230817161963-pzut5gf","updated":"20230817161963"},"Children":[{"ID":"20230817161964-59le7dz","Type":"NodeParagraph","Properties":{"id":"20230817161964-59le7dz","updated":"20230817161964"},"Children":[{"Type":"NodeText","Data":"数字 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"1-9"},{"Type":"NodeText","Data":" 在每一个以粗实线分隔的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"3x3"},{"Type":"NodeText","Data":" 宫内只能出现一次。（请参考示例图）"}]}]}]},{"ID":"20230817161965-5no61gq","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161965-5no61gq","updated":"20230817161965"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"class Solution {\n    public boolean isValidSudoku(char[][] board) {\n       for(int i=0;i\u003cboard.length;i++){\n         for(int j=0;j\u003cboard[0].length;j++){\n           if(board[i][j]=='.')continue;\n           if(!isValid(i,j,board[i][j],board))return false;\n         }\n       } \n       return true;    \n    }\n  public boolean isValid(int row,int column,char val,char[][]board){\n    for(int i=0;i\u003c9;i++){\n      if(i!=column\u0026\u0026board[row][i]==val)return false;\n          if(i!=row\u0026\u0026board[i][column]==val)return false;\n    }\n    int startRow=(row/3)*3;\n    int starColumn=(column/3)*3;\n    for(int i=startRow;i\u003cstartRow+3;i++){\n      for(int j=starColumn;j\u003cstarColumn+3;j++){\n        if(i!=row\u0026\u0026j!=column\u0026\u0026board[i][j]==val)return false;\n      }\n    }\n    return true;\n     }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161966-7djy480","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230817161966-7djy480","updated":"20230817161966"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://leetcode-cn.com/problems/generate-parentheses/","TextMarkTextContent":"22. 括号生成"}]},{"ID":"20230817161967-1q79zh2","Type":"NodeParagraph","Properties":{"id":"20230817161967-1q79zh2","updated":"20230817161967"},"Children":[{"Type":"NodeText","Data":"难度中等2447"}]},{"ID":"20230817161968-bpz36os","Type":"NodeParagraph","Properties":{"id":"20230817161968-bpz36os","updated":"20230817161968"},"Children":[{"Type":"NodeText","Data":"数字 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"n"},{"Type":"NodeText","Data":" 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"有效的"},{"Type":"NodeText","Data":" 括号组合。"}]},{"ID":"20230817161969-b2vtcyj","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161969-b2vtcyj","updated":"20230817161969"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"class Solution {\n    public List\u003cString\u003e generateParenthesis(int n) {\n     StringBuffer str=new StringBuffer();\n     List\u003cString\u003e ans=new ArrayList();\n     dfs(n,n,str,ans); \n     return ans;\n   }\n   public void dfs(int left,int right,StringBuffer str,List\u003cString\u003e ans){//left代表左括号的数量 \n   //right代表右括号的数量 \n     if(left\u003c0||right\u003c0)return;\n     if(left\u003eright)return ;\n     if(left==0\u0026\u0026right==0) ans.add(new String(str));\n    str.append('(');//当前位置无异于就是两种情况 选左括号 或者选右括号\n     dfs(left-1,right,str,ans);\n     str.deleteCharAt(str.length()-1);\n      str.append(')');\n     dfs(left,right-1,str,ans);\n     str.deleteCharAt(str.length()-1);\n   }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]}]}