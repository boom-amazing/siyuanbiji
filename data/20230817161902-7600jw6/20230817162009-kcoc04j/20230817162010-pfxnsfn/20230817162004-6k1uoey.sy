{"ID":"20230817162004-6k1uoey","Spec":"1","Type":"NodeDocument","Properties":{"id":"20230817162004-6k1uoey","title":"滑动窗口问题","updated":"20230817162004"},"Children":[{"ID":"20230817162005-rs3qxi4","Type":"NodeParagraph","Properties":{"id":"20230817162005-rs3qxi4","updated":"20230817162005"},"Children":[{"Type":"NodeText","Data":"滑动窗口"}]},{"ID":"20230817162006-59jk40q","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230817162006-59jk40q","updated":"20230817162006"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/","TextMarkTextContent":"3. 无重复字符的最长子串"}]},{"ID":"20230817162007-9dezbcb","Type":"NodeParagraph","Properties":{"id":"20230817162007-9dezbcb","updated":"20230817162007"},"Children":[{"Type":"NodeText","Data":"难度中等7160"}]},{"ID":"20230817162008-buwxm9n","Type":"NodeParagraph","Properties":{"id":"20230817162008-buwxm9n","updated":"20230817162008"},"Children":[{"Type":"NodeText","Data":"给定一个字符串 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"s"},{"Type":"NodeText","Data":" ，请你找出其中不含有重复字符的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"最长子串"},{"Type":"NodeText","Data":" 的长度。"}]},{"ID":"20230817162009-6yez65r","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817162009-6yez65r","updated":"20230817162009"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"class Solution {\n    public int lengthOfLongestSubstring(String s) {\n     char [] chars= s.toCharArray();\n     int maxlen=0;\n     HashSet\u003cCharacter\u003e h=new HashSet();\n     int n=chars.length;\n     int i=0,j=0;\n     while(i\u003cn){\n        if(j\u003cn\u0026\u0026!h.contains(chars[j])){\n          h.add(chars[j]);\n          maxlen=Math.max(maxlen,j-i+1);\n          j++;\n        }else{\n          h.remove(chars[i]);//滑动窗口一定要注意在收缩窗口时原有的条件进行过滤\n          i++;\n        }\n        \n       }\n       return maxlen;\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]}]}