{"ID":"20230817161905-7fkdnns","Spec":"1","Type":"NodeDocument","Properties":{"id":"20230817161905-7fkdnns","title":"Scala面向对象编程","updated":"20230817161905"},"Children":[{"ID":"20230817161906-sro56uk","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230817161906-sro56uk","updated":"20230817161906"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"Scala面向对象编程"}]},{"ID":"20230817161907-ug2osqq","Type":"NodeParagraph","Properties":{"id":"20230817161907-ug2osqq","updated":"20230817161907"},"Children":[{"Type":"NodeText","Data":"在这里我们主要学习Scala中的类、对象和接口"}]},{"ID":"20230817161908-7m9bkeh","Type":"NodeParagraph","Properties":{"id":"20230817161908-7m9bkeh","updated":"20230817161908"},"Children":[{"Type":"NodeText","Data":"注意："},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"Scala中类和java中的类基本是类似的"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"Scala中的对象时需要定义的，而java中的对象是通过class new出来的"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"Scala中的接口是trait，java中的接口是interface"}]},{"ID":"20230817161909-kviveg0","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230817161909-kviveg0","updated":"20230817161909"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"类-class"}]},{"ID":"20230817161910-08joarv","Type":"NodeParagraph","Properties":{"id":"20230817161910-08joarv","updated":"20230817161910"},"Children":[{"Type":"NodeText","Data":"首先看一下类"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"Scala中定义类和Java一样，都是使用 class 关键字"}]},{"ID":"20230817161911-zm5u8nc","Type":"NodeParagraph","Properties":{"id":"20230817161911-zm5u8nc","updated":"20230817161911"},"Children":[{"Type":"NodeText","Data":"和Java一样，使用new关键字创建对象"}]},{"ID":"20230817161912-1rxd24h","Type":"NodeParagraph","Properties":{"id":"20230817161912-1rxd24h","updated":"20230817161912"},"Children":[{"Type":"NodeText","Data":"那下面来看一个具体案例"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"定义Person类，创建对象并调用其方法"}]},{"ID":"20230817161913-r9d6esw","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"c2NhbGE=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161913-r9d6esw","updated":"20230817161913"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c2NhbGE=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"class Person{\n    var name = \"scala\"\n    def sayHello(){\n        println(\"Hello,\"+name)\n    }\n    def getName= name\n}\n代码块1234567\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161914-0bvxxex","Type":"NodeBlockquote","Properties":{"id":"20230817161914-0bvxxex","updated":"20230817161914"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20230817161915-b5az2dt","Type":"NodeParagraph","Properties":{"id":"20230817161915-b5az2dt","updated":"20230817161915"},"Children":[{"Type":"NodeText","Data":"注意：如果在定义方法的时候指定了()，那么在调用的时候()可写可不写，如果在定义方法的时候没指定()，则调用方法时肯定不能带()"}]}]},{"ID":"20230817161916-1n595nn","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161916-1n595nn","updated":"20230817161916"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"scala\u003e val p = new Person()\np: Person = Person@23b8d9f3\n\nscala\u003e p.sayHello()\nHello,scala\n\nscala\u003e p.sayHello\nHello,scala\n\nscala\u003e println(p.getName)\nscala\n\nscala\u003e println(p.getName())\n\u003cconsole\u003e:10: error: not enough arguments for method apply: (index: Int)Char in class StringOps.\nUnspecified value parameter index.\n              println(p.getName())\n代码块12345678910111213141516\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161917-tplo02n","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230817161917-tplo02n","updated":"20230817161917"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"constructor"}]},{"ID":"20230817161918-sg9l5bw","Type":"NodeParagraph","Properties":{"id":"20230817161918-sg9l5bw","updated":"20230817161918"},"Children":[{"Type":"NodeText","Data":"类创建好了，下面我们来看一下类中的构造函数，"}]},{"ID":"20230817161919-9fna4fb","Type":"NodeParagraph","Properties":{"id":"20230817161919-9fna4fb","updated":"20230817161919"},"Children":[{"Type":"NodeText","Data":"Scala类中的构造函数可以分为主构造函数和辅助构造函数"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"这两种构造函数有什么区别呢？"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"主constructor：类似Java的默认构造函数 this()"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"辅助constructor：类似Java的重载构造函数 this(name,age)"}]},{"ID":"20230817161920-oewuvf8","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230817161920-oewuvf8","updated":"20230817161920"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"主constructor"}]},{"ID":"20230817161921-011j2gv","Type":"NodeParagraph","Properties":{"id":"20230817161921-011j2gv","updated":"20230817161921"},"Children":[{"Type":"NodeText","Data":"那先来看一下主构造函数"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"Scala的主constructor是与类名放在一起的，与Java不同，Java中的构造函数是写在类内部的"}]},{"ID":"20230817161922-0tr2toh","Type":"NodeBlockquote","Properties":{"id":"20230817161922-0tr2toh","updated":"20230817161922"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20230817161923-uaf498s","Type":"NodeParagraph","Properties":{"id":"20230817161923-uaf498s","updated":"20230817161923"},"Children":[{"Type":"NodeText","Data":"注意：在类中，没有定义在任何方法或者是代码块之中的代码就是主constructor的代码"}]}]},{"ID":"20230817161924-mnnv2kq","Type":"NodeParagraph","Properties":{"id":"20230817161924-mnnv2kq","updated":"20230817161924"},"Children":[{"Type":"NodeText","Data":"上代码："},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"先定义一个Student类"}]},{"ID":"20230817161925-enb0wnc","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161925-enb0wnc","updated":"20230817161925"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"class Student(val name:String,val age:Int){\n    println(\"your name is \" + name + \", your age is \" + age)\n}\n代码块123\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161926-zrogofg","Type":"NodeParagraph","Properties":{"id":"20230817161926-zrogofg","updated":"20230817161926"},"Children":[{"Type":"NodeText","Data":"创建对象"}]},{"ID":"20230817161927-6xd0mrj","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161927-6xd0mrj","updated":"20230817161927"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"scala\u003e new Student(\"zs\",19)\nyour name is zs, your age is 19\nres8: Student = Student@3134153d\n代码块123\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161928-xgb41cr","Type":"NodeParagraph","Properties":{"id":"20230817161928-xgb41cr","updated":"20230817161928"},"Children":[{"Type":"NodeText","Data":"在创建对象的时候，类中的println语句执行了，说明这个语句属于主构造函数中的代码"}]},{"ID":"20230817161929-gjj3lux","Type":"NodeParagraph","Properties":{"id":"20230817161929-gjj3lux","updated":"20230817161929"},"Children":[{"Type":"NodeText","Data":"主constructor中还可以通过使用默认参数，来给参数设置默认值"}]},{"ID":"20230817161930-tv5qdwt","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161930-tv5qdwt","updated":"20230817161930"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"class Student(val name:String = \"jack\",val age:Int = 20){\n    println(\"your name is \" + name + \", your age is \" + age)\n}\n代码块123\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161931-nox7bic","Type":"NodeParagraph","Properties":{"id":"20230817161931-nox7bic","updated":"20230817161931"},"Children":[{"Type":"NodeText","Data":"创建对象"}]},{"ID":"20230817161932-u48rfo0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161932-u48rfo0","updated":"20230817161932"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"scala\u003e new Student()\nyour name is jack, your age is 20\nres10: Student = Student@7ddd84b5\n\nscala\u003e new Student(\"tom\",18)\nyour name is tom, your age is 18\nres11: Student = Student@a09303\n代码块1234567\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161933-gfe86g0","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230817161933-gfe86g0","updated":"20230817161933"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"辅助constructor"}]},{"ID":"20230817161934-nhd48pl","Type":"NodeParagraph","Properties":{"id":"20230817161934-nhd48pl","updated":"20230817161934"},"Children":[{"Type":"NodeText","Data":"Scala中，可以给类定义多个辅助constructor，类似于java中的构造函数重载"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"辅助constructor之间可以互相调用，但是第一行必须调用主constructor"}]},{"ID":"20230817161935-iqpysql","Type":"NodeParagraph","Properties":{"id":"20230817161935-iqpysql","updated":"20230817161935"},"Children":[{"Type":"NodeText","Data":"来看一个案例："},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"给学生指定姓名和年龄信息"}]},{"ID":"20230817161936-54esb6c","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161936-54esb6c","updated":"20230817161936"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"class Student {\n  var name = \"jack\"\n  var age = 10\n  def this(name: String) {\n    this()\n    this.name = name\n  }\n  def this(name: String, age: Int) {\n    this(name)\n    this.age = age\n  }\n}\n代码块123456789101112\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161937-1t5pz38","Type":"NodeParagraph","Properties":{"id":"20230817161937-1t5pz38","updated":"20230817161937"},"Children":[{"Type":"NodeText","Data":"执行"}]},{"ID":"20230817161938-r754y7r","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161938-r754y7r","updated":"20230817161938"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"scala\u003e val s = new Student(\"tom\")\ns: Student = Student@1a538ed8\n\nscala\u003e val s = new Student(\"mick\",30)\ns: Student = Student@319642db\n代码块12345\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161939-djpnqaa","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230817161939-djpnqaa","updated":"20230817161939"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"对象-object"}]},{"ID":"20230817161940-bw1f9dq","Type":"NodeParagraph","Properties":{"id":"20230817161940-bw1f9dq","updated":"20230817161940"},"Children":[{"Type":"NodeText","Data":"前面我们学习的scala中的class和java中的class是类似的，下面来看一个java中没有的内容，叫Object"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"那大家可能有疑问了，Java中也有object，通过class就可以创建object"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"但是注意了，在scala中，我们可以直接定义一个object，就像定义class一样。"}]},{"ID":"20230817161941-6lxsuxi","Type":"NodeParagraph","Properties":{"id":"20230817161941-6lxsuxi","updated":"20230817161941"},"Children":[{"Type":"NodeText","Data":"object：相当于class的单个实例，通常在里面放一些静态的field或者method"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"object不能定义带参数的constructor，只有空参的constructor"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"第一次调用object的方法时，会执行object的constructor，也就是执行object内部不在任何方法中的代码，因为它只有空参的构造函数"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"但是注意，object的constructor的代码只会在他第一次被调用时执行一次，以后再次调用就不会再执行了"}]},{"ID":"20230817161942-d2u5058","Type":"NodeParagraph","Properties":{"id":"20230817161942-d2u5058","updated":"20230817161942"},"Children":[{"Type":"NodeText","Data":"object通常用于作为单例模式的实现，或者放class的一些静态成员，比如工具方法"}]},{"ID":"20230817161943-hsevx08","Type":"NodeParagraph","Properties":{"id":"20230817161943-hsevx08","updated":"20230817161943"},"Children":[{"Type":"NodeText","Data":"object可以直接使用，不能new"}]},{"ID":"20230817161944-87a04ts","Type":"NodeParagraph","Properties":{"id":"20230817161944-87a04ts","updated":"20230817161944"},"Children":[{"Type":"NodeText","Data":"创建一个object，使用object关键字"}]},{"ID":"20230817161945-y0sw4s0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161945-y0sw4s0","updated":"20230817161945"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"object Person {\n  var age = 1\n  println(\"this Person object!\")\n  def getAge  = age \n}\n代码块12345\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161946-7c8a8qg","Type":"NodeParagraph","Properties":{"id":"20230817161946-7c8a8qg","updated":"20230817161946"},"Children":[{"Type":"NodeText","Data":"执行，直接通过Object的名称调用属性或者方法即可，类似于Java中的静态类"}]},{"ID":"20230817161947-8qjnua7","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161947-8qjnua7","updated":"20230817161947"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"scala\u003e Person\nthis Person object!\nres18: Person.type = Person$@73e776b7\n\nscala\u003e Person.age\nres19: Int = 1\n\nscala\u003e Person.getAge\nres20: Int = 1\n代码块123456789\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161948-hjc0w2v","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230817161948-hjc0w2v","updated":"20230817161948"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"伴生对象"}]},{"ID":"20230817161949-psvbttn","Type":"NodeParagraph","Properties":{"id":"20230817161949-psvbttn","updated":"20230817161949"},"Children":[{"Type":"NodeText","Data":"前面学习了class和object，那下面再来看一个特殊的概念，伴生对象"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"如果有一个class，还有一个与class同名的object，那么就称这个object是class的 伴生对象 ，class是object的 伴生类"}]},{"ID":"20230817161950-n07wf6b","Type":"NodeBlockquote","Properties":{"id":"20230817161950-n07wf6b","updated":"20230817161950"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20230817161951-b07vixa","Type":"NodeParagraph","Properties":{"id":"20230817161951-b07vixa","updated":"20230817161951"},"Children":[{"Type":"NodeText","Data":"注意：伴生类和伴生对象必须存放在一个.scala文件之中"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"伴生类和伴生对象最大特点在于可以互相访问private field"}]}]},{"ID":"20230817161952-9lzxzsr","Type":"NodeParagraph","Properties":{"id":"20230817161952-9lzxzsr","updated":"20230817161952"},"Children":[{"Type":"NodeText","Data":"创建一个Person object和Person class"}]},{"ID":"20230817161953-76up5yw","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161953-76up5yw","updated":"20230817161953"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"object Person {\n  private val fdNum= 1\n  def getFdNum = fdNum\n}\nclass Person(val name: String, val age: Int) {\n  def sayHello = println(\"Hi, \" + name + \",you are \" + age + \" years old!\" + \", and you  have \" + Person.fdNum+ \" friend.\")\n}\n代码块1234567\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161954-luhodf3","Type":"NodeParagraph","Properties":{"id":"20230817161954-luhodf3","updated":"20230817161954"},"Children":[{"Type":"NodeText","Data":"执行"}]},{"ID":"20230817161955-m31zbuj","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161955-m31zbuj","updated":"20230817161955"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"scala\u003e new Person(\"tom\",20).sayHello\nHi, tom,you are 20 years old!, and you  have 1 friend.\n\nscala\u003e Person.fdNum\n\u003cconsole\u003e:9: error: value fdNum is not a member of object Person\n              Person.fdNum\n                     ^\n\nscala\u003e Person.getFdNum\nres26: Int = 1\n代码块12345678910\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161956-sio6p71","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230817161956-sio6p71","updated":"20230817161956"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"apply"}]},{"ID":"20230817161957-52gtaal","Type":"NodeParagraph","Properties":{"id":"20230817161957-52gtaal","updated":"20230817161957"},"Children":[{"Type":"NodeText","Data":"apply是object中非常重要的一个特殊方法，通常在伴生对象中实现apply方法，并在其中实现构造伴生类对象的功能"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"在创建对象的时候，就不需要使用new Class的方式，而是使用Class()的方式，隐式调用伴生对象的apply方法，这样会让对象创建更加简洁"}]},{"ID":"20230817161958-s4xf59q","Type":"NodeParagraph","Properties":{"id":"20230817161958-s4xf59q","updated":"20230817161958"},"Children":[{"Type":"NodeText","Data":"例如：Array的伴生对象的apply方法就实现了接收可变数量的参数，以及会创建一个Array对象"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"val a = Array(1, 2, 3, 4, 5)"}]},{"ID":"20230817161959-gch9nx8","Type":"NodeParagraph","Properties":{"id":"20230817161959-gch9nx8","updated":"20230817161959"},"Children":[{"Type":"NodeText","Data":"看一下文档"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"图片描述","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://img.mukewang.com/wiki/5f51af4e09b6cff512690470.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"查看Array的源码"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"图片描述","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://img.mukewang.com/wiki/5f51af5309c42a6d16480929.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"从Array object的源码中可以看出来，它里面就是在apply方法内部使用new Array创建的对象"}]},{"ID":"20230817161960-abiogzl","Type":"NodeParagraph","Properties":{"id":"20230817161960-abiogzl","updated":"20230817161960"},"Children":[{"Type":"NodeText","Data":"下面我们来自己定义一个伴生类和伴生对象"}]},{"ID":"20230817161961-qdgez8q","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161961-qdgez8q","updated":"20230817161961"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"class Person(val name: String){\n  println(\"my name is,\"+name)\n}\n\nobject Person {\n  def apply(name: String) = {\n    println(\"apply exec...\")\n    new Person(name)\n  }\n}\n代码块12345678910\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161962-00799l4","Type":"NodeParagraph","Properties":{"id":"20230817161962-00799l4","updated":"20230817161962"},"Children":[{"Type":"NodeText","Data":"执行"}]},{"ID":"20230817161963-5a7jhsu","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161963-5a7jhsu","updated":"20230817161963"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"scala\u003e new Person(\"tom\")\nmy name is,tom\nres29: Person = Person@63917fe1\n\nscala\u003e Person(\"tom\")\napply exec...\nmy name is,tom\nres30: Person = Person@35e74e08\n代码块12345678\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161964-hd1i41p","Type":"NodeBlockquote","Properties":{"id":"20230817161964-hd1i41p","updated":"20230817161964"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20230817161965-54651hs","Type":"NodeParagraph","Properties":{"id":"20230817161965-54651hs","updated":"20230817161965"},"Children":[{"Type":"NodeText","Data":"注意：在这里new Person(“zhang”) 等于 Person(“zhang”)，都是获取Person的对象"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"只不过Person(“zhang”)是用的object中apply方法"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"而new Person(“zhang”)是直接基于class创建的"}]}]},{"ID":"20230817161966-y3hgyzx","Type":"NodeParagraph","Properties":{"id":"20230817161966-y3hgyzx","updated":"20230817161966"},"Children":[{"Type":"NodeText","Data":"这两种方式肯定Person(“zhang”)这种方式使用起来更加方便简洁"}]},{"ID":"20230817161967-xyw3fvb","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230817161967-xyw3fvb","updated":"20230817161967"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"main方法"}]},{"ID":"20230817161968-xo64h6q","Type":"NodeParagraph","Properties":{"id":"20230817161968-xo64h6q","updated":"20230817161968"},"Children":[{"Type":"NodeText","Data":"接下来看一下scala中的main方法"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"和Java一样，在Scala中如果要运行一个应用程序，必须有一个main方法，作为入口"}]},{"ID":"20230817161969-ka4v9yn","Type":"NodeParagraph","Properties":{"id":"20230817161969-ka4v9yn","updated":"20230817161969"},"Children":[{"Type":"NodeText","Data":"Scala中的main方法必须定义在object中，格式为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"def main(args: Array[String])"}]}]}