{"ID":"20230817161713-1kj57cx","Spec":"1","Type":"NodeDocument","Properties":{"id":"20230817161713-1kj57cx","title":"Flume高级组件","updated":"20230817161713"},"Children":[{"ID":"20230817161714-n8l2rpr","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230817161714-n8l2rpr","updated":"20230817161714"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Flume的高级组件"}]},{"ID":"20230817161715-az8tdme","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230817161715-az8tdme","updated":"20230817161715"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"高级组件"}]},{"ID":"20230817161716-9ztt50r","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161716-9ztt50r","updated":"20230817161716"},"Children":[{"ID":"20230817161717-9mxdfvt","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161717-9mxdfvt","updated":"20230817161717"},"Children":[{"ID":"20230817161718-p9udtjh","Type":"NodeParagraph","Properties":{"id":"20230817161718-p9udtjh","updated":"20230817161718"},"Children":[{"Type":"NodeText","Data":"Source Interceptors：Source可以指定一个或者多个拦截器按先后顺序依次对采集到的数据进行处理。"}]}]},{"ID":"20230817161719-ieamx6z","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161719-ieamx6z","updated":"20230817161719"},"Children":[{"ID":"20230817161720-ticrt2t","Type":"NodeParagraph","Properties":{"id":"20230817161720-ticrt2t","updated":"20230817161720"},"Children":[{"Type":"NodeText","Data":"Channel Selectors：Source发往多个Channel的策略设置，如果source后面接了多个channel，到底是给所有的channel都发，还是根据规则发送到不同channel，这些是由Channel Selectors来控制的"}]}]},{"ID":"20230817161721-2yjp6vy","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161721-2yjp6vy","updated":"20230817161721"},"Children":[{"ID":"20230817161722-7oo0t1r","Type":"NodeParagraph","Properties":{"id":"20230817161722-7oo0t1r","updated":"20230817161722"},"Children":[{"Type":"NodeText","Data":"Sink Processors：Sink 发送数据的策略设置，一个channel后面可以接多个sink，channel中的数据是被哪个sink获取，这个是由Sink Processors控制的"}]}]}]},{"ID":"20230817161723-8qq30i6","Type":"NodeParagraph","Properties":{"id":"20230817161723-8qq30i6","updated":"20230817161723"},"Children":[{"Type":"NodeText","Data":"在具体分析这些高级组件之前，我们先插播一个小知识点，这个知识点在高级组件中会用到"}]},{"ID":"20230817161724-6ryvnt2","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230817161724-6ryvnt2","updated":"20230817161724"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"Event"}]},{"ID":"20230817161725-lkppmd0","Type":"NodeParagraph","Properties":{"id":"20230817161725-lkppmd0","updated":"20230817161725"},"Children":[{"Type":"NodeText","Data":"Event是Flume传输数据的基本单位，也是事务的基本单位，在文本文件中，通常一行记录就是一个Event"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"Event中包含header和body；"}]},{"ID":"20230817161726-ccsrn0x","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161726-ccsrn0x","updated":"20230817161726"},"Children":[{"ID":"20230817161727-h6wheaa","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161727-h6wheaa","updated":"20230817161727"},"Children":[{"ID":"20230817161728-pk2dnq9","Type":"NodeParagraph","Properties":{"id":"20230817161728-pk2dnq9","updated":"20230817161728"},"Children":[{"Type":"NodeText","Data":"body是采集到的那一行记录的原始内容"}]}]},{"ID":"20230817161729-lv7dyi6","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161729-lv7dyi6","updated":"20230817161729"},"Children":[{"ID":"20230817161730-tat7ztw","Type":"NodeParagraph","Properties":{"id":"20230817161730-tat7ztw","updated":"20230817161730"},"Children":[{"Type":"NodeText","Data":"header类型为Map\u003cString, String\u003e，里面可以存储一些属性信息，方便后面使用"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"我们可以在Source中给每一条数据的header中增加key-value，在Channel和Sink中使用header中的值了。"}]}]}]},{"ID":"20230817161731-328hwbb","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230817161731-328hwbb","updated":"20230817161731"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"Source Interceptors"}]},{"ID":"20230817161732-bepzpz0","Type":"NodeParagraph","Properties":{"id":"20230817161732-bepzpz0","updated":"20230817161732"},"Children":[{"Type":"NodeText","Data":"接下里我们看一下第一个高级组件，Source Interceptors"}]},{"ID":"20230817161733-gdup0zg","Type":"NodeParagraph","Properties":{"id":"20230817161733-gdup0zg","updated":"20230817161733"},"Children":[{"Type":"NodeText","Data":"系统中已经内置提供了很多Source Interceptors"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"常见的Source Interceptors类型：Timestamp Interceptor、Host Interceptor、Search and Replace Interceptor 、Static Interceptor、Regex Extractor Interceptor 等"}]},{"ID":"20230817161734-nedo0a2","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161734-nedo0a2","updated":"20230817161734"},"Children":[{"ID":"20230817161735-2x9q18g","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161735-2x9q18g","updated":"20230817161735"},"Children":[{"ID":"20230817161736-1foz2gs","Type":"NodeParagraph","Properties":{"id":"20230817161736-1foz2gs","updated":"20230817161736"},"Children":[{"Type":"NodeText","Data":"Timestamp Interceptor：向event中的header里面添加timestamp 时间戳信息"}]}]},{"ID":"20230817161737-kjnqvrr","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161737-kjnqvrr","updated":"20230817161737"},"Children":[{"ID":"20230817161738-hsp9rcu","Type":"NodeParagraph","Properties":{"id":"20230817161738-hsp9rcu","updated":"20230817161738"},"Children":[{"Type":"NodeText","Data":"Host Interceptor：向event中的header里面添加host属性，host的值为当前机器的主机名或者ip"}]}]},{"ID":"20230817161739-onjfz7k","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161739-onjfz7k","updated":"20230817161739"},"Children":[{"ID":"20230817161740-dp2nr78","Type":"NodeParagraph","Properties":{"id":"20230817161740-dp2nr78","updated":"20230817161740"},"Children":[{"Type":"NodeText","Data":"Search and Replace Interceptor：根据指定的规则查询Event中body里面的数据，然后进行替换，这个拦截器会修改event中body的值，也就是会修改原始采集到的数据内容"}]}]},{"ID":"20230817161741-bswfhkg","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161741-bswfhkg","updated":"20230817161741"},"Children":[{"ID":"20230817161742-dpjlwqg","Type":"NodeParagraph","Properties":{"id":"20230817161742-dpjlwqg","updated":"20230817161742"},"Children":[{"Type":"NodeText","Data":"Static Interceptor：向event中的header里面添加固定的key和value"}]}]},{"ID":"20230817161743-aesm4gp","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161743-aesm4gp","updated":"20230817161743"},"Children":[{"ID":"20230817161744-wg04i4a","Type":"NodeParagraph","Properties":{"id":"20230817161744-wg04i4a","updated":"20230817161744"},"Children":[{"Type":"NodeText","Data":"Regex Extractor Interceptor：根据指定的规则从Event中的body里面抽取数据，生成key和value，再把key和value添加到header中"}]}]}]},{"ID":"20230817161745-un0e00x","Type":"NodeParagraph","Properties":{"id":"20230817161745-un0e00x","updated":"20230817161745"},"Children":[{"Type":"NodeText","Data":"根据刚才的分析，总结一下："},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"Timestamp Interceptor、Host Interceptor、Static Interceptor、Regex Extractor Interceptor是向event中的header里面添加key-value类型的数据，方便后面的channel和sink组件使用，对采集到的原始数据内容没有任何影响"}]},{"ID":"20230817161746-ibxrzvx","Type":"NodeParagraph","Properties":{"id":"20230817161746-ibxrzvx","updated":"20230817161746"},"Children":[{"Type":"NodeText","Data":"Search and Replace Interceptor是会根据规则修改event中body里面的原始数据内容，对header没有任何影响，使用这个拦截器需要特别小心，因为他会修改原始数据内容。"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"这里面这几个拦截器"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"其中Search and Replace Interceptor和Regex Extractor Interceptor 我们在工作中使用的比较多一些"}]},{"ID":"20230817161747-dn84c2i","Type":"NodeParagraph","Properties":{"id":"20230817161747-dn84c2i","updated":"20230817161747"},"Children":[{"Type":"NodeText","Data":"下面呢，我们来看一个案例："},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"对采集到的数据按天按类型分目录存储"}]},{"ID":"20230817161748-uh8j8de","Type":"NodeParagraph","Properties":{"id":"20230817161748-uh8j8de","updated":"20230817161748"},"Children":[{"Type":"NodeText","Data":"我们的原始数据是这样的，看这个文件，Flume测试数据格式.txt"}]},{"ID":"20230817161749-yle9bhk","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161749-yle9bhk","updated":"20230817161749"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"video_info\n{\"id\":\"14943445328940974601\",\"uid\":\"840717325115457536\",\"lat\":\"53.530598\",\"lnt\":\"-2.5620373\",\"hots\":0,\"title\":\"0\",\"status\":\"1\",\"topicId\":\"0\",\"end_time\":\"1494344570\",\"watch_num\":0,\"share_num\":\"1\",\"replay_url\":null,\"replay_num\":0,\"start_time\":\"1494344544\",\"timestamp\":1494344571,\"type\":\"video_info\"}\n\nuser_info\n{\"uid\":\"861848974414839801\",\"nickname\":\"mick\",\"usign\":\"\",\"sex\":1,\"birthday\":\"\",\"face\":\"\",\"big_face\":\"\",\"email\":\"abc@qq.com\",\"mobile\":\"\",\"reg_type\":\"102\",\"last_login_time\":\"1494344580\",\"reg_time\":\"1494344580\",\"last_update_time\":\"1494344580\",\"status\":\"5\",\"is_verified\":\"0\",\"verified_info\":\"\",\"is_seller\":\"0\",\"level\":1,\"exp\":0,\"anchor_level\":0,\"anchor_exp\":0,\"os\":\"android\",\"timestamp\":1494344580,\"type\":\"user_info\"}\n\ngift_record\n{\"send_id\":\"834688818270961664\",\"good_id\":\"223\",\"video_id\":\"14943443045138661356\",\"gold\":\"10\",\"timestamp\":1494344574,\"type\":\"gift_record\"}\n代码块12345678\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161750-1wjnh35","Type":"NodeParagraph","Properties":{"id":"20230817161750-1wjnh35","updated":"20230817161750"},"Children":[{"Type":"NodeText","Data":"这份数据中有三种类型的数据，视频信息、用户信息、送礼信息，数据都是json格式的，"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"这些数据还有一个共性就是里面都有一个type字段，type字段的值代表数据类型"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"当我们的直播平台正常运行的时候，会实时产生这些日志数据，我们希望把这些数据采集到hdfs上进行存储，并且要按照数据类型进行分目录存储，视频数据放一块、用户数据放一块、送礼数据放一块"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"针对这个需求配置agent的话，source使用基于文件的execsource、channle使用基于文件的channle，我们希望保证数据的完整性和准确性，sink使用hdfssink"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"但是注意了，hdfssink中的path不能写死，首先是按天 就是需要动态获取日期，然后是因为不同类型的数据要存储到不同的目录中"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"那也就意味着path路径中肯定要是有变量，除了日期变量还要有数据类型变量，"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"这里的数据类型的格式都是单词中间有一个下划线，但是我们的要求是目录中的单词不要出现下划线，使用驼峰的命名格式。"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"所以最终在hdfs中需要生成的目录大致是这样的"}]},{"ID":"20230817161751-v7c4jis","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161751-v7c4jis","updated":"20230817161751"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"hdfs://192.168.182.100:9000/moreType/20200101/videoInfo\nhdfs://192.168.182.100:9000/moreType/20200101/userInfo\nhdfs://192.168.182.100:9000/moreType/20200101/giftRecord\n代码块123\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161752-vph206f","Type":"NodeParagraph","Properties":{"id":"20230817161752-vph206f","updated":"20230817161752"},"Children":[{"Type":"NodeText","Data":"这里的日期变量好获取，但是数据类型如何获取呢？"}]},{"ID":"20230817161753-lzq5dx5","Type":"NodeBlockquote","Properties":{"id":"20230817161753-lzq5dx5","updated":"20230817161753"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20230817161754-tyzhwny","Type":"NodeParagraph","Properties":{"id":"20230817161754-tyzhwny","updated":"20230817161754"},"Children":[{"Type":"NodeText","Data":"注意了，咱们前面分析了，通过source的拦截器可以向event的header中添加key-value，然后在后面的channle或者sink中获取key-value的值"}]}]},{"ID":"20230817161755-2es3e8h","Type":"NodeParagraph","Properties":{"id":"20230817161755-2es3e8h","updated":"20230817161755"},"Children":[{"Type":"NodeText","Data":"那我们在这就可以通过Regex Extractor Interceptor获取原始数据中的type字段的值，获取出来以后存储到header中，这样在sink阶段就可以获取到了。"}]},{"ID":"20230817161756-ogr4c2h","Type":"NodeParagraph","Properties":{"id":"20230817161756-ogr4c2h","updated":"20230817161756"},"Children":[{"Type":"NodeText","Data":"但是这个时候直接获取到的type的值是不满足要求的，需要对type的值进行转换，去掉下划线，转化为驼峰形式"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"所以可以先使用Search and Replace Interceptor对原始数据中type的值进行转换，然后使用Regex Extractor Interceptor指定规则获取type字段的值，添加到header中。"}]},{"ID":"20230817161757-0fyptku","Type":"NodeParagraph","Properties":{"id":"20230817161757-0fyptku","updated":"20230817161757"},"Children":[{"Type":"NodeText","Data":"所以整体的流程是这样的"}]},{"ID":"20230817161758-q0swdig","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161758-q0swdig","updated":"20230817161758"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"Exec Source -\u003e Search and Replace Interceptor-\u003eRegex Extractor Interceptor-\u003eFile Channel-\u003eHDFS Sink\n代码块1\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161759-zrqieqv","Type":"NodeParagraph","Properties":{"id":"20230817161759-zrqieqv","updated":"20230817161759"},"Children":[{"Type":"NodeText","Data":"那下面我们来配置Agent，在bigdata04机器上创建"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"file-to-hdfs-moreType.conf"}]},{"ID":"20230817161760-9szcr9t","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161760-9szcr9t","updated":"20230817161760"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"# agent的名称是a1\n# 指定source组件、channel组件和Sink组件的名称\na1.sources = r1\na1.channels = c1\na1.sinks = k1\n\n# 配置source组件\na1.sources.r1.type = exec\na1.sources.r1.command = tail -F /data/log/moreType.log\n\n# 配置拦截器 [多个拦截器按照顺序依次执行]\na1.sources.r1.interceptors = i1 i2 i3 i4\na1.sources.r1.interceptors.i1.type = search_replace\na1.sources.r1.interceptors.i1.searchPattern = \"type\":\"video_info\"\na1.sources.r1.interceptors.i1.replaceString = \"type\":\"videoInfo\"\n\na1.sources.r1.interceptors.i2.type = search_replace\na1.sources.r1.interceptors.i2.searchPattern = \"type\":\"user_info\"\na1.sources.r1.interceptors.i2.replaceString = \"type\":\"userInfo\"\n\na1.sources.r1.interceptors.i3.type = search_replace\na1.sources.r1.interceptors.i3.searchPattern = \"type\":\"gift_record\"\na1.sources.r1.interceptors.i3.replaceString = \"type\":\"giftRecord\"\n\n\na1.sources.r1.interceptors.i4.type = regex_extractor\na1.sources.r1.interceptors.i4.regex = \"type\":\"(\\\\w+)\"\na1.sources.r1.interceptors.i4.serializers = s1\na1.sources.r1.interceptors.i4.serializers.s1.name = logType\n\n\n# 配置channel组件\na1.channels.c1.type = file\na1.channels.c1.checkpointDir = /data/soft/apache-flume-1.9.0-bin/data/moreType/checkpoint\na1.channels.c1.dataDirs = /data/soft/apache-flume-1.9.0-bin/data/moreType/data\n\n\n# 配置sink组件\na1.sinks.k1.type = hdfs\na1.sinks.k1.hdfs.path = hdfs://192.168.182.100:9000/moreType/%Y%m%d/%{logType}\na1.sinks.k1.hdfs.fileType = DataStream\na1.sinks.k1.hdfs.writeFormat = Text\na1.sinks.k1.hdfs.rollInterval = 3600\na1.sinks.k1.hdfs.rollSize = 134217728\na1.sinks.k1.hdfs.rollCount = 0\na1.sinks.k1.hdfs.useLocalTimeStamp = true\n\n#增加文件前缀和后缀\na1.sinks.k1.hdfs.filePrefix = data\na1.sinks.k1.hdfs.fileSuffix = .log\n\n# 把组件连接起来\na1.sources.r1.channels = c1\na1.sinks.k1.channel = c1\n代码块123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161761-svrsqcx","Type":"NodeBlockquote","Properties":{"id":"20230817161761-svrsqcx","updated":"20230817161761"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20230817161762-01pazht","Type":"NodeParagraph","Properties":{"id":"20230817161762-01pazht","updated":"20230817161762"},"Children":[{"Type":"NodeText","Data":"注意：这里面的拦截器，拦截器可以设置一个或者多个，source采集的每一条数据都会经过所有的拦截器进行处理，多个拦截器按照顺序执行。"}]}]},{"ID":"20230817161763-k9jeohl","Type":"NodeParagraph","Properties":{"id":"20230817161763-k9jeohl","updated":"20230817161763"},"Children":[{"Type":"NodeText","Data":"后面也统一设置了hdfs文件的前缀和后缀"}]},{"ID":"20230817161764-8on072t","Type":"NodeParagraph","Properties":{"id":"20230817161764-8on072t","updated":"20230817161764"},"Children":[{"Type":"NodeText","Data":"先生成测试数据，提前手工把数据添加到"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"moreType.log"},{"Type":"NodeText","Data":"文件中"}]},{"ID":"20230817161765-s6vol1n","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161765-s6vol1n","updated":"20230817161765"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"[root@bigdata04 ~]# cd /data/log/\n[root@bigdata04 log]# vi moreType.log\n{\"id\":\"14943445328940974601\",\"uid\":\"840717325115457536\",\"lat\":\"53.530598\",\"lnt\":\"-2.5620373\",\"hots\":0,\"title\":\"0\",\"status\":\"1\",\"topicId\":\"0\",\"end_time\":\"1494344570\",\"watch_num\":0,\"share_num\":\"1\",\"replay_url\":null,\"replay_num\":0,\"start_time\":\"1494344544\",\"timestamp\":1494344571,\"type\":\"video_info\"}\n{\"uid\":\"861848974414839801\",\"nickname\":\"mick\",\"usign\":\"\",\"sex\":1,\"birthday\":\"\",\"face\":\"\",\"big_face\":\"\",\"email\":\"abc@qq.com\",\"mobile\":\"\",\"reg_type\":\"102\",\"last_login_time\":\"1494344580\",\"reg_time\":\"1494344580\",\"last_update_time\":\"1494344580\",\"status\":\"5\",\"is_verified\":\"0\",\"verified_info\":\"\",\"is_seller\":\"0\",\"level\":1,\"exp\":0,\"anchor_level\":0,\"anchor_exp\":0,\"os\":\"android\",\"timestamp\":1494344580,\"type\":\"user_info\"}\n{\"send_id\":\"834688818270961664\",\"good_id\":\"223\",\"video_id\":\"14943443045138661356\",\"gold\":\"10\",\"timestamp\":1494344574,\"type\":\"gift_record\"}\n代码块12345\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161766-8xgewoj","Type":"NodeParagraph","Properties":{"id":"20230817161766-8xgewoj","updated":"20230817161766"},"Children":[{"Type":"NodeText","Data":"启动Agent"}]},{"ID":"20230817161767-k7bz5k0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161767-k7bz5k0","updated":"20230817161767"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"[root@bigdata04 apache-flume-1.9.0-bin]# bin/flume-ng agent --name a1 --conf conf --conf-file conf/file-to-hdfs-moreType.conf -Dflume.root.logger=INFO,console\n代码块1\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161768-x8wfc4v","Type":"NodeParagraph","Properties":{"id":"20230817161768-x8wfc4v","updated":"20230817161768"},"Children":[{"Type":"NodeText","Data":"验证结果，在bigdata01节点上查看"}]},{"ID":"20230817161769-mklbgwl","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161769-mklbgwl","updated":"20230817161769"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"[root@bigdata01 soft]# hdfs dfs -ls -R /moreType/20200502/\ndrwxr-xr-x   - root supergroup          0 2020-05-02 23:57 /moreType/20200502/giftRecord\n-rw-r--r--   2 root supergroup        138 2020-05-02 23:57 /moreType/20200502/giftRecord/data.1588435055112.log.tmp\ndrwxr-xr-x   - root supergroup          0 2020-05-02 23:57 /moreType/20200502/userInfo\n-rw-r--r--   2 root supergroup        413 2020-05-02 23:57 /moreType/20200502/userInfo/data.1588435055069.log.tmp\ndrwxr-xr-x   - root supergroup          0 2020-05-02 23:57 /moreType/20200502/videoInfo\n-rw-r--r--   2 root supergroup        297 2020-05-02 23:57 /moreType/20200502/videoInfo/data.1588435053696.log.tmp\n代码块1234567\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161770-t1txm3f","Type":"NodeParagraph","Properties":{"id":"20230817161770-t1txm3f","updated":"20230817161770"},"Children":[{"Type":"NodeText","Data":"看一下HDFS中的文件内容，发现type字段的值确实被拦截器修改了"}]},{"ID":"20230817161771-dphyf81","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"amF2YQ==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161771-dphyf81","updated":"20230817161771"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"[root@bigdata01 soft]# hdfs dfs -cat /moreType/20200502/videoInfo/data.1588435053696.log.tmp\n{\"id\":\"14943445328940974601\",\"uid\":\"840717325115457536\",\"lat\":\"53.530598\",\"lnt\":\"-2.5620373\",\"hots\":0,\"title\":\"0\",\"status\":\"1\",\"topicId\":\"0\",\"end_time\":\"1494344570\",\"watch_num\":0,\"share_num\":\"1\",\"replay_url\":null,\"replay_num\":0,\"start_time\":\"1494344544\",\"timestamp\":1494344571,\"type\":\"videoInfo\"}\n代码块12\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161772-alg6vll","Type":"NodeParagraph","Properties":{"id":"20230817161772-alg6vll","updated":"20230817161772"},"Children":[{"Type":"NodeText","Data":"这就实现了按天，按类型分目录存储。"}]},{"ID":"20230817161773-w52pid4","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230817161773-w52pid4","updated":"20230817161773"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"Channel Selectors"}]},{"ID":"20230817161774-di3dkm5","Type":"NodeParagraph","Properties":{"id":"20230817161774-di3dkm5","updated":"20230817161774"},"Children":[{"Type":"NodeText","Data":"接下来看一下Channel Selectors"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"Channel Selectors类型包括：Replicating Channel Selector 和Multiplexing Channel Selector"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"其中Replicating Channel Selector是默认的channel 选择器，它会将Source采集过来的Event发往所有Channel"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"查看官方文档中针对这个默认channel选择器的解释"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"图片描述","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://img.mukewang.com/wiki/5f460caa095464b615550535.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"在这个例子的配置中，c3是可选channel。对c3的写入失败将被忽略。由于c1和c2未标记为可选，因此未能写入这些channel将导致事务失败"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"针对这个配置，通俗一点来说就是，source的数据会发往c1、c2、c3这三个channle中，可以保证c1、c2一定能接收到所有数据，但是c3就无法保证了"}]},{"ID":"20230817161775-qm0imzy","Type":"NodeParagraph","Properties":{"id":"20230817161775-qm0imzy","updated":"20230817161775"},"Children":[{"Type":"NodeText","Data":"这个selector.optional参数是一个可选项，可以不用配置就行。"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"如果是多个channel的话，直接在channels参数后面指定多个channel的名称就可以了，多个channel名称中间使用空格隔开，"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"其实你看这个名称是channels 带有s，从名字上看就能看出来他支持多个channel"}]},{"ID":"20230817161776-qmdjmg4","Type":"NodeParagraph","Properties":{"id":"20230817161776-qmdjmg4","updated":"20230817161776"},"Children":[{"Type":"NodeText","Data":"还有一个 channel选择器是Multiplexing Channel Selector，它表示会根据Event中header里面的值将Event发往不同的Channel"}]},{"ID":"20230817161777-79b0xow","Type":"NodeParagraph","Properties":{"id":"20230817161777-79b0xow","updated":"20230817161777"},"Children":[{"Type":"NodeText","Data":"看下官网中的介绍"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"图片描述","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://img.mukewang.com/wiki/5f460cbb0909aa9a15350544.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"在这个例子的配置中，指定了4个channel,c1、c2、c3、c4"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"source采集到的数据具体会发送到哪个channel中，会根据event中header里面的state属性的值，这个是通过selector.header控制的"}]},{"ID":"20230817161778-50deq7h","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161778-50deq7h","updated":"20230817161778"},"Children":[{"ID":"20230817161779-fhf2jgl","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161779-fhf2jgl","updated":"20230817161779"},"Children":[{"ID":"20230817161780-srcawp4","Type":"NodeParagraph","Properties":{"id":"20230817161780-srcawp4","updated":"20230817161780"},"Children":[{"Type":"NodeText","Data":"如果state属性的值是CZ，则发送给c1"}]}]},{"ID":"20230817161781-qiye7lx","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161781-qiye7lx","updated":"20230817161781"},"Children":[{"ID":"20230817161782-rq0ok1g","Type":"NodeParagraph","Properties":{"id":"20230817161782-rq0ok1g","updated":"20230817161782"},"Children":[{"Type":"NodeText","Data":"如果state属性的值是US，则发送给c2 c3"}]}]},{"ID":"20230817161783-nppcskd","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161783-nppcskd","updated":"20230817161783"},"Children":[{"ID":"20230817161784-7ih98np","Type":"NodeParagraph","Properties":{"id":"20230817161784-7ih98np","updated":"20230817161784"},"Children":[{"Type":"NodeText","Data":"如果state属性的值是其它值，则发送给c4"}]}]}]},{"ID":"20230817161785-cxznl1z","Type":"NodeParagraph","Properties":{"id":"20230817161785-cxznl1z","updated":"20230817161785"},"Children":[{"Type":"NodeText","Data":"这些规则是通过selector.mapping和selector.default控制的"}]},{"ID":"20230817161786-lfpd4rz","Type":"NodeParagraph","Properties":{"id":"20230817161786-lfpd4rz","updated":"20230817161786"},"Children":[{"Type":"NodeText","Data":"这样就可以实现根据一定规则把数据分发给不同的channel了。"}]},{"ID":"20230817161787-kklc3nc","Type":"NodeParagraph","Properties":{"id":"20230817161787-kklc3nc","updated":"20230817161787"},"Children":[{"Type":"NodeText","Data":"接下来我们看两个案例"}]},{"ID":"20230817161788-yw6vi2f","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230817161788-yw6vi2f","updated":"20230817161788"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"案例一：多Channel之Replicating Channel Selector"}]},{"ID":"20230817161789-zzxd3un","Type":"NodeParagraph","Properties":{"id":"20230817161789-zzxd3un","updated":"20230817161789"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"图片描述","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://img.mukewang.com/wiki/5f460ce109a8134f17840713.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"在这个案例中我们使用Replicating选择器，将source采集到的数据重复发送给两个channle，最后每个channel后面接一个sink，负责把数据存储到不同存储介质中，方便后期使用。"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"在实际工作中这种需求还是比较常见的，就是我们希望把一份数据采集过来以后，分别存储到不同的存储介质中，不同存储介质的特点和应用场景是不一样的，典型的就是hdfssink 和kafkasink，"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"通过hdfssink实现离线数据落盘存储，方便后面进行离线数据计算"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"通过kafkasink实现实时数据存储，方便后面进行实时计算，"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"由于我们还没有学kafka，所以在这里先使用loggersink代理。"}]},{"ID":"20230817161790-f28j1o4","Type":"NodeParagraph","Properties":{"id":"20230817161790-f28j1o4","updated":"20230817161790"},"Children":[{"Type":"NodeText","Data":"下面根据图中列出来的source、channel和sink来配置agent"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"在bigdata04中flume的conf目录中创建"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"tcp-to-replicatingchannel.conf"}]},{"ID":"20230817161791-2awm0gr","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161791-2awm0gr","updated":"20230817161791"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"[root@bigdata04 conf]# vi tcp-to-replicatingchannel.conf\n# agent的名称是a1\n# 指定source组件、channel组件和Sink组件的名称\na1.sources = r1\na1.channels = c1 c2\na1.sinks = k1 k2\n\n# 配置source组件\na1.sources.r1.type = netcat\na1.sources.r1.bind = 0.0.0.0\na1.sources.r1.port = 44444\n\n# 配置channle选择器[默认就是replicating，所以可以省略]\na1.sources.r1.selector.type = replicating\n\n# 配置channel组件\na1.channels.c1.type = memory\na1.channels.c1.capacity = 1000\na1.channels.c1.transactionCapacity = 100\n\na1.channels.c2.type = memory\na1.channels.c2.capacity = 1000\na1.channels.c2.transactionCapacity = 100\n\n\n\n# 配置sink组件\na1.sinks.k1.type = logger\n\na1.sinks.k2.type = hdfs\na1.sinks.k2.hdfs.path = hdfs://192.168.182.100:9000/replicating\na1.sinks.k2.hdfs.fileType = DataStream\na1.sinks.k2.hdfs.writeFormat = Text\na1.sinks.k2.hdfs.rollInterval = 3600\na1.sinks.k2.hdfs.rollSize = 134217728\na1.sinks.k2.hdfs.rollCount = 0\na1.sinks.k2.hdfs.useLocalTimeStamp = true\na1.sinks.k2.hdfs.filePrefix = data\na1.sinks.k2.hdfs.fileSuffix = .log\n\n\n# 把组件连接起来\na1.sources.r1.channels = c1 c2\na1.sinks.k1.channel = c1\na1.sinks.k2.channel = c2\n代码块123456789101112131415161718192021222324252627282930313233343536373839404142434445\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161792-qj3mvjc","Type":"NodeParagraph","Properties":{"id":"20230817161792-qj3mvjc","updated":"20230817161792"},"Children":[{"Type":"NodeText","Data":"启动Agent"}]},{"ID":"20230817161793-kgjzs61","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161793-kgjzs61","updated":"20230817161793"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"[root@bigdata04 apache-flume-1.9.0-bin]#  bin/flume-ng agent --name a1 --conf conf --conf-file conf/tcp-to-replicatingchannel.conf -Dflume.root.logger=INFO,console\n代码块1\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161794-8uh6pxe","Type":"NodeParagraph","Properties":{"id":"20230817161794-8uh6pxe","updated":"20230817161794"},"Children":[{"Type":"NodeText","Data":"生成测试数据，通过telnet连接到socket"}]},{"ID":"20230817161795-9vigkjn","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161795-9vigkjn","updated":"20230817161795"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"[root@bigdata04 ~]# telnet localhost 44444\nTrying ::1...\nConnected to localhost.\nEscape character is '^]'.\nhello\nOK\n代码块123456\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161796-vryurzf","Type":"NodeParagraph","Properties":{"id":"20230817161796-vryurzf","updated":"20230817161796"},"Children":[{"Type":"NodeText","Data":"查看效果，可以看到Flume在控制台输出的日志信息"}]},{"ID":"20230817161797-4kd1f9b","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161797-4kd1f9b","updated":"20230817161797"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"2020-05-03 09:51:51,123 (SinkRunner-PollingRunner-DefaultSinkProcessor) [INFO - org.apache.flume.sink.LoggerSink.process(LoggerSink.java:95)] Event: { headers:{} body: 68 65 6C 6C 6F 0D                               hello. }\n2020-05-03 09:51:51,141 (SinkRunner-PollingRunner-DefaultSinkProcessor) [INFO - org.apache.flume.sink.hdfs.HDFSDataStream.configure(HDFSDataStream.java:57)] Serializer = TEXT, UseRawLocalFileSystem = false\n2020-05-03 09:51:51,396 (SinkRunner-PollingRunner-DefaultSinkProcessor) [INFO - org.apache.flume.sink.hdfs.BucketWriter.open(BucketWriter.java:246)] Creating hdfs://192.168.182.100:9000/replicating/data.1588470711142.tmp\n代码块123\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161798-egncwf6","Type":"NodeParagraph","Properties":{"id":"20230817161798-egncwf6","updated":"20230817161798"},"Children":[{"Type":"NodeText","Data":"查看sink2在hdfs中生成的文件中的内容"}]},{"ID":"20230817161799-mjei41k","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161799-mjei41k","updated":"20230817161799"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"[root@bigdata04 ~]# hdfs dfs -cat hdfs://192.168.182.100:9000/replicating/data.1588470711142.tmp\nhello\n代码块12\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161800-hr5bt5w","Type":"NodeParagraph","Properties":{"id":"20230817161800-hr5bt5w","updated":"20230817161800"},"Children":[{"Type":"NodeText","Data":"这就是Replicating Channel Selector的应用"}]},{"ID":"20230817161801-ctm5whj","Type":"NodeParagraph","Properties":{"id":"20230817161801-ctm5whj","updated":"20230817161801"},"Children":[{"Type":"NodeText","Data":"接下来看案例2"}]},{"ID":"20230817161802-y8mrsxr","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230817161802-y8mrsxr","updated":"20230817161802"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"案例二：多Channel之Multiplexing Channel Selector"}]},{"ID":"20230817161803-77z64h6","Type":"NodeParagraph","Properties":{"id":"20230817161803-77z64h6","updated":"20230817161803"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"图片描述","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://img.mukewang.com/wiki/5f460d2a092279e813810547.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"在这个案例中我们使用Multiplexing选择器，将source采集到的数据按照一定规则发送给两个channle，最终再把不同channel中的数据存储到不同介质中。"}]},{"ID":"20230817161804-vq09kw2","Type":"NodeParagraph","Properties":{"id":"20230817161804-vq09kw2","updated":"20230817161804"},"Children":[{"Type":"NodeText","Data":"在这里面我们需要用到正则抽取拦截器在Event的header中生成key-value"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"作为Multiplexing选择器的规则"}]},{"ID":"20230817161805-th0o4x4","Type":"NodeParagraph","Properties":{"id":"20230817161805-th0o4x4","updated":"20230817161805"},"Children":[{"Type":"NodeText","Data":"假设我们的原始数据格式为"}]},{"ID":"20230817161806-10ycbko","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161806-10ycbko","updated":"20230817161806"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"{\"name\":\"jack\",\"age\":19,\"city\":\"bj\"}\n{\"name\":\"tom\",\"age\":26,\"city\":\"sh\"}\n代码块12\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161807-g6v8vdz","Type":"NodeParagraph","Properties":{"id":"20230817161807-g6v8vdz","updated":"20230817161807"},"Children":[{"Type":"NodeText","Data":"下面来配置Agent，复制tcp-to-replicatingchannel.conf的内容，"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"主要增加source拦截器和修改channel选择器，以及hdfsink中的path路径"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"在bigdata04上创建新文件"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"tcp-to-multiplexingchannel.conf"}]},{"ID":"20230817161808-wficltf","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161808-wficltf","updated":"20230817161808"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"[root@bigdata04 conf]# vi tcp-to-multiplexingchannel.conf\n# agent的名称是a1\n\n# 指定source组件、channel组件和Sink组件的名称\na1.sources = r1\na1.channels = c1 c2\na1.sinks = k1 k2\n\n# 配置source组件\na1.sources.r1.type = netcat\na1.sources.r1.bind = 0.0.0.0\na1.sources.r1.port = 44444\n\n# 配置source拦截器\na1.sources.r1.interceptors = i1\na1.sources.r1.interceptors.i1.type = regex_extractor\na1.sources.r1.interceptors.i1.regex = \"city\":\"(\\\\w+)\"\na1.sources.r1.interceptors.i1.serializers = s1\na1.sources.r1.interceptors.i1.serializers.s1.name = city\n\n# 配置channle选择器\na1.sources.r1.selector.type = multiplexing\na1.sources.r1.selector.header = city\na1.sources.r1.selector.mapping.bj = c1\na1.sources.r1.selector.default = c2\n\n# 配置channel组件\na1.channels.c1.type = memory\na1.channels.c1.capacity = 1000\na1.channels.c1.transactionCapacity = 100\n\na1.channels.c2.type = memory\na1.channels.c2.capacity = 1000\na1.channels.c2.transactionCapacity = 100\n\n\n\n# 配置sink组件\na1.sinks.k1.type = logger\n\na1.sinks.k2.type = hdfs\na1.sinks.k2.hdfs.path = hdfs://192.168.182.100:9000/multiplexing\na1.sinks.k2.hdfs.fileType = DataStream\na1.sinks.k2.hdfs.writeFormat = Text\na1.sinks.k2.hdfs.rollInterval = 3600\na1.sinks.k2.hdfs.rollSize = 134217728\na1.sinks.k2.hdfs.rollCount = 0\na1.sinks.k2.hdfs.useLocalTimeStamp = true\na1.sinks.k2.hdfs.filePrefix = data\na1.sinks.k2.hdfs.fileSuffix = .log\n\n\n# 把组件连接起来\na1.sources.r1.channels = c1 c2\na1.sinks.k1.channel = c1\na1.sinks.k2.channel = c2\n代码块1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161809-7rs531w","Type":"NodeParagraph","Properties":{"id":"20230817161809-7rs531w","updated":"20230817161809"},"Children":[{"Type":"NodeText","Data":"启动Agent"}]},{"ID":"20230817161810-ainns4i","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161810-ainns4i","updated":"20230817161810"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"[root@bigdata04 apache-flume-1.9.0-bin]#  bin/flume-ng agent --name a1 --conf conf --conf-file conf/tcp-to-multiplexingchannel.conf -Dflume.root.logger=INFO,console\n代码块1\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161811-z7uqowv","Type":"NodeParagraph","Properties":{"id":"20230817161811-z7uqowv","updated":"20230817161811"},"Children":[{"Type":"NodeText","Data":"生成测试数据，通过telnet连接到socket"}]},{"ID":"20230817161812-b0ftpfn","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161812-b0ftpfn","updated":"20230817161812"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"[root@bigdata04 ~]# telnet localhost 44444                  \nTrying ::1...\nConnected to localhost.\nEscape character is '^]'.\n{\"name\":\"jack\",\"age\":19,\"city\":\"bj\"}\nOK\n{\"name\":\"tom\",\"age\":26,\"city\":\"sh\"}\nOK\n代码块12345678\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161813-c0xkot1","Type":"NodeParagraph","Properties":{"id":"20230817161813-c0xkot1","updated":"20230817161813"},"Children":[{"Type":"NodeText","Data":"查看结果，在Flume启动命令行中会输出如下日志信息"}]},{"ID":"20230817161814-t9kjmf8","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161814-t9kjmf8","updated":"20230817161814"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"2020-05-03 10:19:58,181 (SinkRunner-PollingRunner-DefaultSinkProcessor) [INFO - org.apache.flume.sink.LoggerSink.process(LoggerSink.java:95)] Event: { headers:{city=bj} body: 7B 22 6E 61 6D 65 22 3A 22 6A 61 63 6B 22 2C 22 {\"name\":\"jack\",\" }\n2020-05-03 10:20:43,058 (SinkRunner-PollingRunner-DefaultSinkProcessor) [INFO - org.apache.flume.sink.hdfs.BucketWriter.open(BucketWriter.java:246)] Creating hdfs://192.168.182.100:9000/multiplexing/data.1588472338039.tmp\n代码块12\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161815-i660176","Type":"NodeParagraph","Properties":{"id":"20230817161815-i660176","updated":"20230817161815"},"Children":[{"Type":"NodeText","Data":"查看sink2输出到hdfs中的数据"}]},{"ID":"20230817161816-ls08t7w","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161816-ls08t7w","updated":"20230817161816"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"[root@bigdata04 ~]# hdfs dfs -cat hdfs://192.168.182.100:9000/multiplexing/data.1588472338039.tmp\n{\"name\":\"tom\",\"age\":26,\"city\":\"sh\"}\n代码块12\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161817-4ejdt19","Type":"NodeParagraph","Properties":{"id":"20230817161817-4ejdt19","updated":"20230817161817"},"Children":[{"Type":"NodeText","Data":"这样就实现了，根据规则把source采集到的数据分发到不同channel中，最终输出到不同存储介质中。"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"这就是Multiplexing Channel Selector的应用了"}]},{"ID":"20230817161818-tp1j0xp","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230817161818-tp1j0xp","updated":"20230817161818"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"Sink Processors"}]},{"ID":"20230817161819-ngr0mvn","Type":"NodeParagraph","Properties":{"id":"20230817161819-ngr0mvn","updated":"20230817161819"},"Children":[{"Type":"NodeText","Data":"接下来看一下Sink处理器"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"Sink Processors类型包括这三种：Default Sink Processor、Load balancing Sink Processor和Failover Sink Processor"}]},{"ID":"20230817161820-ad5keyi","Type":"NodeParagraph","Properties":{"id":"20230817161820-ad5keyi","updated":"20230817161820"},"Children":[{"Type":"NodeText","Data":"DefaultSink Processor是默认的，不用配置sinkgroup，就是咱们现在使用的这种最普通的形式，一个channel后面接一个sink的形式"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"Load balancing Sink Processor是负载均衡处理器，一个channle后面可以接多个sink，这多个sink属于一个sink group，根据指定的算法进行轮询或者随机发送，减轻单个sink的压力"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"Failover Sink Processor是故障转移处理器，一个channle后面可以接多个sink，这多个sink属于一个sink group，按照sink的优先级，默认先让优先级高的sink来处理数据，如果这个sink出现了故障，则用优先级低一点的sink处理数据，可以保证数据不丢失。"}]},{"ID":"20230817161821-vlqosaj","Type":"NodeParagraph","Properties":{"id":"20230817161821-vlqosaj","updated":"20230817161821"},"Children":[{"Type":"NodeText","Data":"下面我们来看两个案例："},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"负载均衡、故障转移"}]},{"ID":"20230817161822-25xberz","Type":"NodeParagraph","Properties":{"id":"20230817161822-25xberz","updated":"20230817161822"},"Children":[{"Type":"NodeText","Data":"先看负载均衡"}]},{"ID":"20230817161823-m7af6ey","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230817161823-m7af6ey","updated":"20230817161823"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Load balancing Sink Processor"}]},{"ID":"20230817161824-qdk528i","Type":"NodeParagraph","Properties":{"id":"20230817161824-qdk528i","updated":"20230817161824"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"图片描述","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://img.mukewang.com/wiki/5f460d6a09551dfb12670405.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"看这个图，在这里面一个channel后面接了两个sink，这两个sink属于一个sink group，具体的数据发送策略我们来看一下文档"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"图片描述","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://img.mukewang.com/wiki/5f460d7709af761d15360880.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230817161825-gvmfpms","Type":"NodeParagraph","Properties":{"id":"20230817161825-gvmfpms","updated":"20230817161825"},"Children":[{"Type":"NodeText","Data":"看中间的参数信息，"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"processor.sinks：指定这个sink groups中有哪些sink，指定sink的名称，多个的话中间使用空格隔开即可【注意，这里写的是processor.sinks，但是在下面的example中使用的是sinks，实际上就是sinks，所以文档也是有一些瑕疵的，不过Flume的文档已经算是写的非常好的了】"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"processor.type：针对负载均衡的sink处理器，这里需要指定load_balance"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"processor.selector：此参数的值内置支持两个，round_robin和random，round_robin表示轮询，按照sink的顺序，轮流处理数据，random表示随机。"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"processor.backoff：默认为false，设置为true后，故障的节点会列入黑名单，过一定时间才会再次发送数据，如果还失败，则等待时间是指数级增长；一直到达到最大的时间。"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"如果不开启，故障的节点每次还会被重试发送，如果真有故障节点的话就会影响效率。"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"processor.selector.maxTimeOut：最大的黑名单时间，默认是30秒"}]},{"ID":"20230817161826-apb9e6s","Type":"NodeParagraph","Properties":{"id":"20230817161826-apb9e6s","updated":"20230817161826"},"Children":[{"Type":"NodeText","Data":"最后看一下里面提供的例子："}]},{"ID":"20230817161827-qa49w3y","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161827-qa49w3y","updated":"20230817161827"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"# 指定sinkgroup的名称\na1.sinkgroups = g1\n# 指定sinkgroup中有哪些sink\na1.sinkgroups.g1.sinks = k1 k2\n# 使用负载均衡策略\na1.sinkgroups.g1.processor.type = load_balance\n# 开启后，故障的节点会列入黑名单\na1.sinkgroups.g1.processor.backoff = true\n# 指定sinkgroup的数据发送策略\na1.sinkgroups.g1.processor.selector = random\n代码块12345678910\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161828-2553px2","Type":"NodeParagraph","Properties":{"id":"20230817161828-2553px2","updated":"20230817161828"},"Children":[{"Type":"NodeText","Data":"这个负载均衡案例可以解决之前单节点输出能力有限的问题，可以通过多个sink后面连接多个Agent实现负载均衡，如果后面的Agent挂掉1个，也不会影响整体流程，只是处理效率又恢复到了之前的状态。"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"下面来配置Agent，先配置bigdata04节点上的这个Agent"}]},{"ID":"20230817161829-oda0758","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161829-oda0758","updated":"20230817161829"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"[root@bigdata04 conf]# vi load-balancing.conf\n# agent的名称是a1\n# 指定source组件、channel组件和Sink组件的名称\na1.sources = r1\na1.channels = c1\na1.sinks = k1 k2\n\n# 配置source组件\na1.sources.r1.type = netcat\na1.sources.r1.bind = 0.0.0.0\na1.sources.r1.port = 44444\n\n\n# 配置channel组件\na1.channels.c1.type = memory\na1.channels.c1.capacity = 1000\na1.channels.c1.transactionCapacity = 100\n\n\n\n\n\n# 配置sink组件,[为了方便演示效果，把batch-size设置为1]\na1.sinks.k1.type=avro\na1.sinks.k1.hostname=192.168.182.101\na1.sinks.k1.port=41414\na1.sinks.k1.batch-size = 1\n\na1.sinks.k2.type=avro\na1.sinks.k2.hostname=192.168.182.102\na1.sinks.k2.port=41414\na1.sinks.k2.batch-size = 1\n\n\n\n# 配置sink策略\na1.sinkgroups = g1\na1.sinkgroups.g1.sinks = k1 k2\na1.sinkgroups.g1.processor.type = load_balance\na1.sinkgroups.g1.processor.backoff = true\na1.sinkgroups.g1.processor.selector = round_robin\n\n\n# 把组件连接起来\na1.sources.r1.channels = c1\na1.sinks.k1.channel = c1\na1.sinks.k2.channel = c1\n代码块1234567891011121314151617181920212223242526272829303132333435363738394041424344454647\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161830-l36sf3e","Type":"NodeParagraph","Properties":{"id":"20230817161830-l36sf3e","updated":"20230817161830"},"Children":[{"Type":"NodeText","Data":"接着配置bigdata02和bigdata03上的Agent"}]},{"ID":"20230817161831-xdbgc3q","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161831-xdbgc3q","updated":"20230817161831"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"[root@bigdata02 conf]# vi load-balancing-101.conf\n# agent的名称是a1\n\n# 指定source组件、channel组件和Sink组件的名称\na1.sources = r1\na1.channels = c1\na1.sinks = k1\n\n# 配置source组件\na1.sources.r1.type = avro\na1.sources.r1.bind = 0.0.0.0\na1.sources.r1.port = 41414\n\n# 配置channel组件\na1.channels.c1.type = memory\na1.channels.c1.capacity = 1000\na1.channels.c1.transactionCapacity = 100\n\n\n# 配置sink组件[为了区分两个sink组件生成的文件，修改filePrefix的值]\na1.sinks.k1.type = hdfs\na1.sinks.k1.hdfs.path = hdfs://192.168.182.100:9000/load_balance\na1.sinks.k1.hdfs.fileType = DataStream\na1.sinks.k1.hdfs.writeFormat = Text\na1.sinks.k1.hdfs.rollInterval = 3600\na1.sinks.k1.hdfs.rollSize = 134217728\na1.sinks.k1.hdfs.rollCount = 0\na1.sinks.k1.hdfs.useLocalTimeStamp = true\na1.sinks.k1.hdfs.filePrefix = data101\na1.sinks.k1.hdfs.fileSuffix = .log\n\n\n# 把组件连接起来\na1.sources.r1.channels = c1\na1.sinks.k1.channel = c1\n代码块1234567891011121314151617181920212223242526272829303132333435\n[root@bigdata03 conf]# vi load-balancing-102.conf\n# agent的名称是a1\n\n# 指定source组件、channel组件和Sink组件的名称\na1.sources = r1\na1.channels = c1\na1.sinks = k1\n\n# 配置source组件\na1.sources.r1.type = avro\na1.sources.r1.bind = 0.0.0.0\na1.sources.r1.port = 41414\n\n# 配置channel组件\na1.channels.c1.type = memory\na1.channels.c1.capacity = 1000\na1.channels.c1.transactionCapacity = 100\n\n\n# 配置sink组件[为了区分两个sink组件生成的文件，修改filePrefix的值]\na1.sinks.k1.type = hdfs\na1.sinks.k1.hdfs.path = hdfs://192.168.182.100:9000/load_balance\na1.sinks.k1.hdfs.fileType = DataStream\na1.sinks.k1.hdfs.writeFormat = Text\na1.sinks.k1.hdfs.rollInterval = 3600\na1.sinks.k1.hdfs.rollSize = 134217728\na1.sinks.k1.hdfs.rollCount = 0\na1.sinks.k1.hdfs.useLocalTimeStamp = true\na1.sinks.k1.hdfs.filePrefix = data102\na1.sinks.k1.hdfs.fileSuffix = .log\n\n\n# 把组件连接起来\na1.sources.r1.channels = c1\na1.sinks.k1.channel = c1\n代码块1234567891011121314151617181920212223242526272829303132333435\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161832-r1a6vu3","Type":"NodeBlockquote","Properties":{"id":"20230817161832-r1a6vu3","updated":"20230817161832"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20230817161833-wbmss07","Type":"NodeParagraph","Properties":{"id":"20230817161833-wbmss07","updated":"20230817161833"},"Children":[{"Type":"NodeText","Data":"注意：bigdata04中指定的a1.sinks.k1.port=41414和a1.sinks.k2.port=41414需要和bigdata02和bigdata03中的a1.sources.r1.port = 41414的值保持一致"}]}]},{"ID":"20230817161834-850psjv","Type":"NodeParagraph","Properties":{"id":"20230817161834-850psjv","updated":"20230817161834"},"Children":[{"Type":"NodeText","Data":"接下来开始启动这几个Agent"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"需要先启动bigdata02和bigdata03上的Agent，最后启动bigdata04上的Agent"}]},{"ID":"20230817161835-a1cyb46","Type":"NodeParagraph","Properties":{"id":"20230817161835-a1cyb46","updated":"20230817161835"},"Children":[{"Type":"NodeText","Data":"启动bigdata02上的Agent"}]},{"ID":"20230817161836-8zf8phx","Type":"NodeBlockquote","Properties":{"id":"20230817161836-8zf8phx","updated":"20230817161836"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20230817161837-otulr04","Type":"NodeParagraph","Properties":{"id":"20230817161837-otulr04","updated":"20230817161837"},"Children":[{"Type":"NodeText","Data":"注意：在启动之前需要到/etc/profile中先配置HADOOP_HOME环境变量，因为这个Agent中使用到了hdfs"}]}]},{"ID":"20230817161838-4eo6mn0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161838-4eo6mn0","updated":"20230817161838"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"[root@bigdata02 apache-flume-1.9.0-bin]# vi /etc/profile\n........\nexport JAVA_HOME=/data/soft/jdk1.8\nexport HADOOP_HOME=/data/soft/hadoop-3.2.0\nexport PATH=.:$JAVA_HOME/bin:$HADOOP_HOME/bin:$PATH\n[root@bigdata02 apache-flume-1.9.0-bin]# source /etc/profile\n[root@bigdata02 apache-flume-1.9.0-bin]#  bin/flume-ng agent --name a1 --conf conf --conf-file conf/load-balancing-101.conf -Dflume.root.logger=INFO,console\n代码块1234567\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161839-50wnyh2","Type":"NodeParagraph","Properties":{"id":"20230817161839-50wnyh2","updated":"20230817161839"},"Children":[{"Type":"NodeText","Data":"启动bigdata03上的Agent"}]},{"ID":"20230817161840-84ptsh8","Type":"NodeBlockquote","Properties":{"id":"20230817161840-84ptsh8","updated":"20230817161840"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20230817161841-ovp5gqv","Type":"NodeParagraph","Properties":{"id":"20230817161841-ovp5gqv","updated":"20230817161841"},"Children":[{"Type":"NodeText","Data":"注意：在启动之前需要到/etc/profile中先配置HADOOP_HOME环境变量，因为这个Agent中使用到了hdfs"}]}]},{"ID":"20230817161842-6h35bct","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161842-6h35bct","updated":"20230817161842"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"[root@bigdata03 apache-flume-1.9.0-bin]# vi /etc/profile\n........\nexport JAVA_HOME=/data/soft/jdk1.8\nexport HADOOP_HOME=/data/soft/hadoop-3.2.0\nexport PATH=.:$JAVA_HOME/bin:$HADOOP_HOME/bin:$PATH\n[root@bigdata03 apache-flume-1.9.0-bin]# source /etc/profile\n[root@bigdata03 apache-flume-1.9.0-bin]#  bin/flume-ng agent --name a1 --conf conf --conf-file conf/load-balancing-102.conf -Dflume.root.logger=INFO,console\n代码块1234567\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161843-dk22sn8","Type":"NodeParagraph","Properties":{"id":"20230817161843-dk22sn8","updated":"20230817161843"},"Children":[{"Type":"NodeText","Data":"启动bigdata04上的Agent"}]},{"ID":"20230817161844-xczf4uu","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161844-xczf4uu","updated":"20230817161844"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"[root@bigdata04 apache-flume-1.9.0-bin]#  bin/flume-ng agent --name a1 --conf conf --conf-file conf/load-balancing.conf -Dflume.root.logger=INFO,console\n代码块1\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161845-kn21hq6","Type":"NodeParagraph","Properties":{"id":"20230817161845-kn21hq6","updated":"20230817161845"},"Children":[{"Type":"NodeText","Data":"通过telnet产生数据"}]},{"ID":"20230817161846-de04gci","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161846-de04gci","updated":"20230817161846"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"[root@bigdata04 ~]# telnet localhost 44444\nTrying ::1...\nConnected to localhost.\nEscape character is '^]'.\nhehe\nOK\nhaha\nOK\n代码块12345678\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161847-1ifcks1","Type":"NodeParagraph","Properties":{"id":"20230817161847-1ifcks1","updated":"20230817161847"},"Children":[{"Type":"NodeText","Data":"分别到bigdata02和bigdata03中hdfssink指定的path中验证数据"}]},{"ID":"20230817161848-5q8nrs3","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161848-5q8nrs3","updated":"20230817161848"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"[root@bigdata01 soft]# hdfs dfs -ls hdfs://192.168.182.100:9000/load_balance\nFound 2 items\n-rw-r--r--   2 root supergroup          6 2020-05-03 12:44 hdfs://192.168.182.100:9000/load_balance/data101.1588481094383.log.tmp\n-rw-r--r--   2 root supergroup          6 2020-05-03 12:44 hdfs://192.168.182.100:9000/load_balance/data102.1588481087463.log.tmp\n[root@bigdata01 soft]# hdfs dfs -cat hdfs://192.168.182.100:9000/load_balance/data101.1588481094383.log.tmp\nhaha\n[root@bigdata01 soft]# hdfs dfs -cat hdfs://192.168.182.100:9000/load_balance/data102.1588481087463.log.tmp\nhehe\n代码块12345678\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161849-pjcvcvx","Type":"NodeParagraph","Properties":{"id":"20230817161849-pjcvcvx","updated":"20230817161849"},"Children":[{"Type":"NodeText","Data":"这就是sink负载均衡的使用，在这里面我们使用了轮询的策略，大家下去以后可以使用random试验一下，只需要修改bigdata04配置文件中a1.sinkgroups.g1.processor.selector的值即可。"}]},{"ID":"20230817161850-9r8dfap","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230817161850-9r8dfap","updated":"20230817161850"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Failover Sink Processor"}]},{"ID":"20230817161851-5qs18dz","Type":"NodeParagraph","Properties":{"id":"20230817161851-5qs18dz","updated":"20230817161851"},"Children":[{"Type":"NodeText","Data":"接下来我们来看一下故障转移"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"图片描述","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://img.mukewang.com/wiki/5f460e02098f597013370427.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230817161852-de8b1s5","Type":"NodeParagraph","Properties":{"id":"20230817161852-de8b1s5","updated":"20230817161852"},"Children":[{"Type":"NodeText","Data":"在这个图中，也是一个channel后面接了两个sink，但是这里和负载均衡架构不一样的是，这两个sink正常情况下只有一个干活，另一个是不干活的"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"来看一下Failover Sink Processor的文档介绍"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"图片描述","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://img.mukewang.com/wiki/5f460e0f09b0647715280961.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230817161853-ze7xc5m","Type":"NodeParagraph","Properties":{"id":"20230817161853-ze7xc5m","updated":"20230817161853"},"Children":[{"Type":"NodeText","Data":"看中间的参数解释"}]},{"ID":"20230817161854-jb2r8b5","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161854-jb2r8b5","updated":"20230817161854"},"Children":[{"ID":"20230817161855-neiju0m","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161855-neiju0m","updated":"20230817161855"},"Children":[{"ID":"20230817161856-gw50k0g","Type":"NodeParagraph","Properties":{"id":"20230817161856-gw50k0g","updated":"20230817161856"},"Children":[{"Type":"NodeText","Data":"sinks：指定这个sink groups中有哪些sink，指定sink的名称，多个的话中间使用空格隔开即可"}]}]},{"ID":"20230817161857-tted604","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161857-tted604","updated":"20230817161857"},"Children":[{"ID":"20230817161858-ulwfdce","Type":"NodeParagraph","Properties":{"id":"20230817161858-ulwfdce","updated":"20230817161858"},"Children":[{"Type":"NodeText","Data":"processor.type：针对故障转移的sink处理器，使用failover"}]}]},{"ID":"20230817161859-xa7v51d","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161859-xa7v51d","updated":"20230817161859"},"Children":[{"ID":"20230817161860-31f83us","Type":"NodeParagraph","Properties":{"id":"20230817161860-31f83us","updated":"20230817161860"},"Children":[{"Type":"NodeText","Data":"processor.priority.：指定sink group中每一个sink组件的优先级，默认情况下channel中的数据会被优先级比较高的sink取走"}]}]},{"ID":"20230817161861-wp8oa7r","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161861-wp8oa7r","updated":"20230817161861"},"Children":[{"ID":"20230817161862-sgn5uur","Type":"NodeParagraph","Properties":{"id":"20230817161862-sgn5uur","updated":"20230817161862"},"Children":[{"Type":"NodeText","Data":"processor.maxpenalty：sink发生故障之后，最大等待时间"}]}]}]},{"ID":"20230817161863-9ndrdmx","Type":"NodeParagraph","Properties":{"id":"20230817161863-9ndrdmx","updated":"20230817161863"},"Children":[{"Type":"NodeText","Data":"看下面的例子"}]},{"ID":"20230817161864-ila9rxz","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161864-ila9rxz","updated":"20230817161864"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"a1.sinkgroups = g1\na1.sinkgroups.g1.sinks = k1 k2\na1.sinkgroups.g1.processor.type = failover\na1.sinkgroups.g1.processor.priority.k1 = 5\na1.sinkgroups.g1.processor.priority.k2 = 10\na1.sinkgroups.g1.processor.maxpenalty = 10000\n代码块123456\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161865-ea8n1rz","Type":"NodeParagraph","Properties":{"id":"20230817161865-ea8n1rz","updated":"20230817161865"},"Children":[{"Type":"NodeText","Data":"这个故障转移案例可以解决sink组件单点故障的问题，如果某一个sink输出功能失效，另一个还可以顶上来，同时只会存在一个真正输出数据的sink。"}]},{"ID":"20230817161866-c2dv72f","Type":"NodeParagraph","Properties":{"id":"20230817161866-c2dv72f","updated":"20230817161866"},"Children":[{"Type":"NodeText","Data":"下面来配置Agent，先配置bigdata04节点上的这个Agent"}]},{"ID":"20230817161867-4m8zkdr","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161867-4m8zkdr","updated":"20230817161867"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"[root@bigdata04 conf]# vi failover.conf\n# agent的名称是a1\n# 指定source组件、channel组件和Sink组件的名称\na1.sources = r1\na1.channels = c1\na1.sinks = k1 k2\n\n# 配置source组件\na1.sources.r1.type = netcat\na1.sources.r1.bind = 0.0.0.0\na1.sources.r1.port = 44444\n\n\n# 配置channel组件\na1.channels.c1.type = memory\na1.channels.c1.capacity = 1000\na1.channels.c1.transactionCapacity = 100\n\n\n\n\n# 配置sink组件,[为了方便演示效果，把batch-size设置为1]\na1.sinks.k1.type = avro\na1.sinks.k1.hostname = 192.168.182.101\na1.sinks.k1.port = 41414\na1.sinks.k1.batch-size = 1\n\na1.sinks.k2.type = avro\na1.sinks.k2.hostname = 192.168.182.102\na1.sinks.k2.port = 41414\na1.sinks.k2.batch-size = 1\n\n\n\n# 配置sink策略\na1.sinkgroups = g1\na1.sinkgroups.g1.sinks = k1 k2\na1.sinkgroups.g1.processor.type = failover\na1.sinkgroups.g1.processor.priority.k1 = 5\na1.sinkgroups.g1.processor.priority.k2 = 10\na1.sinkgroups.g1.processor.maxpenalty = 10000\n\n\n# 把组件连接起来\na1.sources.r1.channels = c1\na1.sinks.k1.channel = c1\na1.sinks.k2.channel = c1\n代码块1234567891011121314151617181920212223242526272829303132333435363738394041424344454647\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161868-ti8sbm5","Type":"NodeParagraph","Properties":{"id":"20230817161868-ti8sbm5","updated":"20230817161868"},"Children":[{"Type":"NodeText","Data":"接着配置bigdata02和bigdata03上的Agent"}]},{"ID":"20230817161869-rxhk2gt","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161869-rxhk2gt","updated":"20230817161869"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"[root@bigdata02 conf]# vi failover-101.conf\n# agent的名称是a1\n# 指定source组件、channel组件和Sink组件的名称\na1.sources = r1\na1.channels = c1\na1.sinks = k1\n\n# 配置source组件\na1.sources.r1.type = avro\na1.sources.r1.bind = 0.0.0.0\na1.sources.r1.port = 41414\n\n# 配置channel组件\na1.channels.c1.type = memory\na1.channels.c1.capacity = 1000\na1.channels.c1.transactionCapacity = 100\n\n\n# 配置sink组件[为了区分两个sink组件生成的文件，修改filePrefix的值]\na1.sinks.k1.type = hdfs\na1.sinks.k1.hdfs.path = hdfs://192.168.182.100:9000/failover\na1.sinks.k1.hdfs.fileType = DataStream\na1.sinks.k1.hdfs.writeFormat = Text\na1.sinks.k1.hdfs.rollInterval = 3600\na1.sinks.k1.hdfs.rollSize = 134217728\na1.sinks.k1.hdfs.rollCount = 0\na1.sinks.k1.hdfs.useLocalTimeStamp = true\na1.sinks.k1.hdfs.filePrefix = data101\na1.sinks.k1.hdfs.fileSuffix = .log\n\n\n# 把组件连接起来\na1.sources.r1.channels = c1\na1.sinks.k1.channel = c1\n代码块12345678910111213141516171819202122232425262728293031323334\n[root@bigdata03 conf]# vi failover-102.conf\n# agent的名称是a1\n\n# 指定source组件、channel组件和Sink组件的名称\na1.sources = r1\na1.channels = c1\na1.sinks = k1\n\n# 配置source组件\na1.sources.r1.type = avro\na1.sources.r1.bind = 0.0.0.0\na1.sources.r1.port = 41414\n\n# 配置channel组件\na1.channels.c1.type = memory\na1.channels.c1.capacity = 1000\na1.channels.c1.transactionCapacity = 100\n\n\n# 配置sink组件[为了区分两个sink组件生成的文件，修改filePrefix的值]\na1.sinks.k1.type = hdfs\na1.sinks.k1.hdfs.path = hdfs://192.168.182.100:9000/failover\na1.sinks.k1.hdfs.fileType = DataStream\na1.sinks.k1.hdfs.writeFormat = Text\na1.sinks.k1.hdfs.rollInterval = 3600\na1.sinks.k1.hdfs.rollSize = 134217728\na1.sinks.k1.hdfs.rollCount = 0\na1.sinks.k1.hdfs.useLocalTimeStamp = true\na1.sinks.k1.hdfs.filePrefix = data102\na1.sinks.k1.hdfs.fileSuffix = .log\n\n\n# 把组件连接起来\na1.sources.r1.channels = c1\na1.sinks.k1.channel = c1\n代码块1234567891011121314151617181920212223242526272829303132333435\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161870-tw97ghy","Type":"NodeParagraph","Properties":{"id":"20230817161870-tw97ghy","updated":"20230817161870"},"Children":[{"Type":"NodeText","Data":"接着就需要开始启动Agent了"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"先启动bigdata02和bigdata03，最后启动bigdata04"}]},{"ID":"20230817161871-z0ojaw6","Type":"NodeParagraph","Properties":{"id":"20230817161871-z0ojaw6","updated":"20230817161871"},"Children":[{"Type":"NodeText","Data":"启动bigdata02上的Agent"}]},{"ID":"20230817161872-lpyzyrd","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161872-lpyzyrd","updated":"20230817161872"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"[root@bigdata02 apache-flume-1.9.0-bin]#  bin/flume-ng agent --name a1 --conf conf --conf-file conf/failover-101.conf -Dflume.root.logger=INFO,console\n代码块1\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161873-4pu6xul","Type":"NodeParagraph","Properties":{"id":"20230817161873-4pu6xul","updated":"20230817161873"},"Children":[{"Type":"NodeText","Data":"启动bigdata03上的Agent"}]},{"ID":"20230817161874-l36rest","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161874-l36rest","updated":"20230817161874"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"[root@bigdata03 apache-flume-1.9.0-bin]#  bin/flume-ng agent --name a1 --conf conf --conf-file conf/failover-102.conf -Dflume.root.logger=INFO,console\n代码块1\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161875-l131v63","Type":"NodeParagraph","Properties":{"id":"20230817161875-l131v63","updated":"20230817161875"},"Children":[{"Type":"NodeText","Data":"启动bigdata04上的Agent"}]},{"ID":"20230817161876-sc4646c","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161876-sc4646c","updated":"20230817161876"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"[root@bigdata04 apache-flume-1.9.0-bin]#  bin/flume-ng agent --name a1 --conf conf --conf-file conf/failover.conf -Dflume.root.logger=INFO,console\n代码块1\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161877-invlhwg","Type":"NodeParagraph","Properties":{"id":"20230817161877-invlhwg","updated":"20230817161877"},"Children":[{"Type":"NodeText","Data":"通过telnet产生数据"}]},{"ID":"20230817161878-rc3tgdb","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161878-rc3tgdb","updated":"20230817161878"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"[root@bigdata04 ~]# telnet localhost 44444\nTrying ::1...\nConnected to localhost.\nEscape character is '^]'.\nhehe\nOK\nhaha\nOK\n代码块12345678\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161879-1hb2v8u","Type":"NodeParagraph","Properties":{"id":"20230817161879-1hb2v8u","updated":"20230817161879"},"Children":[{"Type":"NodeText","Data":"然后到hdfs上验证数据，发现现在数据是通过bigdata03这台机器写出去的，因为对应bigdata03这台机器的sink组件的优先级比较高"}]},{"ID":"20230817161880-xlnho4g","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161880-xlnho4g","updated":"20230817161880"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"[root@bigdata01 ~]# hdfs dfs -ls hdfs://192.168.182.100:9000/failover\nFound 1 items\n-rw-r--r--   2 root supergroup         12 2020-05-03 15:17 hdfs://192.168.182.100:9000/failover/data102.1588490221243.log.tmp\n代码块123\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161881-tui8vcu","Type":"NodeParagraph","Properties":{"id":"20230817161881-tui8vcu","updated":"20230817161881"},"Children":[{"Type":"NodeText","Data":"查看这个HDFS文件内容，发现那两条数据都在这里面"}]},{"ID":"20230817161882-m7cs6oq","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161882-m7cs6oq","updated":"20230817161882"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"[root@bigdata01 ~]# hdfs dfs -cat hdfs://192.168.182.100:9000/failover/data102.1588490221243.log.tmp\nhehe\nhaha\n代码块123\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161883-1xgkqol","Type":"NodeParagraph","Properties":{"id":"20230817161883-1xgkqol","updated":"20230817161883"},"Children":[{"Type":"NodeText","Data":"接下来模拟bigdata03这台机器上的的Agent挂掉，也就意味着k2这个sink写不出去数据了，此时，我们再通过socket发送一条数据，看看会怎么样"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"直接在bigdata03窗口中按"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ctrl+c"},{"Type":"NodeText","Data":"停止agent即可"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"然后再生成一条数据"}]},{"ID":"20230817161884-ne70ias","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161884-ne70ias","updated":"20230817161884"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"[root@bigdata04 ~]# telnet localhost 44444\nTrying ::1...\nConnected to localhost.\nEscape character is '^]'.\nhehe\nOK\nhaha\nOK\ntest\nOK\n代码块12345678910\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161885-rxmat58","Type":"NodeParagraph","Properties":{"id":"20230817161885-rxmat58","updated":"20230817161885"},"Children":[{"Type":"NodeText","Data":"此时再到hdfs上查看一下"}]},{"ID":"20230817161886-6qaju0y","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161886-6qaju0y","updated":"20230817161886"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"[root@bigdata01 ~]# hdfs dfs -ls hdfs://192.168.182.100:9000/failover\nFound 2 items\n-rw-r--r--   2 root supergroup          6 2020-05-03 15:17 hdfs://192.168.182.100:9000/failover/data101.1588490267828.log.tmp\n-rw-r--r--   2 root supergroup         12 2020-05-03 15:17 hdfs://192.168.182.100:9000/failover/data102.1588490221243.log\n代码块1234\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161887-17sjuan","Type":"NodeParagraph","Properties":{"id":"20230817161887-17sjuan","updated":"20230817161887"},"Children":[{"Type":"NodeText","Data":"查看新生成的这个文件的内容"}]},{"ID":"20230817161888-1fei1jv","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161888-1fei1jv","updated":"20230817161888"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"[root@bigdata01 ~]# hdfs dfs -cat hdfs://192.168.182.100:9000/failover/data101.1588490267828.log.tmp\ntest\n代码块12\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161889-2961xo3","Type":"NodeParagraph","Properties":{"id":"20230817161889-2961xo3","updated":"20230817161889"},"Children":[{"Type":"NodeText","Data":"此时如果把bigdata03上的Agent再启动的话，会发现新采集的数据会通过bigdata03上的Agent写出去，这是因为它的优先级比较高。"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"这就是Sink故障转移的应用。"}]}]}