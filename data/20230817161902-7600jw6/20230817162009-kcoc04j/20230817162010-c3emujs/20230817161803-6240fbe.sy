{"ID":"20230817161803-6240fbe","Spec":"1","Type":"NodeDocument","Properties":{"id":"20230817161803-6240fbe","title":"kafak基础知识","updated":"20230817161803"},"Children":[{"ID":"20230817161804-hsziiso","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230817161804-hsziiso","updated":"20230817161804"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"kafak"}]},{"ID":"20230817161805-2g2mb67","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20230817161805-2g2mb67","updated":"20230817161805"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"##### ","Properties":{"id":""}},{"Type":"NodeText","Data":"kafak介绍"}]},{"ID":"20230817161806-n491tf4","Type":"NodeParagraph","Properties":{"id":"20230817161806-n491tf4","updated":"20230817161806"},"Children":[{"Type":"NodeText","Data":"kafka是一个高吞吐量的、持久性的、分布式发布订阅系统"}]},{"ID":"20230817161807-52liulf","Type":"NodeList","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161807-52liulf","updated":"20230817161807"},"Children":[{"ID":"20230817161808-n9z07od","Type":"NodeListItem","Data":"-","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161808-n9z07od","updated":"20230817161808"},"Children":[{"ID":"20230817161809-o3oy8ii","Type":"NodeParagraph","Properties":{"id":"20230817161809-o3oy8ii","updated":"20230817161809"},"Children":[{"Type":"NodeText","Data":"高吞吐量：可以满足每秒百万级别的消费的生产和订阅"}]},{"ID":"20230817161810-qjt1nzq","Type":"NodeParagraph","Properties":{"id":"20230817161810-qjt1nzq","updated":"20230817161810"},"Children":[{"Type":"NodeText","Data":"为什么可以这样快？原因是kafak利用了磁盘的顺序读写速率大于内存的随机读写速率"}]}]},{"ID":"20230817161811-18x94v1","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161811-18x94v1","updated":"20230817161811"},"Children":[{"ID":"20230817161812-zg6c0j1","Type":"NodeParagraph","Properties":{"id":"20230817161812-zg6c0j1","updated":"20230817161812"},"Children":[{"Type":"NodeText","Data":"持久性 其有一套完整的消息存储机制 ，能够确保数据安全的持久化"}]}]},{"ID":"20230817161813-i37v4p3","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161813-i37v4p3","updated":"20230817161813"},"Children":[{"ID":"20230817161814-uhnd34q","Type":"NodeParagraph","Properties":{"id":"20230817161814-uhnd34q","updated":"20230817161814"},"Children":[{"Type":"NodeText","Data":"分布式 ：它是基于分布式的扩展和容错机制 当一台机器失效时 它可以切换生产者和消费者使用其他机器"}]}]}]},{"ID":"20230817161815-z5rf84d","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20230817161815-z5rf84d","updated":"20230817161815"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"##### ","Properties":{"id":""}},{"Type":"NodeText","Data":"kafak组件介绍"}]},{"ID":"20230817161816-wrv8bgj","Type":"NodeParagraph","Properties":{"id":"20230817161816-wrv8bgj","updated":"20230817161816"},"Children":[{"Type":"NodeText","Data":"消息：Record。Kafka 是消息引擎嘛，这里的消息就是指 Kafka 处理的主要对象。"}]},{"ID":"20230817161817-ykju3dt","Type":"NodeParagraph","Properties":{"id":"20230817161817-ykju3dt","updated":"20230817161817"},"Children":[{"Type":"NodeText","Data":"主题：Topic。主题是承载消息的逻辑容器，在实际使用中多用来区分具体的业务。分区：Partition。一个有序不变的消息序列。每个主题下可以有多个分区。"}]},{"ID":"20230817161818-ndgu1k4","Type":"NodeParagraph","Properties":{"id":"20230817161818-ndgu1k4","updated":"20230817161818"},"Children":[{"Type":"NodeText","Data":"消息位移：Offset。表示分区中每条消息的位置信息，是一个单调递增且不变的值。"}]},{"ID":"20230817161819-8k5j4iv","Type":"NodeParagraph","Properties":{"id":"20230817161819-8k5j4iv","updated":"20230817161819"},"Children":[{"Type":"NodeText","Data":"副本：Replica。Kafka 中同一条消息能够被拷贝到多个地方以提供数据冗余，这些地方就是所谓的副本。副本还分为领导者副本和追随者副本，各自有不同的角色划分。副本是在分区层级下的，即每个分区可配置多个副本实现高可用。"}]},{"ID":"20230817161820-7kjxasx","Type":"NodeParagraph","Properties":{"id":"20230817161820-7kjxasx","updated":"20230817161820"},"Children":[{"Type":"NodeText","Data":"生产者：Producer。向主题发布新消息的应用程序。"}]},{"ID":"20230817161821-3p3cxyw","Type":"NodeParagraph","Properties":{"id":"20230817161821-3p3cxyw","updated":"20230817161821"},"Children":[{"Type":"NodeText","Data":"消费者：Consumer。从主题订阅新消息的应用程序。"}]},{"ID":"20230817161822-q43tgzy","Type":"NodeParagraph","Properties":{"id":"20230817161822-q43tgzy","updated":"20230817161822"},"Children":[{"Type":"NodeText","Data":"消费者位移：Consumer Offset。表征消费者消费进度，每个消费者都有自己的消费者位移。"}]},{"ID":"20230817161823-bgfpnig","Type":"NodeParagraph","Properties":{"id":"20230817161823-bgfpnig","updated":"20230817161823"},"Children":[{"Type":"NodeText","Data":"消费者组：Consumer Group。多个消费者实例共同组成的一个组，同时消费多个分区以实现高吞吐。"}]},{"ID":"20230817161824-eg9z7fa","Type":"NodeParagraph","Properties":{"id":"20230817161824-eg9z7fa","updated":"20230817161824"},"Children":[{"Type":"NodeText","Data":"重平衡：Rebalance。消费者组内某个消费者实例挂掉后，其他消费者实例自动重新分配订阅主题分区的过程。Rebalance 是 Kafka 消费者端实现高可用的重要手段。"}]},{"ID":"20230817161825-pv3f48e","Type":"NodeParagraph","Properties":{"id":"20230817161825-pv3f48e","updated":"20230817161825"},"Children":[{"Type":"NodeText","Data":"用一张图来概括所有术语："}]},{"ID":"20230817161826-62lo9t2","Type":"NodeParagraph","Properties":{"id":"20230817161826-62lo9t2","updated":"20230817161826"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"kafak组件介绍","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"E:\\kafak图片\\kafak组件介绍.webp","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230817161827-xxmutsv","Type":"NodeParagraph","Properties":{"id":"20230817161827-xxmutsv","updated":"20230817161827"},"Children":[{"Type":"NodeText","Data":"zookeeper：Kafka将基本元数据存储在Zookeeper中，例如主题、Kafka集群实例列表、消息使用者等。"}]},{"ID":"20230817161828-jocmwsq","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20230817161828-jocmwsq","updated":"20230817161828"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"##### ","Properties":{"id":""}},{"Type":"NodeText","Data":"kafak的拓展"}]},{"ID":"20230817161829-h860bze","Type":"NodeHeading","HeadingLevel":6,"Properties":{"id":"20230817161829-h860bze","updated":"20230817161829"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"###### ","Properties":{"id":""}},{"Type":"NodeText","Data":"broker参数调整"}]},{"ID":"20230817161830-kjcen8d","Type":"NodeParagraph","Properties":{"id":"20230817161830-kjcen8d","updated":"20230817161830"},"Children":[{"Type":"NodeText","Data":"针对Broker的参数，我们主要分析两块"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"1：Log Flush Policy：设置数据flush到磁盘的时机"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"为了减少磁盘写入的次数,broker会将消息暂时缓存起来,当消息的个数达到一定阀值或者过了一定的时间间隔后,再flush到磁盘,这样可以减少磁盘IO调用的次数。"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"这块主要通过两个参数控制"}]},{"ID":"20230817161831-1ww83rj","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161831-1ww83rj","updated":"20230817161831"},"Children":[{"ID":"20230817161832-1rc4zgw","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161832-1rc4zgw","updated":"20230817161832"},"Children":[{"ID":"20230817161833-s6an4ix","Type":"NodeParagraph","Properties":{"id":"20230817161833-s6an4ix","updated":"20230817161833"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"log.flush.interval.messages"},{"Type":"NodeText","Data":" 一个分区的消息数阀值，达到该阈值则将该分区的数据flush到磁盘，注意这里是针对分区，因为topic是一个逻辑概念，分区是真实存在的，每个分区会在磁盘上产生一个目录"}]}]}]},{"ID":"20230817161834-fjrrsww","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161834-fjrrsww","updated":"20230817161834"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"[root@bigdata01 kafka-logs]# ll\ntotal 20\ndrwxr-xr-x. 2 root root 141 Jun  8 17:12 88888888-0\ndrwxr-xr-x. 2 root root 141 Jun  8 17:12 88888888-3\n-rw-r--r--. 1 root root   4 Jun  8 15:23 cleaner-offset-checkpoint\ndrwxr-xr-x. 2 root root 141 Jun  8 17:08 __consumer_offsets-0\ndrwxr-xr-x. 2 root root 141 Jun  8 17:08 __consumer_offsets-12\ndrwxr-xr-x. 2 root root 141 Jun  8 17:08 __consumer_offsets-15\ndrwxr-xr-x. 2 root root 141 Jun  8 17:08 __consumer_offsets-18\ndrwxr-xr-x. 2 root root 141 Jun  8 17:08 __consumer_offsets-21\ndrwxr-xr-x. 2 root root 141 Jun  8 17:08 __consumer_offsets-24\ndrwxr-xr-x. 2 root root 141 Jun  8 17:08 __consumer_offsets-27\ndrwxr-xr-x. 2 root root 141 Jun  8 17:08 __consumer_offsets-3\ndrwxr-xr-x. 2 root root 141 Jun  8 17:08 __consumer_offsets-30\ndrwxr-xr-x. 2 root root 141 Jun  8 17:08 __consumer_offsets-33\ndrwxr-xr-x. 2 root root 141 Jun  8 17:08 __consumer_offsets-36\ndrwxr-xr-x. 2 root root 141 Jun  8 17:08 __consumer_offsets-39\ndrwxr-xr-x. 2 root root 141 Jun  8 17:08 __consumer_offsets-42\ndrwxr-xr-x. 2 root root 141 Jun  8 17:08 __consumer_offsets-45\ndrwxr-xr-x. 2 root root 141 Jun  8 17:08 __consumer_offsets-48\ndrwxr-xr-x. 2 root root 141 Jun  8 17:08 __consumer_offsets-6\ndrwxr-xr-x. 2 root root 141 Jun  8 17:08 __consumer_offsets-9\ndrwxr-xr-x. 2 root root 141 Jun  8 17:04 hello-1\ndrwxr-xr-x. 2 root root 141 Jun  8 17:04 hello-4\n代码块123456789101112131415161718192021222324\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161835-lzphygl","Type":"NodeParagraph","Properties":{"id":"20230817161835-lzphygl","updated":"20230817161835"},"Children":[{"Type":"NodeText","Data":"这个参数的默认值为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"9223372036854775807"},{"Type":"NodeText","Data":"，long的最大值"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"默认值太大了，所以建议修改，可以使用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"server.properties"},{"Type":"NodeText","Data":"中针对这个参数指定的值10000，需要去掉注释之后这个参数才生效。"}]},{"ID":"20230817161836-p6xsbqo","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161836-p6xsbqo","updated":"20230817161836"},"Children":[{"ID":"20230817161837-4owg3v2","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161837-4owg3v2","updated":"20230817161837"},"Children":[{"ID":"20230817161838-2m2dvj7","Type":"NodeParagraph","Properties":{"id":"20230817161838-2m2dvj7","updated":"20230817161838"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"log.flush.interval.ms"},{"Type":"NodeText","Data":" 间隔指定时间"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"默认间隔指定的时间将内存中缓存的数据flush到磁盘中，由文档可知，这个参数的默认值为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"null"},{"Type":"NodeText","Data":"，此时会使用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"log.flush.scheduler.interval.ms"},{"Type":"NodeText","Data":"参数的值，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"log.flush.scheduler.interval.ms"},{"Type":"NodeText","Data":"参数的值默认是"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"9223372036854775807"},{"Type":"NodeText","Data":"，long的最大值"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"所以这个值也建议修改，可以使用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"server.properties"},{"Type":"NodeText","Data":"中针对这个参数指定的值1000，单位是毫秒，表示每1秒写一次磁盘，这个参数也需要去掉注释之后才生效"}]}]}]},{"ID":"20230817161839-n6o5izr","Type":"NodeParagraph","Properties":{"id":"20230817161839-n6o5izr","updated":"20230817161839"},"Children":[{"Type":"NodeText","Data":"2：Log Retention Policy：设置数据保存周期，默认7天"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"kafka中的数据默认会保存7天，如果kafka每天接收的数据量过大，这样是很占磁盘空间的，建议修改数据保存周期，我们之前在实际工作中是将数据保存周期改为了1天。"}]},{"ID":"20230817161840-n8qkn8i","Type":"NodeParagraph","Properties":{"id":"20230817161840-n8qkn8i","updated":"20230817161840"},"Children":[{"Type":"NodeText","Data":"数据保存周期主要通过这几个参数控制"}]},{"ID":"20230817161841-9b4phbv","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161841-9b4phbv","updated":"20230817161841"},"Children":[{"ID":"20230817161842-ilbzlhn","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161842-ilbzlhn","updated":"20230817161842"},"Children":[{"ID":"20230817161843-s28y1ia","Type":"NodeParagraph","Properties":{"id":"20230817161843-s28y1ia","updated":"20230817161843"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"log.retention.hours"},{"Type":"NodeText","Data":"，这个参数默认值为168，单位是小时，就是7天，可以在这调整数据保存的时间，超过这个时间数据会被自动删除"}]}]},{"ID":"20230817161844-1r2wqqn","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161844-1r2wqqn","updated":"20230817161844"},"Children":[{"ID":"20230817161845-safcz43","Type":"NodeParagraph","Properties":{"id":"20230817161845-safcz43","updated":"20230817161845"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"log.retention.bytes"},{"Type":"NodeText","Data":"，这个参数表示当分区的文件达到一定大小的时候会删除它，"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"如果设置了按照指定周期删除数据文件，这个参数不设置也可以，这个参数默认是没有开启的"}]}]},{"ID":"20230817161846-y1vt9r5","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161846-y1vt9r5","updated":"20230817161846"},"Children":[{"ID":"20230817161847-m7g13ht","Type":"NodeParagraph","Properties":{"id":"20230817161847-m7g13ht","updated":"20230817161847"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"log.retention.check.interval.ms"},{"Type":"NodeText","Data":"，这个参数表示检测的间隔时间，单位是毫秒，默认值是300000，就是5分钟，表示每5分钟检测一次文件看是否满足删除的时机"}]}]}]},{"ID":"20230817161848-ci77wwj","Type":"NodeHeading","HeadingLevel":6,"Properties":{"id":"20230817161848-ci77wwj","updated":"20230817161848"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"###### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Producer扩展"}]},{"ID":"20230817161849-y8mcqxo","Type":"NodeParagraph","Properties":{"id":"20230817161849-y8mcqxo","updated":"20230817161849"},"Children":[{"Type":"NodeText","Data":"Producer默认是随机将数据发送到topic的不同分区中，也可以根据用户设置的算法来根据消息的key来计算输入到哪个partition里面"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"此时需要通过partitioner来控制，这个知道就行了，因为在实际工作中一般在向kafka中生产数据的都是不带key的，只有数据内容，所以一般都是使用随机的方式发送数据"}]},{"ID":"20230817161850-ubv5jq6","Type":"NodeParagraph","Properties":{"id":"20230817161850-ubv5jq6","updated":"20230817161850"},"Children":[{"Type":"NodeText","Data":"在这里有一个需要注意的内容就是"}]},{"ID":"20230817161851-46gkex4","Type":"NodeBlockquote","Properties":{"id":"20230817161851-46gkex4","updated":"20230817161851"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20230817161852-lwf60qh","Type":"NodeParagraph","Properties":{"id":"20230817161852-lwf60qh","updated":"20230817161852"},"Children":[{"Type":"NodeText","Data":"针对producer的数据通讯方式：同步发送和异步发送"}]}]},{"ID":"20230817161853-poayy3n","Type":"NodeParagraph","Properties":{"id":"20230817161853-poayy3n","updated":"20230817161853"},"Children":[{"Type":"NodeText","Data":"同步是指：生产者发出数据后，等接收方发回响应以后再发送下个数据的通讯方式。"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"异步是指：生产者发出数据后，不等接收方发回响应，接着发送下个数据的通讯方式。"}]},{"ID":"20230817161854-l4clg4y","Type":"NodeParagraph","Properties":{"id":"20230817161854-l4clg4y","updated":"20230817161854"},"Children":[{"Type":"NodeText","Data":"具体的数据通讯策略是由"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"acks"},{"Type":"NodeText","Data":"参数控制的"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"acks默认为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"1"},{"Type":"NodeText","Data":"，表示需要Leader节点回复收到消息，这样生产者才会发送下一条数据"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"acks："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"all"},{"Type":"NodeText","Data":"，表示需要所有Leader+副本节点回复收到消息（acks=-1），这样生产者才会发送下一条数据"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"acks："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"0"},{"Type":"NodeText","Data":"，表示不需要任何节点回复，生产者会继续发送下一条数据"}]},{"ID":"20230817161855-dxtg8bo","Type":"NodeParagraph","Properties":{"id":"20230817161855-dxtg8bo","updated":"20230817161855"},"Children":[{"Type":"NodeText","Data":"再来看一下这个图："},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"图片描述","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://img.mukewang.com/wiki/5f5b7f1d09f0204d14240682.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"我们在向hello这个topic生产数据的时候，可以在生产者中设置acks参数，"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"acks设置为1，表示我们在向hello这个topic的partition1这个分区写数据的时候，只需要让leader所在的broker1这个节点回复确认收到的消息就可以了，这样生产者就可以发送下一条数据了"}]},{"ID":"20230817161856-08c6mct","Type":"NodeParagraph","Properties":{"id":"20230817161856-08c6mct","updated":"20230817161856"},"Children":[{"Type":"NodeText","Data":"如果acks设置为all，则需要partition1的这两个副本所在的节点(包含Leader)都回复收到消息，生产者才会发送下一条数据"}]},{"ID":"20230817161857-b7vcb36","Type":"NodeParagraph","Properties":{"id":"20230817161857-b7vcb36","updated":"20230817161857"},"Children":[{"Type":"NodeText","Data":"如果acks设置为0，表示生产者不会等待任何partition所在节点的回复，它只管发送数据，不管你有没有收到，所以这种情况丢失数据的概率比较高。"}]},{"ID":"20230817161858-2sq1qkf","Type":"NodeBlockquote","Properties":{"id":"20230817161858-2sq1qkf","updated":"20230817161858"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20230817161859-t2k40oj","Type":"NodeParagraph","Properties":{"id":"20230817161859-t2k40oj","updated":"20230817161859"},"Children":[{"Type":"NodeText","Data":"针对这块在面试的时候会有一个面试题：Kafka如何保证数据不丢？"}]}]},{"ID":"20230817161860-9xs8t8h","Type":"NodeParagraph","Properties":{"id":"20230817161860-9xs8t8h","updated":"20230817161860"},"Children":[{"Type":"NodeText","Data":"其实就是通过acks机制保证的，如果设置acks为all，则可以保证数据不丢，因为此时把数据发送给kafka之后，会等待对应partition所在的所有leader和副本节点都确认收到消息之后才会认为数据发送成功了，所以在这种策略下，只要把数据发送给kafka之后就不会丢了。"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"如果acks设置为1，则当我们把数据发送给partition之后，partition的leader节点也确认收到了，但是leader回复完确认消息之后，leader对应的节点就宕机了，副本partition还没来得及将数据同步过去，所以会存在丢失的可能性。"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"不过如果宕机的是副本partition所在的节点，则数据是不会丢的"}]},{"ID":"20230817161861-eu6hml4","Type":"NodeParagraph","Properties":{"id":"20230817161861-eu6hml4","updated":"20230817161861"},"Children":[{"Type":"NodeText","Data":"如果acks设置为0的话就表示是顺其自然了，只管发送，不管kafka有没有收到，这种情况表示对数据丢不丢都无所谓了。"}]},{"ID":"20230817161862-uod1eam","Type":"NodeHeading","HeadingLevel":6,"Properties":{"id":"20230817161862-uod1eam","updated":"20230817161862"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"###### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Consumer扩展"}]},{"ID":"20230817161863-i4uxn6x","Type":"NodeParagraph","Properties":{"id":"20230817161863-i4uxn6x","updated":"20230817161863"},"Children":[{"Type":"NodeText","Data":"在消费者中还有一个消费者组的概念"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"每个consumer属于一个消费者组，通过group.id指定消费者组"}]},{"ID":"20230817161864-vprmzh8","Type":"NodeParagraph","Properties":{"id":"20230817161864-vprmzh8","updated":"20230817161864"},"Children":[{"Type":"NodeText","Data":"那组内消费和组间消费有什么区别吗？"}]},{"ID":"20230817161865-5az8kg0","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161865-5az8kg0","updated":"20230817161865"},"Children":[{"ID":"20230817161866-izskmhd","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161866-izskmhd","updated":"20230817161866"},"Children":[{"ID":"20230817161867-udzy97k","Type":"NodeParagraph","Properties":{"id":"20230817161867-udzy97k","updated":"20230817161867"},"Children":[{"Type":"NodeText","Data":"组内：消费者组内的所有消费者消费同一份数据；"}]}]}]},{"ID":"20230817161868-aena6s6","Type":"NodeParagraph","Properties":{"id":"20230817161868-aena6s6","updated":"20230817161868"},"Children":[{"Type":"NodeText","Data":"注意：在同一个消费者组中，一个partition同时只能有一个消费者消费数据"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"如果消费者的个数小于分区的个数，一个消费者会消费多个分区的数据。"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"如果消费者的个数大于分区的个数，则多余的消费者不消费数据"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"所以，对于一个topic,同一个消费者组中推荐不能有多于分区个数的消费者,否则将意味着某些消费者将无法获得消息。"}]},{"ID":"20230817161869-4dshnvk","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161869-4dshnvk","updated":"20230817161869"},"Children":[{"ID":"20230817161870-0emd8u3","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230817161870-0emd8u3","updated":"20230817161870"},"Children":[{"ID":"20230817161871-h43367p","Type":"NodeParagraph","Properties":{"id":"20230817161871-h43367p","updated":"20230817161871"},"Children":[{"Type":"NodeText","Data":"组间：多个消费者组消费相同的数据，互不影响。"}]}]}]},{"ID":"20230817161872-yuuw8hy","Type":"NodeParagraph","Properties":{"id":"20230817161872-yuuw8hy","updated":"20230817161872"},"Children":[{"Type":"NodeText","Data":"来看下面这个图，加深一下理解"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"图片描述","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://img.mukewang.com/wiki/5f5deec909cc6f4f14580698.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230817161873-x6emjsj","Type":"NodeParagraph","Properties":{"id":"20230817161873-x6emjsj","updated":"20230817161873"},"Children":[{"Type":"NodeText","Data":"Kafka集群有两个节点，Broker1和Broker2"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"集群内有一个topic，这个topic有4个分区，P0,P1,P2,P3"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"下面有两个消费者组"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"Consumer Group A和Consumer Group B"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"其中Consumer Group A中有两个消费者 C1和C2，由于这个topic有4个分区，所以，C1负责消费两个分区的数据，C2负责消费两个分区的数据，这个属于组内消费"}]},{"ID":"20230817161874-nc4gm55","Type":"NodeParagraph","Properties":{"id":"20230817161874-nc4gm55","updated":"20230817161874"},"Children":[{"Type":"NodeText","Data":"Consumer Group B有5个消费者，C3~C7，其中C3,C4,C5,C6分别消费一个分区的数据，而C7就是多余出来的了，因为现在这个消费者组内的消费者的数量比对应的topic的分区数量还多，但是一个分区同时只能被一个消费者消费，所以就会有一个消费者处于空闲状态。"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"这个也属于组内消费"}]},{"ID":"20230817161875-8951mhd","Type":"NodeParagraph","Properties":{"id":"20230817161875-8951mhd","updated":"20230817161875"},"Children":[{"Type":"NodeText","Data":"Consumer Group A和Consumer Group B这两个消费者组属于组间消费，互不影响。"}]},{"ID":"20230817161876-qyguwld","Type":"NodeHeading","HeadingLevel":6,"Properties":{"id":"20230817161876-qyguwld","updated":"20230817161876"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"###### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Topic、Partition扩展"}]},{"ID":"20230817161877-n9lx38x","Type":"NodeParagraph","Properties":{"id":"20230817161877-n9lx38x","updated":"20230817161877"},"Children":[{"Type":"NodeText","Data":"每个partition在存储层面是append log文件。"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"新消息都会被直接追加到log文件的尾部，每条消息在log文件中的位置称为offset(偏移量)。"}]},{"ID":"20230817161878-44008kd","Type":"NodeParagraph","Properties":{"id":"20230817161878-44008kd","updated":"20230817161878"},"Children":[{"Type":"NodeText","Data":"越多partitions可以容纳更多的consumer,有效提升并发消费的能力。"}]},{"ID":"20230817161879-ikxpeel","Type":"NodeBlockquote","Properties":{"id":"20230817161879-ikxpeel","updated":"20230817161879"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20230817161880-ox2cqsq","Type":"NodeParagraph","Properties":{"id":"20230817161880-ox2cqsq","updated":"20230817161880"},"Children":[{"Type":"NodeText","Data":"具体什么时候增加topic的数量？什么时候增加partition的数量呢？"}]}]},{"ID":"20230817161881-xqmu3ks","Type":"NodeParagraph","Properties":{"id":"20230817161881-xqmu3ks","updated":"20230817161881"},"Children":[{"Type":"NodeText","Data":"业务类型增加需要增加topic、数据量大需要增加partition"}]},{"ID":"20230817161882-22qmw0c","Type":"NodeHeading","HeadingLevel":6,"Properties":{"id":"20230817161882-22qmw0c","updated":"20230817161882"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"###### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Message扩展"}]},{"ID":"20230817161883-dm41k3l","Type":"NodeParagraph","Properties":{"id":"20230817161883-dm41k3l","updated":"20230817161883"},"Children":[{"Type":"NodeText","Data":"每条Message包含了以下三个属性："}]},{"ID":"20230817161884-cna7fxp","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20230817161884-cna7fxp","updated":"20230817161884"},"Children":[{"ID":"20230817161885-i5htitt","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20230817161885-i5htitt","updated":"20230817161885"},"Children":[{"ID":"20230817161886-1decj8s","Type":"NodeParagraph","Properties":{"id":"20230817161886-1decj8s","updated":"20230817161886"},"Children":[{"Type":"NodeText","Data":"offset 对应类型：long 表示此消息在一个partition中的起始的位置。可以认为offset是partition中Message的id，自增的"}]}]},{"ID":"20230817161887-t9jt5ea","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20230817161887-t9jt5ea","updated":"20230817161887"},"Children":[{"ID":"20230817161888-1jr35fb","Type":"NodeParagraph","Properties":{"id":"20230817161888-1jr35fb","updated":"20230817161888"},"Children":[{"Type":"NodeText","Data":"MessageSize 对应类型：int32 此消息的字节大小。"}]}]},{"ID":"20230817161889-a9uvane","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20230817161889-a9uvane","updated":"20230817161889"},"Children":[{"ID":"20230817161890-ed1ly4m","Type":"NodeParagraph","Properties":{"id":"20230817161890-ed1ly4m","updated":"20230817161890"},"Children":[{"Type":"NodeText","Data":"data 是message的具体内容。"}]}]}]},{"ID":"20230817161891-r5nofy3","Type":"NodeParagraph","Properties":{"id":"20230817161891-r5nofy3","updated":"20230817161891"},"Children":[{"Type":"NodeText","Data":"看这个图，加深对Topic、Partition、Message的理解"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"图片描述","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://img.mukewang.com/wiki/5f5defb309a9a9da13020866.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230817161892-ihcbwwi","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20230817161892-ihcbwwi","updated":"20230817161892"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"##### ","Properties":{"id":""}},{"Type":"NodeText","Data":"存储策略"}]},{"ID":"20230817161893-kvw6bzr","Type":"NodeParagraph","Properties":{"id":"20230817161893-kvw6bzr","updated":"20230817161893"},"Children":[{"Type":"NodeText","Data":"在kafka中每个topic包含1到多个partition，每个partition存储一部分Message。每条Message包含三个属性，其中有一个是offset。"}]},{"ID":"20230817161894-olu8ep4","Type":"NodeBlockquote","Properties":{"id":"20230817161894-olu8ep4","updated":"20230817161894"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20230817161895-5z91662","Type":"NodeParagraph","Properties":{"id":"20230817161895-5z91662","updated":"20230817161895"},"Children":[{"Type":"NodeText","Data":"问题来了：offset相当于partition中这个message的唯一id，那么如何通过id高效的找到message？"}]}]},{"ID":"20230817161896-6wa0kkf","Type":"NodeParagraph","Properties":{"id":"20230817161896-6wa0kkf","updated":"20230817161896"},"Children":[{"Type":"NodeText","Data":"两大法宝：分段+索引"}]},{"ID":"20230817161897-mjj77cu","Type":"NodeParagraph","Properties":{"id":"20230817161897-mjj77cu","updated":"20230817161897"},"Children":[{"Type":"NodeText","Data":"kafak中数据的存储方式是这样的："},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"1、每个partition由多个segment【片段】组成，每个segment中存储多条消息，"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"2、每个partition在内存中对应一个index，记录每个segment中的第一条消息偏移量。"}]},{"ID":"20230817161898-xhf6rdq","Type":"NodeParagraph","Properties":{"id":"20230817161898-xhf6rdq","updated":"20230817161898"},"Children":[{"Type":"NodeText","Data":"Kafka中数据的存储流程是这样的："},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"生产者生产的消息会被发送到topic的多个partition上，topic收到消息后往对应partition的最后一个segment上添加该消息，segment达到一定的大小后会创建新的segment。"}]},{"ID":"20230817161899-50yi1wb","Type":"NodeParagraph","Properties":{"id":"20230817161899-50yi1wb","updated":"20230817161899"},"Children":[{"Type":"NodeText","Data":"来看这个图，可以认为是针对topic中某个partition的描述"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"图片描述","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"https://img.mukewang.com/wiki/5f5defd809fe220716620908.jpg","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"图中左侧就是索引，右边是segment文件，左边的索引里面会存储每一个segment文件中第一条消息的偏移量，由于消息的偏移量都是递增的，这样后期查找起来就方便了，先到索引中判断数据在哪个segment文件中，然后就可以直接定位到具体的segment文件了，这样再找具体的那一条数据就很快了，因为都是有序的。"}]},{"ID":"20230817161900-rggxgls","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20230817161900-rggxgls","updated":"20230817161900"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"##### ","Properties":{"id":""}},{"Type":"NodeText","Data":"容错机制"}]},{"ID":"20230817161901-ns6bv0y","Type":"NodeBlockquote","Properties":{"id":"20230817161901-ns6bv0y","updated":"20230817161901"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20230817161902-fpts68v","Type":"NodeParagraph","Properties":{"id":"20230817161902-fpts68v","updated":"20230817161902"},"Children":[{"Type":"NodeText","Data":"当Kafka集群中的一个Broker节点宕机，会出现什么现象？"}]}]},{"ID":"20230817161903-xnt9p5j","Type":"NodeParagraph","Properties":{"id":"20230817161903-xnt9p5j","updated":"20230817161903"},"Children":[{"Type":"NodeText","Data":"下面来演示一下"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"使用kill -9 杀掉bigdata01中的broker进程测试"}]},{"ID":"20230817161904-fa8c3a3","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161904-fa8c3a3","updated":"20230817161904"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"[root@bigdata01 kafka_2.12-2.4.1]# jps\n7522 Jps\n2054 Kafka\n1679 QuorumPeerMain\n[root@bigdata01 kafka_2.12-2.4.1]# kill 2054\n代码块12345\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161905-4kkuhf4","Type":"NodeParagraph","Properties":{"id":"20230817161905-4kkuhf4","updated":"20230817161905"},"Children":[{"Type":"NodeText","Data":"我们可以先通过zookeeper来查看一下，因为当kafka集群中的broker节点启动之后，会自动向zookeeper中进行注册，保存当前节点信息"}]},{"ID":"20230817161906-6munalb","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161906-6munalb","updated":"20230817161906"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"[root@bigdata01 apache-zookeeper-3.5.8-bin]# bin/zkCli.sh \nConnecting to localhost:2181\n.....\n[zk: localhost:2181(CONNECTED) 1] ls /brokers\n[ids, seqid, topics]\n[zk: localhost:2181(CONNECTED) 2] ls /brokers/ids\n[1, 2]\n代码块1234567\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161907-z2399ll","Type":"NodeParagraph","Properties":{"id":"20230817161907-z2399ll","updated":"20230817161907"},"Children":[{"Type":"NodeText","Data":"此时发现zookeeper的/brokers/ids下面只有2个节点信息"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"可以通过get命令查看节点信息，这里面会显示对应的主机名和端口号"}]},{"ID":"20230817161908-xfvl9bu","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161908-xfvl9bu","updated":"20230817161908"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"[zk: localhost:2181(CONNECTED) 4] get /brokers/ids/1\n{\"listener_security_protocol_map\":{\"PLAINTEXT\":\"PLAINTEXT\"},\"endpoints\":[\"PLAINTEXT://bigdata02:9092\"],\"jmx_port\":-1,\"host\":\"bigdata02\",\"timestamp\":\"1591668875280\",\"port\":9092,\"version\":4}\n代码块12\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161909-ax92cva","Type":"NodeParagraph","Properties":{"id":"20230817161909-ax92cva","updated":"20230817161909"},"Children":[{"Type":"NodeText","Data":"然后再使用describe查询topic的详细信息，会发现此时的分区的leader全部变成了目前存活的另外两个节点"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"此时可以发现Isr中的内容和Replicas中的不一样了，因为Isr中显示的是目前正常运行的节点"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"所以当Kafka集群中的一个Broker节点宕机之后，对整个集群而言没有什么特别的大影响，此时集群会给partition重新选出来一些新的Leader节点"}]},{"ID":"20230817161910-mzhcdcc","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161910-mzhcdcc","updated":"20230817161910"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"[root@bigdata01 kafka_2.12-2.4.1]# bin/kafka-topics.sh --describe --zookeeper localhost:2181 --topic hello                       \nTopic: hello    PartitionCount: 5       ReplicationFactor: 2    Configs: \n        Topic: hello    Partition: 0    Leader: 2       Replicas: 2,0       Isr: 2\n        Topic: hello    Partition: 1    Leader: 1       Replicas: 0,1       Isr: 1\n        Topic: hello    Partition: 2    Leader: 1       Replicas: 1,2       Isr: 1,2\n        Topic: hello    Partition: 3    Leader: 2       Replicas: 2,1       Isr: 2,1\n        Topic: hello    Partition: 4    Leader: 2       Replicas: 0,2       Isr: 2\n代码块1234567\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161911-e0sh8ck","Type":"NodeBlockquote","Properties":{"id":"20230817161911-e0sh8ck","updated":"20230817161911"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20230817161912-qc8144r","Type":"NodeParagraph","Properties":{"id":"20230817161912-qc8144r","updated":"20230817161912"},"Children":[{"Type":"NodeText","Data":"当Kafka集群中新增一个Broker节点，会出现什么现象？"}]}]},{"ID":"20230817161913-y63gu89","Type":"NodeParagraph","Properties":{"id":"20230817161913-y63gu89","updated":"20230817161913"},"Children":[{"Type":"NodeText","Data":"新加入一个broker节点，zookeeper会自动识别并在适当的机会选择此节点提供服务"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"再次启动bigdata01节点中的broker进程测试"}]},{"ID":"20230817161914-0upj7q7","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161914-0upj7q7","updated":"20230817161914"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"[root@bigdata01 kafka_2.12-2.4.1]# bin/kafka-server-start.sh -daemon config/server.properties \n代码块1\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161915-9aicctc","Type":"NodeParagraph","Properties":{"id":"20230817161915-9aicctc","updated":"20230817161915"},"Children":[{"Type":"NodeText","Data":"此时到zookeeper中查看一下"}]},{"ID":"20230817161916-z02m7j6","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161916-z02m7j6","updated":"20230817161916"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"[root@bigdata01 apache-zookeeper-3.5.8-bin]# bin/zkCli.sh \nConnecting to localhost:2181\n.....\n[zk: localhost:2181(CONNECTED) 1] ls /brokers\n[ids, seqid, topics]\n[zk: localhost:2181(CONNECTED) 2] ls /brokers/ids\n[0, 1, 2]\n代码块1234567\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161917-n8ufsrf","Type":"NodeParagraph","Properties":{"id":"20230817161917-n8ufsrf","updated":"20230817161917"},"Children":[{"Type":"NodeText","Data":"发现broker.id为0的这个节点信息也有了"}]},{"ID":"20230817161918-li67o6i","Type":"NodeParagraph","Properties":{"id":"20230817161918-li67o6i","updated":"20230817161918"},"Children":[{"Type":"NodeText","Data":"在通过describe查看topic的描述信息，Isr中的信息和Replicas中的内容是一样的了"}]},{"ID":"20230817161919-7rrytbn","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161919-7rrytbn","updated":"20230817161919"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"[root@bigdata01 kafka_2.12-2.4.1]# bin/kafka-topics.sh --describe --zookeeper localhost:2181 --topic hello\nTopic: hello    PartitionCount: 5       ReplicationFactor: 2    Configs: \n        Topic: hello    Partition: 0    Leader: 2       Replicas: 2,0       Isr: 2,0\n        Topic: hello    Partition: 1    Leader: 1       Replicas: 0,1       Isr: 1,0\n        Topic: hello    Partition: 2    Leader: 1       Replicas: 1,2       Isr: 1,2\n        Topic: hello    Partition: 3    Leader: 2       Replicas: 2,1       Isr: 2,1\n        Topic: hello    Partition: 4    Leader: 2       Replicas: 0,2       Isr: 2,0\n代码块1234567\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161920-xkgjr62","Type":"NodeBlockquote","Properties":{"id":"20230817161920-xkgjr62","updated":"20230817161920"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20230817161921-kz8ozsi","Type":"NodeParagraph","Properties":{"id":"20230817161921-kz8ozsi","updated":"20230817161921"},"Children":[{"Type":"NodeText","Data":"但是启动后有个问题：发现新启动的这个节点不会是任何分区的leader？怎么重新均匀分配呢？"}]}]},{"ID":"20230817161922-s998wyx","Type":"NodeParagraph","Properties":{"id":"20230817161922-s998wyx","updated":"20230817161922"},"Children":[{"Type":"NodeText","Data":"1、Broker中的自动均衡策略（默认已经有）"}]},{"ID":"20230817161923-gmb39r4","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161923-gmb39r4","updated":"20230817161923"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"auto.leader.rebalance.enable=true\nleader.imbalance.check.interval.seconds 默认值：300\n代码块12\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161924-kbbfq2l","Type":"NodeParagraph","Properties":{"id":"20230817161924-kbbfq2l","updated":"20230817161924"},"Children":[{"Type":"NodeText","Data":"2、手动执行："}]},{"ID":"20230817161925-ugf2x1o","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161925-ugf2x1o","updated":"20230817161925"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"bin/kafka-leader-election.sh --bootstrap-server localhost:9092 --election-type preferred --all-topic-partitions\n代码块1\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161926-8lsynro","Type":"NodeParagraph","Properties":{"id":"20230817161926-8lsynro","updated":"20230817161926"},"Children":[{"Type":"NodeText","Data":"我们尝试使用手工执行"}]},{"ID":"20230817161927-y941tvt","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161927-y941tvt","updated":"20230817161927"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"[root@bigdata01 kafka_2.12-2.4.1]# bin/kafka-leader-election.sh --bootstrap-server localhost:9092 --election-type preferred --all-topic-partitions \nSuccessfully completed leader election (PREFERRED) for partitions hello-4, hello-1\n代码块12\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230817161928-4p2cvcq","Type":"NodeParagraph","Properties":{"id":"20230817161928-4p2cvcq","updated":"20230817161928"},"Children":[{"Type":"NodeText","Data":"执行后的效果如下，这样就实现了均匀分配"}]},{"ID":"20230817161929-f3d9c3e","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230817161929-f3d9c3e","updated":"20230817161929"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"[root@bigdata01 kafka_2.12-2.4.1]# bin/kafka-topics.sh --describe --zookeeper localhost:2181 --topic hello                         \nTopic: hello    PartitionCount: 5       ReplicationFactor: 2    Configs: \n        Topic: hello    Partition: 0    Leader: 2       Replicas: 2,0Isr: 2,0\n        Topic: hello    Partition: 1    Leader: 0       Replicas: 0,1Isr: 1,0\n        Topic: hello    Partition: 2    Leader: 1       Replicas: 1,2Isr: 1,2\n        Topic: hello    Partition: 3    Leader: 2       Replicas: 2,1Isr: 2,1\n        Topic: hello    Partition: 4    Leader: 0       Replicas: 0,2Isr: 2,0\n代码块预览复制1234567\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]}]}